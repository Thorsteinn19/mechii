
Homework.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000000de  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000004b0  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006e3  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  8e:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <pins>:
#include "pins.h"

void pins()
{

	DDRB|=LEDPIN;
  96:	84 b1       	in	r24, 0x04	; 4
  98:	90 91 00 01 	lds	r25, 0x0100
  9c:	89 2b       	or	r24, r25
  9e:	84 b9       	out	0x04, r24	; 4
  a0:	29 2f       	mov	r18, r25
  a2:	20 95       	com	r18
	while(1)
	{
		PORTB|=LEDPIN;
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	89 2b       	or	r24, r25
  a8:	85 b9       	out	0x05, r24	; 5
		PORTB&=~LEDPIN;
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	82 23       	and	r24, r18
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	f9 cf       	rjmp	.-14     	; 0xa4 <pins+0xe>

000000b2 <led_on>:
	}

}

void led_on(char pin){
	DDRB |=pin;
  b2:	94 b1       	in	r25, 0x04	; 4
  b4:	98 2b       	or	r25, r24
  b6:	94 b9       	out	0x04, r25	; 4
	PORTB |= pin;
  b8:	95 b1       	in	r25, 0x05	; 5
  ba:	98 2b       	or	r25, r24
  bc:	95 b9       	out	0x05, r25	; 5
}
  be:	08 95       	ret

000000c0 <led_off>:

void led_off(char pin){
	DDRB|=pin;
  c0:	94 b1       	in	r25, 0x04	; 4
  c2:	98 2b       	or	r25, r24
  c4:	94 b9       	out	0x04, r25	; 4
	PORTB &= ~pin;
  c6:	95 b1       	in	r25, 0x05	; 5
  c8:	80 95       	com	r24
  ca:	98 23       	and	r25, r24
  cc:	95 b9       	out	0x05, r25	; 5
}
  ce:	08 95       	ret

000000d0 <main>:
unsigned char LEDPIN=0x20;

int main()
{

	pins();
  d0:	0e 94 4b 00 	call	0x96	; 0x96 <pins>
	return 0;
}
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	08 95       	ret

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
