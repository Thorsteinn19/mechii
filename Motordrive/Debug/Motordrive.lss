
Motordrive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013a  00800100  00002d8c  00002e20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000076  0080023a  0080023a  00002f5a  2**0
                  ALLOC
  3 .stab         000026a0  00000000  00000000  00002f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000eab  00000000  00000000  000055fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000064a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f6  00000000  00000000  00006647  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002393  00000000  00000000  0000683d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001374  00000000  00000000  00008bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001238  00000000  00000000  00009f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b17c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ff  00000000  00000000  0000b33c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009de  00000000  00000000  0000b63b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c019  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 f2 0e 	jmp	0x1de4	; 0x1de4 <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e8       	ldi	r30, 0x8C	; 140
      7c:	fd e2       	ldi	r31, 0x2D	; 45
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	aa 33       	cpi	r26, 0x3A	; 58
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	aa e3       	ldi	r26, 0x3A	; 58
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 3b       	cpi	r26, 0xB0	; 176
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <main>
      9e:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__fixunssfsi>:
      a6:	ef 92       	push	r14
      a8:	ff 92       	push	r15
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	7b 01       	movw	r14, r22
      b0:	8c 01       	movw	r16, r24
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 cf 03 	call	0x79e	; 0x79e <__gesf2>
      be:	88 23       	and	r24, r24
      c0:	8c f0       	brlt	.+34     	; 0xe4 <__fixunssfsi+0x3e>
      c2:	c8 01       	movw	r24, r16
      c4:	b7 01       	movw	r22, r14
      c6:	20 e0       	ldi	r18, 0x00	; 0
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	40 e0       	ldi	r20, 0x00	; 0
      cc:	5f e4       	ldi	r21, 0x4F	; 79
      ce:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
      d2:	0e 94 8d 04 	call	0x91a	; 0x91a <__fixsfsi>
      d6:	9b 01       	movw	r18, r22
      d8:	ac 01       	movw	r20, r24
      da:	20 50       	subi	r18, 0x00	; 0
      dc:	30 40       	sbci	r19, 0x00	; 0
      de:	40 40       	sbci	r20, 0x00	; 0
      e0:	50 48       	sbci	r21, 0x80	; 128
      e2:	06 c0       	rjmp	.+12     	; 0xf0 <__fixunssfsi+0x4a>
      e4:	c8 01       	movw	r24, r16
      e6:	b7 01       	movw	r22, r14
      e8:	0e 94 8d 04 	call	0x91a	; 0x91a <__fixsfsi>
      ec:	9b 01       	movw	r18, r22
      ee:	ac 01       	movw	r20, r24
      f0:	b9 01       	movw	r22, r18
      f2:	ca 01       	movw	r24, r20
      f4:	1f 91       	pop	r17
      f6:	0f 91       	pop	r16
      f8:	ff 90       	pop	r15
      fa:	ef 90       	pop	r14
      fc:	08 95       	ret

000000fe <_fpadd_parts>:
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	e5 e8       	ldi	r30, 0x85	; 133
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__prologue_saves__>
     10a:	dc 01       	movw	r26, r24
     10c:	2b 01       	movw	r4, r22
     10e:	fa 01       	movw	r30, r20
     110:	9c 91       	ld	r25, X
     112:	92 30       	cpi	r25, 0x02	; 2
     114:	08 f4       	brcc	.+2      	; 0x118 <_fpadd_parts+0x1a>
     116:	39 c1       	rjmp	.+626    	; 0x38a <_fpadd_parts+0x28c>
     118:	eb 01       	movw	r28, r22
     11a:	88 81       	ld	r24, Y
     11c:	82 30       	cpi	r24, 0x02	; 2
     11e:	08 f4       	brcc	.+2      	; 0x122 <_fpadd_parts+0x24>
     120:	33 c1       	rjmp	.+614    	; 0x388 <_fpadd_parts+0x28a>
     122:	94 30       	cpi	r25, 0x04	; 4
     124:	69 f4       	brne	.+26     	; 0x140 <_fpadd_parts+0x42>
     126:	84 30       	cpi	r24, 0x04	; 4
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x2e>
     12a:	2f c1       	rjmp	.+606    	; 0x38a <_fpadd_parts+0x28c>
     12c:	11 96       	adiw	r26, 0x01	; 1
     12e:	9c 91       	ld	r25, X
     130:	11 97       	sbiw	r26, 0x01	; 1
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	98 17       	cp	r25, r24
     136:	09 f4       	brne	.+2      	; 0x13a <_fpadd_parts+0x3c>
     138:	28 c1       	rjmp	.+592    	; 0x38a <_fpadd_parts+0x28c>
     13a:	a1 e3       	ldi	r26, 0x31	; 49
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	25 c1       	rjmp	.+586    	; 0x38a <_fpadd_parts+0x28c>
     140:	84 30       	cpi	r24, 0x04	; 4
     142:	09 f4       	brne	.+2      	; 0x146 <_fpadd_parts+0x48>
     144:	21 c1       	rjmp	.+578    	; 0x388 <_fpadd_parts+0x28a>
     146:	82 30       	cpi	r24, 0x02	; 2
     148:	a9 f4       	brne	.+42     	; 0x174 <_fpadd_parts+0x76>
     14a:	92 30       	cpi	r25, 0x02	; 2
     14c:	09 f0       	breq	.+2      	; 0x150 <_fpadd_parts+0x52>
     14e:	1d c1       	rjmp	.+570    	; 0x38a <_fpadd_parts+0x28c>
     150:	9a 01       	movw	r18, r20
     152:	ad 01       	movw	r20, r26
     154:	88 e0       	ldi	r24, 0x08	; 8
     156:	ea 01       	movw	r28, r20
     158:	09 90       	ld	r0, Y+
     15a:	ae 01       	movw	r20, r28
     15c:	e9 01       	movw	r28, r18
     15e:	09 92       	st	Y+, r0
     160:	9e 01       	movw	r18, r28
     162:	81 50       	subi	r24, 0x01	; 1
     164:	c1 f7       	brne	.-16     	; 0x156 <_fpadd_parts+0x58>
     166:	e2 01       	movw	r28, r4
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	11 96       	adiw	r26, 0x01	; 1
     16c:	9c 91       	ld	r25, X
     16e:	89 23       	and	r24, r25
     170:	81 83       	std	Z+1, r24	; 0x01
     172:	08 c1       	rjmp	.+528    	; 0x384 <_fpadd_parts+0x286>
     174:	92 30       	cpi	r25, 0x02	; 2
     176:	09 f4       	brne	.+2      	; 0x17a <_fpadd_parts+0x7c>
     178:	07 c1       	rjmp	.+526    	; 0x388 <_fpadd_parts+0x28a>
     17a:	12 96       	adiw	r26, 0x02	; 2
     17c:	2d 90       	ld	r2, X+
     17e:	3c 90       	ld	r3, X
     180:	13 97       	sbiw	r26, 0x03	; 3
     182:	eb 01       	movw	r28, r22
     184:	8a 81       	ldd	r24, Y+2	; 0x02
     186:	9b 81       	ldd	r25, Y+3	; 0x03
     188:	14 96       	adiw	r26, 0x04	; 4
     18a:	ad 90       	ld	r10, X+
     18c:	bd 90       	ld	r11, X+
     18e:	cd 90       	ld	r12, X+
     190:	dc 90       	ld	r13, X
     192:	17 97       	sbiw	r26, 0x07	; 7
     194:	ec 80       	ldd	r14, Y+4	; 0x04
     196:	fd 80       	ldd	r15, Y+5	; 0x05
     198:	0e 81       	ldd	r16, Y+6	; 0x06
     19a:	1f 81       	ldd	r17, Y+7	; 0x07
     19c:	91 01       	movw	r18, r2
     19e:	28 1b       	sub	r18, r24
     1a0:	39 0b       	sbc	r19, r25
     1a2:	b9 01       	movw	r22, r18
     1a4:	37 ff       	sbrs	r19, 7
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <_fpadd_parts+0xb2>
     1a8:	66 27       	eor	r22, r22
     1aa:	77 27       	eor	r23, r23
     1ac:	62 1b       	sub	r22, r18
     1ae:	73 0b       	sbc	r23, r19
     1b0:	60 32       	cpi	r22, 0x20	; 32
     1b2:	71 05       	cpc	r23, r1
     1b4:	0c f0       	brlt	.+2      	; 0x1b8 <_fpadd_parts+0xba>
     1b6:	61 c0       	rjmp	.+194    	; 0x27a <_fpadd_parts+0x17c>
     1b8:	12 16       	cp	r1, r18
     1ba:	13 06       	cpc	r1, r19
     1bc:	6c f5       	brge	.+90     	; 0x218 <_fpadd_parts+0x11a>
     1be:	37 01       	movw	r6, r14
     1c0:	48 01       	movw	r8, r16
     1c2:	06 2e       	mov	r0, r22
     1c4:	04 c0       	rjmp	.+8      	; 0x1ce <_fpadd_parts+0xd0>
     1c6:	96 94       	lsr	r9
     1c8:	87 94       	ror	r8
     1ca:	77 94       	ror	r7
     1cc:	67 94       	ror	r6
     1ce:	0a 94       	dec	r0
     1d0:	d2 f7       	brpl	.-12     	; 0x1c6 <_fpadd_parts+0xc8>
     1d2:	21 e0       	ldi	r18, 0x01	; 1
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	40 e0       	ldi	r20, 0x00	; 0
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	04 c0       	rjmp	.+8      	; 0x1e4 <_fpadd_parts+0xe6>
     1dc:	22 0f       	add	r18, r18
     1de:	33 1f       	adc	r19, r19
     1e0:	44 1f       	adc	r20, r20
     1e2:	55 1f       	adc	r21, r21
     1e4:	6a 95       	dec	r22
     1e6:	d2 f7       	brpl	.-12     	; 0x1dc <_fpadd_parts+0xde>
     1e8:	21 50       	subi	r18, 0x01	; 1
     1ea:	30 40       	sbci	r19, 0x00	; 0
     1ec:	40 40       	sbci	r20, 0x00	; 0
     1ee:	50 40       	sbci	r21, 0x00	; 0
     1f0:	2e 21       	and	r18, r14
     1f2:	3f 21       	and	r19, r15
     1f4:	40 23       	and	r20, r16
     1f6:	51 23       	and	r21, r17
     1f8:	21 15       	cp	r18, r1
     1fa:	31 05       	cpc	r19, r1
     1fc:	41 05       	cpc	r20, r1
     1fe:	51 05       	cpc	r21, r1
     200:	21 f0       	breq	.+8      	; 0x20a <_fpadd_parts+0x10c>
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	79 01       	movw	r14, r18
     20c:	8a 01       	movw	r16, r20
     20e:	e6 28       	or	r14, r6
     210:	f7 28       	or	r15, r7
     212:	08 29       	or	r16, r8
     214:	19 29       	or	r17, r9
     216:	3c c0       	rjmp	.+120    	; 0x290 <_fpadd_parts+0x192>
     218:	23 2b       	or	r18, r19
     21a:	d1 f1       	breq	.+116    	; 0x290 <_fpadd_parts+0x192>
     21c:	26 0e       	add	r2, r22
     21e:	37 1e       	adc	r3, r23
     220:	35 01       	movw	r6, r10
     222:	46 01       	movw	r8, r12
     224:	06 2e       	mov	r0, r22
     226:	04 c0       	rjmp	.+8      	; 0x230 <_fpadd_parts+0x132>
     228:	96 94       	lsr	r9
     22a:	87 94       	ror	r8
     22c:	77 94       	ror	r7
     22e:	67 94       	ror	r6
     230:	0a 94       	dec	r0
     232:	d2 f7       	brpl	.-12     	; 0x228 <_fpadd_parts+0x12a>
     234:	21 e0       	ldi	r18, 0x01	; 1
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	04 c0       	rjmp	.+8      	; 0x246 <_fpadd_parts+0x148>
     23e:	22 0f       	add	r18, r18
     240:	33 1f       	adc	r19, r19
     242:	44 1f       	adc	r20, r20
     244:	55 1f       	adc	r21, r21
     246:	6a 95       	dec	r22
     248:	d2 f7       	brpl	.-12     	; 0x23e <_fpadd_parts+0x140>
     24a:	21 50       	subi	r18, 0x01	; 1
     24c:	30 40       	sbci	r19, 0x00	; 0
     24e:	40 40       	sbci	r20, 0x00	; 0
     250:	50 40       	sbci	r21, 0x00	; 0
     252:	2a 21       	and	r18, r10
     254:	3b 21       	and	r19, r11
     256:	4c 21       	and	r20, r12
     258:	5d 21       	and	r21, r13
     25a:	21 15       	cp	r18, r1
     25c:	31 05       	cpc	r19, r1
     25e:	41 05       	cpc	r20, r1
     260:	51 05       	cpc	r21, r1
     262:	21 f0       	breq	.+8      	; 0x26c <_fpadd_parts+0x16e>
     264:	21 e0       	ldi	r18, 0x01	; 1
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	59 01       	movw	r10, r18
     26e:	6a 01       	movw	r12, r20
     270:	a6 28       	or	r10, r6
     272:	b7 28       	or	r11, r7
     274:	c8 28       	or	r12, r8
     276:	d9 28       	or	r13, r9
     278:	0b c0       	rjmp	.+22     	; 0x290 <_fpadd_parts+0x192>
     27a:	82 15       	cp	r24, r2
     27c:	93 05       	cpc	r25, r3
     27e:	2c f0       	brlt	.+10     	; 0x28a <_fpadd_parts+0x18c>
     280:	1c 01       	movw	r2, r24
     282:	aa 24       	eor	r10, r10
     284:	bb 24       	eor	r11, r11
     286:	65 01       	movw	r12, r10
     288:	03 c0       	rjmp	.+6      	; 0x290 <_fpadd_parts+0x192>
     28a:	ee 24       	eor	r14, r14
     28c:	ff 24       	eor	r15, r15
     28e:	87 01       	movw	r16, r14
     290:	11 96       	adiw	r26, 0x01	; 1
     292:	9c 91       	ld	r25, X
     294:	d2 01       	movw	r26, r4
     296:	11 96       	adiw	r26, 0x01	; 1
     298:	8c 91       	ld	r24, X
     29a:	98 17       	cp	r25, r24
     29c:	09 f4       	brne	.+2      	; 0x2a0 <_fpadd_parts+0x1a2>
     29e:	45 c0       	rjmp	.+138    	; 0x32a <_fpadd_parts+0x22c>
     2a0:	99 23       	and	r25, r25
     2a2:	39 f0       	breq	.+14     	; 0x2b2 <_fpadd_parts+0x1b4>
     2a4:	a8 01       	movw	r20, r16
     2a6:	97 01       	movw	r18, r14
     2a8:	2a 19       	sub	r18, r10
     2aa:	3b 09       	sbc	r19, r11
     2ac:	4c 09       	sbc	r20, r12
     2ae:	5d 09       	sbc	r21, r13
     2b0:	06 c0       	rjmp	.+12     	; 0x2be <_fpadd_parts+0x1c0>
     2b2:	a6 01       	movw	r20, r12
     2b4:	95 01       	movw	r18, r10
     2b6:	2e 19       	sub	r18, r14
     2b8:	3f 09       	sbc	r19, r15
     2ba:	40 0b       	sbc	r20, r16
     2bc:	51 0b       	sbc	r21, r17
     2be:	57 fd       	sbrc	r21, 7
     2c0:	08 c0       	rjmp	.+16     	; 0x2d2 <_fpadd_parts+0x1d4>
     2c2:	11 82       	std	Z+1, r1	; 0x01
     2c4:	33 82       	std	Z+3, r3	; 0x03
     2c6:	22 82       	std	Z+2, r2	; 0x02
     2c8:	24 83       	std	Z+4, r18	; 0x04
     2ca:	35 83       	std	Z+5, r19	; 0x05
     2cc:	46 83       	std	Z+6, r20	; 0x06
     2ce:	57 83       	std	Z+7, r21	; 0x07
     2d0:	1d c0       	rjmp	.+58     	; 0x30c <_fpadd_parts+0x20e>
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	81 83       	std	Z+1, r24	; 0x01
     2d6:	33 82       	std	Z+3, r3	; 0x03
     2d8:	22 82       	std	Z+2, r2	; 0x02
     2da:	88 27       	eor	r24, r24
     2dc:	99 27       	eor	r25, r25
     2de:	dc 01       	movw	r26, r24
     2e0:	82 1b       	sub	r24, r18
     2e2:	93 0b       	sbc	r25, r19
     2e4:	a4 0b       	sbc	r26, r20
     2e6:	b5 0b       	sbc	r27, r21
     2e8:	84 83       	std	Z+4, r24	; 0x04
     2ea:	95 83       	std	Z+5, r25	; 0x05
     2ec:	a6 83       	std	Z+6, r26	; 0x06
     2ee:	b7 83       	std	Z+7, r27	; 0x07
     2f0:	0d c0       	rjmp	.+26     	; 0x30c <_fpadd_parts+0x20e>
     2f2:	22 0f       	add	r18, r18
     2f4:	33 1f       	adc	r19, r19
     2f6:	44 1f       	adc	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	24 83       	std	Z+4, r18	; 0x04
     2fc:	35 83       	std	Z+5, r19	; 0x05
     2fe:	46 83       	std	Z+6, r20	; 0x06
     300:	57 83       	std	Z+7, r21	; 0x07
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	93 83       	std	Z+3, r25	; 0x03
     30a:	82 83       	std	Z+2, r24	; 0x02
     30c:	24 81       	ldd	r18, Z+4	; 0x04
     30e:	35 81       	ldd	r19, Z+5	; 0x05
     310:	46 81       	ldd	r20, Z+6	; 0x06
     312:	57 81       	ldd	r21, Z+7	; 0x07
     314:	da 01       	movw	r26, r20
     316:	c9 01       	movw	r24, r18
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	a1 09       	sbc	r26, r1
     31c:	b1 09       	sbc	r27, r1
     31e:	8f 5f       	subi	r24, 0xFF	; 255
     320:	9f 4f       	sbci	r25, 0xFF	; 255
     322:	af 4f       	sbci	r26, 0xFF	; 255
     324:	bf 43       	sbci	r27, 0x3F	; 63
     326:	28 f3       	brcs	.-54     	; 0x2f2 <_fpadd_parts+0x1f4>
     328:	0b c0       	rjmp	.+22     	; 0x340 <_fpadd_parts+0x242>
     32a:	91 83       	std	Z+1, r25	; 0x01
     32c:	33 82       	std	Z+3, r3	; 0x03
     32e:	22 82       	std	Z+2, r2	; 0x02
     330:	ea 0c       	add	r14, r10
     332:	fb 1c       	adc	r15, r11
     334:	0c 1d       	adc	r16, r12
     336:	1d 1d       	adc	r17, r13
     338:	e4 82       	std	Z+4, r14	; 0x04
     33a:	f5 82       	std	Z+5, r15	; 0x05
     33c:	06 83       	std	Z+6, r16	; 0x06
     33e:	17 83       	std	Z+7, r17	; 0x07
     340:	83 e0       	ldi	r24, 0x03	; 3
     342:	80 83       	st	Z, r24
     344:	24 81       	ldd	r18, Z+4	; 0x04
     346:	35 81       	ldd	r19, Z+5	; 0x05
     348:	46 81       	ldd	r20, Z+6	; 0x06
     34a:	57 81       	ldd	r21, Z+7	; 0x07
     34c:	57 ff       	sbrs	r21, 7
     34e:	1a c0       	rjmp	.+52     	; 0x384 <_fpadd_parts+0x286>
     350:	c9 01       	movw	r24, r18
     352:	aa 27       	eor	r26, r26
     354:	97 fd       	sbrc	r25, 7
     356:	a0 95       	com	r26
     358:	ba 2f       	mov	r27, r26
     35a:	81 70       	andi	r24, 0x01	; 1
     35c:	90 70       	andi	r25, 0x00	; 0
     35e:	a0 70       	andi	r26, 0x00	; 0
     360:	b0 70       	andi	r27, 0x00	; 0
     362:	56 95       	lsr	r21
     364:	47 95       	ror	r20
     366:	37 95       	ror	r19
     368:	27 95       	ror	r18
     36a:	82 2b       	or	r24, r18
     36c:	93 2b       	or	r25, r19
     36e:	a4 2b       	or	r26, r20
     370:	b5 2b       	or	r27, r21
     372:	84 83       	std	Z+4, r24	; 0x04
     374:	95 83       	std	Z+5, r25	; 0x05
     376:	a6 83       	std	Z+6, r26	; 0x06
     378:	b7 83       	std	Z+7, r27	; 0x07
     37a:	82 81       	ldd	r24, Z+2	; 0x02
     37c:	93 81       	ldd	r25, Z+3	; 0x03
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	93 83       	std	Z+3, r25	; 0x03
     382:	82 83       	std	Z+2, r24	; 0x02
     384:	df 01       	movw	r26, r30
     386:	01 c0       	rjmp	.+2      	; 0x38a <_fpadd_parts+0x28c>
     388:	d2 01       	movw	r26, r4
     38a:	cd 01       	movw	r24, r26
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	e2 e1       	ldi	r30, 0x12	; 18
     392:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__epilogue_restores__>

00000396 <__subsf3>:
     396:	a0 e2       	ldi	r26, 0x20	; 32
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e1 ed       	ldi	r30, 0xD1	; 209
     39c:	f1 e0       	ldi	r31, 0x01	; 1
     39e:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__prologue_saves__+0x18>
     3a2:	69 83       	std	Y+1, r22	; 0x01
     3a4:	7a 83       	std	Y+2, r23	; 0x02
     3a6:	8b 83       	std	Y+3, r24	; 0x03
     3a8:	9c 83       	std	Y+4, r25	; 0x04
     3aa:	2d 83       	std	Y+5, r18	; 0x05
     3ac:	3e 83       	std	Y+6, r19	; 0x06
     3ae:	4f 83       	std	Y+7, r20	; 0x07
     3b0:	58 87       	std	Y+8, r21	; 0x08
     3b2:	e9 e0       	ldi	r30, 0x09	; 9
     3b4:	ee 2e       	mov	r14, r30
     3b6:	f1 2c       	mov	r15, r1
     3b8:	ec 0e       	add	r14, r28
     3ba:	fd 1e       	adc	r15, r29
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	b7 01       	movw	r22, r14
     3c2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__unpack_f>
     3c6:	8e 01       	movw	r16, r28
     3c8:	0f 5e       	subi	r16, 0xEF	; 239
     3ca:	1f 4f       	sbci	r17, 0xFF	; 255
     3cc:	ce 01       	movw	r24, r28
     3ce:	05 96       	adiw	r24, 0x05	; 5
     3d0:	b8 01       	movw	r22, r16
     3d2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__unpack_f>
     3d6:	8a 89       	ldd	r24, Y+18	; 0x12
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	89 27       	eor	r24, r25
     3dc:	8a 8b       	std	Y+18, r24	; 0x12
     3de:	c7 01       	movw	r24, r14
     3e0:	b8 01       	movw	r22, r16
     3e2:	ae 01       	movw	r20, r28
     3e4:	47 5e       	subi	r20, 0xE7	; 231
     3e6:	5f 4f       	sbci	r21, 0xFF	; 255
     3e8:	0e 94 7f 00 	call	0xfe	; 0xfe <_fpadd_parts>
     3ec:	0e 94 a9 05 	call	0xb52	; 0xb52 <__pack_f>
     3f0:	a0 96       	adiw	r28, 0x20	; 32
     3f2:	e6 e0       	ldi	r30, 0x06	; 6
     3f4:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__epilogue_restores__+0x18>

000003f8 <__addsf3>:
     3f8:	a0 e2       	ldi	r26, 0x20	; 32
     3fa:	b0 e0       	ldi	r27, 0x00	; 0
     3fc:	e2 e0       	ldi	r30, 0x02	; 2
     3fe:	f2 e0       	ldi	r31, 0x02	; 2
     400:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__prologue_saves__+0x18>
     404:	69 83       	std	Y+1, r22	; 0x01
     406:	7a 83       	std	Y+2, r23	; 0x02
     408:	8b 83       	std	Y+3, r24	; 0x03
     40a:	9c 83       	std	Y+4, r25	; 0x04
     40c:	2d 83       	std	Y+5, r18	; 0x05
     40e:	3e 83       	std	Y+6, r19	; 0x06
     410:	4f 83       	std	Y+7, r20	; 0x07
     412:	58 87       	std	Y+8, r21	; 0x08
     414:	f9 e0       	ldi	r31, 0x09	; 9
     416:	ef 2e       	mov	r14, r31
     418:	f1 2c       	mov	r15, r1
     41a:	ec 0e       	add	r14, r28
     41c:	fd 1e       	adc	r15, r29
     41e:	ce 01       	movw	r24, r28
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	b7 01       	movw	r22, r14
     424:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__unpack_f>
     428:	8e 01       	movw	r16, r28
     42a:	0f 5e       	subi	r16, 0xEF	; 239
     42c:	1f 4f       	sbci	r17, 0xFF	; 255
     42e:	ce 01       	movw	r24, r28
     430:	05 96       	adiw	r24, 0x05	; 5
     432:	b8 01       	movw	r22, r16
     434:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__unpack_f>
     438:	c7 01       	movw	r24, r14
     43a:	b8 01       	movw	r22, r16
     43c:	ae 01       	movw	r20, r28
     43e:	47 5e       	subi	r20, 0xE7	; 231
     440:	5f 4f       	sbci	r21, 0xFF	; 255
     442:	0e 94 7f 00 	call	0xfe	; 0xfe <_fpadd_parts>
     446:	0e 94 a9 05 	call	0xb52	; 0xb52 <__pack_f>
     44a:	a0 96       	adiw	r28, 0x20	; 32
     44c:	e6 e0       	ldi	r30, 0x06	; 6
     44e:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__epilogue_restores__+0x18>

00000452 <__mulsf3>:
     452:	a0 e2       	ldi	r26, 0x20	; 32
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	ef e2       	ldi	r30, 0x2F	; 47
     458:	f2 e0       	ldi	r31, 0x02	; 2
     45a:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__prologue_saves__>
     45e:	69 83       	std	Y+1, r22	; 0x01
     460:	7a 83       	std	Y+2, r23	; 0x02
     462:	8b 83       	std	Y+3, r24	; 0x03
     464:	9c 83       	std	Y+4, r25	; 0x04
     466:	2d 83       	std	Y+5, r18	; 0x05
     468:	3e 83       	std	Y+6, r19	; 0x06
     46a:	4f 83       	std	Y+7, r20	; 0x07
     46c:	58 87       	std	Y+8, r21	; 0x08
     46e:	ce 01       	movw	r24, r28
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	be 01       	movw	r22, r28
     474:	67 5f       	subi	r22, 0xF7	; 247
     476:	7f 4f       	sbci	r23, 0xFF	; 255
     478:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__unpack_f>
     47c:	ce 01       	movw	r24, r28
     47e:	05 96       	adiw	r24, 0x05	; 5
     480:	be 01       	movw	r22, r28
     482:	6f 5e       	subi	r22, 0xEF	; 239
     484:	7f 4f       	sbci	r23, 0xFF	; 255
     486:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__unpack_f>
     48a:	99 85       	ldd	r25, Y+9	; 0x09
     48c:	92 30       	cpi	r25, 0x02	; 2
     48e:	88 f0       	brcs	.+34     	; 0x4b2 <__mulsf3+0x60>
     490:	89 89       	ldd	r24, Y+17	; 0x11
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	c8 f0       	brcs	.+50     	; 0x4c8 <__mulsf3+0x76>
     496:	94 30       	cpi	r25, 0x04	; 4
     498:	19 f4       	brne	.+6      	; 0x4a0 <__mulsf3+0x4e>
     49a:	82 30       	cpi	r24, 0x02	; 2
     49c:	51 f4       	brne	.+20     	; 0x4b2 <__mulsf3+0x60>
     49e:	04 c0       	rjmp	.+8      	; 0x4a8 <__mulsf3+0x56>
     4a0:	84 30       	cpi	r24, 0x04	; 4
     4a2:	29 f4       	brne	.+10     	; 0x4ae <__mulsf3+0x5c>
     4a4:	92 30       	cpi	r25, 0x02	; 2
     4a6:	81 f4       	brne	.+32     	; 0x4c8 <__mulsf3+0x76>
     4a8:	81 e3       	ldi	r24, 0x31	; 49
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	c6 c0       	rjmp	.+396    	; 0x63a <__mulsf3+0x1e8>
     4ae:	92 30       	cpi	r25, 0x02	; 2
     4b0:	49 f4       	brne	.+18     	; 0x4c4 <__mulsf3+0x72>
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b6:	8a 89       	ldd	r24, Y+18	; 0x12
     4b8:	98 13       	cpse	r25, r24
     4ba:	21 e0       	ldi	r18, 0x01	; 1
     4bc:	2a 87       	std	Y+10, r18	; 0x0a
     4be:	ce 01       	movw	r24, r28
     4c0:	09 96       	adiw	r24, 0x09	; 9
     4c2:	bb c0       	rjmp	.+374    	; 0x63a <__mulsf3+0x1e8>
     4c4:	82 30       	cpi	r24, 0x02	; 2
     4c6:	49 f4       	brne	.+18     	; 0x4da <__mulsf3+0x88>
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     4cc:	8a 89       	ldd	r24, Y+18	; 0x12
     4ce:	98 13       	cpse	r25, r24
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	2a 8b       	std	Y+18, r18	; 0x12
     4d4:	ce 01       	movw	r24, r28
     4d6:	41 96       	adiw	r24, 0x11	; 17
     4d8:	b0 c0       	rjmp	.+352    	; 0x63a <__mulsf3+0x1e8>
     4da:	2d 84       	ldd	r2, Y+13	; 0x0d
     4dc:	3e 84       	ldd	r3, Y+14	; 0x0e
     4de:	4f 84       	ldd	r4, Y+15	; 0x0f
     4e0:	58 88       	ldd	r5, Y+16	; 0x10
     4e2:	6d 88       	ldd	r6, Y+21	; 0x15
     4e4:	7e 88       	ldd	r7, Y+22	; 0x16
     4e6:	8f 88       	ldd	r8, Y+23	; 0x17
     4e8:	98 8c       	ldd	r9, Y+24	; 0x18
     4ea:	ee 24       	eor	r14, r14
     4ec:	ff 24       	eor	r15, r15
     4ee:	87 01       	movw	r16, r14
     4f0:	aa 24       	eor	r10, r10
     4f2:	bb 24       	eor	r11, r11
     4f4:	65 01       	movw	r12, r10
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	e0 e0       	ldi	r30, 0x00	; 0
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	c1 01       	movw	r24, r2
     504:	81 70       	andi	r24, 0x01	; 1
     506:	90 70       	andi	r25, 0x00	; 0
     508:	89 2b       	or	r24, r25
     50a:	e9 f0       	breq	.+58     	; 0x546 <__mulsf3+0xf4>
     50c:	e6 0c       	add	r14, r6
     50e:	f7 1c       	adc	r15, r7
     510:	08 1d       	adc	r16, r8
     512:	19 1d       	adc	r17, r9
     514:	9a 01       	movw	r18, r20
     516:	ab 01       	movw	r20, r22
     518:	2a 0d       	add	r18, r10
     51a:	3b 1d       	adc	r19, r11
     51c:	4c 1d       	adc	r20, r12
     51e:	5d 1d       	adc	r21, r13
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	a0 e0       	ldi	r26, 0x00	; 0
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	e6 14       	cp	r14, r6
     52a:	f7 04       	cpc	r15, r7
     52c:	08 05       	cpc	r16, r8
     52e:	19 05       	cpc	r17, r9
     530:	20 f4       	brcc	.+8      	; 0x53a <__mulsf3+0xe8>
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	a0 e0       	ldi	r26, 0x00	; 0
     538:	b0 e0       	ldi	r27, 0x00	; 0
     53a:	ba 01       	movw	r22, r20
     53c:	a9 01       	movw	r20, r18
     53e:	48 0f       	add	r20, r24
     540:	59 1f       	adc	r21, r25
     542:	6a 1f       	adc	r22, r26
     544:	7b 1f       	adc	r23, r27
     546:	aa 0c       	add	r10, r10
     548:	bb 1c       	adc	r11, r11
     54a:	cc 1c       	adc	r12, r12
     54c:	dd 1c       	adc	r13, r13
     54e:	97 fe       	sbrs	r9, 7
     550:	08 c0       	rjmp	.+16     	; 0x562 <__mulsf3+0x110>
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	a0 e0       	ldi	r26, 0x00	; 0
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	a8 2a       	or	r10, r24
     55c:	b9 2a       	or	r11, r25
     55e:	ca 2a       	or	r12, r26
     560:	db 2a       	or	r13, r27
     562:	31 96       	adiw	r30, 0x01	; 1
     564:	e0 32       	cpi	r30, 0x20	; 32
     566:	f1 05       	cpc	r31, r1
     568:	49 f0       	breq	.+18     	; 0x57c <__mulsf3+0x12a>
     56a:	66 0c       	add	r6, r6
     56c:	77 1c       	adc	r7, r7
     56e:	88 1c       	adc	r8, r8
     570:	99 1c       	adc	r9, r9
     572:	56 94       	lsr	r5
     574:	47 94       	ror	r4
     576:	37 94       	ror	r3
     578:	27 94       	ror	r2
     57a:	c3 cf       	rjmp	.-122    	; 0x502 <__mulsf3+0xb0>
     57c:	fa 85       	ldd	r31, Y+10	; 0x0a
     57e:	ea 89       	ldd	r30, Y+18	; 0x12
     580:	2b 89       	ldd	r18, Y+19	; 0x13
     582:	3c 89       	ldd	r19, Y+20	; 0x14
     584:	8b 85       	ldd	r24, Y+11	; 0x0b
     586:	9c 85       	ldd	r25, Y+12	; 0x0c
     588:	28 0f       	add	r18, r24
     58a:	39 1f       	adc	r19, r25
     58c:	2e 5f       	subi	r18, 0xFE	; 254
     58e:	3f 4f       	sbci	r19, 0xFF	; 255
     590:	17 c0       	rjmp	.+46     	; 0x5c0 <__mulsf3+0x16e>
     592:	ca 01       	movw	r24, r20
     594:	81 70       	andi	r24, 0x01	; 1
     596:	90 70       	andi	r25, 0x00	; 0
     598:	89 2b       	or	r24, r25
     59a:	61 f0       	breq	.+24     	; 0x5b4 <__mulsf3+0x162>
     59c:	16 95       	lsr	r17
     59e:	07 95       	ror	r16
     5a0:	f7 94       	ror	r15
     5a2:	e7 94       	ror	r14
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	a0 e0       	ldi	r26, 0x00	; 0
     5aa:	b0 e8       	ldi	r27, 0x80	; 128
     5ac:	e8 2a       	or	r14, r24
     5ae:	f9 2a       	or	r15, r25
     5b0:	0a 2b       	or	r16, r26
     5b2:	1b 2b       	or	r17, r27
     5b4:	76 95       	lsr	r23
     5b6:	67 95       	ror	r22
     5b8:	57 95       	ror	r21
     5ba:	47 95       	ror	r20
     5bc:	2f 5f       	subi	r18, 0xFF	; 255
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	77 fd       	sbrc	r23, 7
     5c2:	e7 cf       	rjmp	.-50     	; 0x592 <__mulsf3+0x140>
     5c4:	0c c0       	rjmp	.+24     	; 0x5de <__mulsf3+0x18c>
     5c6:	44 0f       	add	r20, r20
     5c8:	55 1f       	adc	r21, r21
     5ca:	66 1f       	adc	r22, r22
     5cc:	77 1f       	adc	r23, r23
     5ce:	17 fd       	sbrc	r17, 7
     5d0:	41 60       	ori	r20, 0x01	; 1
     5d2:	ee 0c       	add	r14, r14
     5d4:	ff 1c       	adc	r15, r15
     5d6:	00 1f       	adc	r16, r16
     5d8:	11 1f       	adc	r17, r17
     5da:	21 50       	subi	r18, 0x01	; 1
     5dc:	30 40       	sbci	r19, 0x00	; 0
     5de:	40 30       	cpi	r20, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	59 07       	cpc	r21, r25
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	69 07       	cpc	r22, r25
     5e8:	90 e4       	ldi	r25, 0x40	; 64
     5ea:	79 07       	cpc	r23, r25
     5ec:	60 f3       	brcs	.-40     	; 0x5c6 <__mulsf3+0x174>
     5ee:	2b 8f       	std	Y+27, r18	; 0x1b
     5f0:	3c 8f       	std	Y+28, r19	; 0x1c
     5f2:	db 01       	movw	r26, r22
     5f4:	ca 01       	movw	r24, r20
     5f6:	8f 77       	andi	r24, 0x7F	; 127
     5f8:	90 70       	andi	r25, 0x00	; 0
     5fa:	a0 70       	andi	r26, 0x00	; 0
     5fc:	b0 70       	andi	r27, 0x00	; 0
     5fe:	80 34       	cpi	r24, 0x40	; 64
     600:	91 05       	cpc	r25, r1
     602:	a1 05       	cpc	r26, r1
     604:	b1 05       	cpc	r27, r1
     606:	61 f4       	brne	.+24     	; 0x620 <__mulsf3+0x1ce>
     608:	47 fd       	sbrc	r20, 7
     60a:	0a c0       	rjmp	.+20     	; 0x620 <__mulsf3+0x1ce>
     60c:	e1 14       	cp	r14, r1
     60e:	f1 04       	cpc	r15, r1
     610:	01 05       	cpc	r16, r1
     612:	11 05       	cpc	r17, r1
     614:	29 f0       	breq	.+10     	; 0x620 <__mulsf3+0x1ce>
     616:	40 5c       	subi	r20, 0xC0	; 192
     618:	5f 4f       	sbci	r21, 0xFF	; 255
     61a:	6f 4f       	sbci	r22, 0xFF	; 255
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	40 78       	andi	r20, 0x80	; 128
     620:	1a 8e       	std	Y+26, r1	; 0x1a
     622:	fe 17       	cp	r31, r30
     624:	11 f0       	breq	.+4      	; 0x62a <__mulsf3+0x1d8>
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	8a 8f       	std	Y+26, r24	; 0x1a
     62a:	4d 8f       	std	Y+29, r20	; 0x1d
     62c:	5e 8f       	std	Y+30, r21	; 0x1e
     62e:	6f 8f       	std	Y+31, r22	; 0x1f
     630:	78 a3       	std	Y+32, r23	; 0x20
     632:	83 e0       	ldi	r24, 0x03	; 3
     634:	89 8f       	std	Y+25, r24	; 0x19
     636:	ce 01       	movw	r24, r28
     638:	49 96       	adiw	r24, 0x19	; 25
     63a:	0e 94 a9 05 	call	0xb52	; 0xb52 <__pack_f>
     63e:	a0 96       	adiw	r28, 0x20	; 32
     640:	e2 e1       	ldi	r30, 0x12	; 18
     642:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__epilogue_restores__>

00000646 <__divsf3>:
     646:	a8 e1       	ldi	r26, 0x18	; 24
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	e9 e2       	ldi	r30, 0x29	; 41
     64c:	f3 e0       	ldi	r31, 0x03	; 3
     64e:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__prologue_saves__+0x10>
     652:	69 83       	std	Y+1, r22	; 0x01
     654:	7a 83       	std	Y+2, r23	; 0x02
     656:	8b 83       	std	Y+3, r24	; 0x03
     658:	9c 83       	std	Y+4, r25	; 0x04
     65a:	2d 83       	std	Y+5, r18	; 0x05
     65c:	3e 83       	std	Y+6, r19	; 0x06
     65e:	4f 83       	std	Y+7, r20	; 0x07
     660:	58 87       	std	Y+8, r21	; 0x08
     662:	b9 e0       	ldi	r27, 0x09	; 9
     664:	eb 2e       	mov	r14, r27
     666:	f1 2c       	mov	r15, r1
     668:	ec 0e       	add	r14, r28
     66a:	fd 1e       	adc	r15, r29
     66c:	ce 01       	movw	r24, r28
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	b7 01       	movw	r22, r14
     672:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__unpack_f>
     676:	8e 01       	movw	r16, r28
     678:	0f 5e       	subi	r16, 0xEF	; 239
     67a:	1f 4f       	sbci	r17, 0xFF	; 255
     67c:	ce 01       	movw	r24, r28
     67e:	05 96       	adiw	r24, 0x05	; 5
     680:	b8 01       	movw	r22, r16
     682:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__unpack_f>
     686:	29 85       	ldd	r18, Y+9	; 0x09
     688:	22 30       	cpi	r18, 0x02	; 2
     68a:	08 f4       	brcc	.+2      	; 0x68e <__divsf3+0x48>
     68c:	7e c0       	rjmp	.+252    	; 0x78a <__divsf3+0x144>
     68e:	39 89       	ldd	r19, Y+17	; 0x11
     690:	32 30       	cpi	r19, 0x02	; 2
     692:	10 f4       	brcc	.+4      	; 0x698 <__divsf3+0x52>
     694:	b8 01       	movw	r22, r16
     696:	7c c0       	rjmp	.+248    	; 0x790 <__divsf3+0x14a>
     698:	8a 85       	ldd	r24, Y+10	; 0x0a
     69a:	9a 89       	ldd	r25, Y+18	; 0x12
     69c:	89 27       	eor	r24, r25
     69e:	8a 87       	std	Y+10, r24	; 0x0a
     6a0:	24 30       	cpi	r18, 0x04	; 4
     6a2:	11 f0       	breq	.+4      	; 0x6a8 <__divsf3+0x62>
     6a4:	22 30       	cpi	r18, 0x02	; 2
     6a6:	31 f4       	brne	.+12     	; 0x6b4 <__divsf3+0x6e>
     6a8:	23 17       	cp	r18, r19
     6aa:	09 f0       	breq	.+2      	; 0x6ae <__divsf3+0x68>
     6ac:	6e c0       	rjmp	.+220    	; 0x78a <__divsf3+0x144>
     6ae:	61 e3       	ldi	r22, 0x31	; 49
     6b0:	71 e0       	ldi	r23, 0x01	; 1
     6b2:	6e c0       	rjmp	.+220    	; 0x790 <__divsf3+0x14a>
     6b4:	34 30       	cpi	r19, 0x04	; 4
     6b6:	39 f4       	brne	.+14     	; 0x6c6 <__divsf3+0x80>
     6b8:	1d 86       	std	Y+13, r1	; 0x0d
     6ba:	1e 86       	std	Y+14, r1	; 0x0e
     6bc:	1f 86       	std	Y+15, r1	; 0x0f
     6be:	18 8a       	std	Y+16, r1	; 0x10
     6c0:	1c 86       	std	Y+12, r1	; 0x0c
     6c2:	1b 86       	std	Y+11, r1	; 0x0b
     6c4:	04 c0       	rjmp	.+8      	; 0x6ce <__divsf3+0x88>
     6c6:	32 30       	cpi	r19, 0x02	; 2
     6c8:	21 f4       	brne	.+8      	; 0x6d2 <__divsf3+0x8c>
     6ca:	84 e0       	ldi	r24, 0x04	; 4
     6cc:	89 87       	std	Y+9, r24	; 0x09
     6ce:	b7 01       	movw	r22, r14
     6d0:	5f c0       	rjmp	.+190    	; 0x790 <__divsf3+0x14a>
     6d2:	2b 85       	ldd	r18, Y+11	; 0x0b
     6d4:	3c 85       	ldd	r19, Y+12	; 0x0c
     6d6:	8b 89       	ldd	r24, Y+19	; 0x13
     6d8:	9c 89       	ldd	r25, Y+20	; 0x14
     6da:	28 1b       	sub	r18, r24
     6dc:	39 0b       	sbc	r19, r25
     6de:	3c 87       	std	Y+12, r19	; 0x0c
     6e0:	2b 87       	std	Y+11, r18	; 0x0b
     6e2:	ed 84       	ldd	r14, Y+13	; 0x0d
     6e4:	fe 84       	ldd	r15, Y+14	; 0x0e
     6e6:	0f 85       	ldd	r16, Y+15	; 0x0f
     6e8:	18 89       	ldd	r17, Y+16	; 0x10
     6ea:	ad 88       	ldd	r10, Y+21	; 0x15
     6ec:	be 88       	ldd	r11, Y+22	; 0x16
     6ee:	cf 88       	ldd	r12, Y+23	; 0x17
     6f0:	d8 8c       	ldd	r13, Y+24	; 0x18
     6f2:	ea 14       	cp	r14, r10
     6f4:	fb 04       	cpc	r15, r11
     6f6:	0c 05       	cpc	r16, r12
     6f8:	1d 05       	cpc	r17, r13
     6fa:	40 f4       	brcc	.+16     	; 0x70c <__divsf3+0xc6>
     6fc:	ee 0c       	add	r14, r14
     6fe:	ff 1c       	adc	r15, r15
     700:	00 1f       	adc	r16, r16
     702:	11 1f       	adc	r17, r17
     704:	21 50       	subi	r18, 0x01	; 1
     706:	30 40       	sbci	r19, 0x00	; 0
     708:	3c 87       	std	Y+12, r19	; 0x0c
     70a:	2b 87       	std	Y+11, r18	; 0x0b
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	a0 e0       	ldi	r26, 0x00	; 0
     71a:	b0 e4       	ldi	r27, 0x40	; 64
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	ea 14       	cp	r14, r10
     722:	fb 04       	cpc	r15, r11
     724:	0c 05       	cpc	r16, r12
     726:	1d 05       	cpc	r17, r13
     728:	40 f0       	brcs	.+16     	; 0x73a <__divsf3+0xf4>
     72a:	28 2b       	or	r18, r24
     72c:	39 2b       	or	r19, r25
     72e:	4a 2b       	or	r20, r26
     730:	5b 2b       	or	r21, r27
     732:	ea 18       	sub	r14, r10
     734:	fb 08       	sbc	r15, r11
     736:	0c 09       	sbc	r16, r12
     738:	1d 09       	sbc	r17, r13
     73a:	b6 95       	lsr	r27
     73c:	a7 95       	ror	r26
     73e:	97 95       	ror	r25
     740:	87 95       	ror	r24
     742:	ee 0c       	add	r14, r14
     744:	ff 1c       	adc	r15, r15
     746:	00 1f       	adc	r16, r16
     748:	11 1f       	adc	r17, r17
     74a:	6f 5f       	subi	r22, 0xFF	; 255
     74c:	7f 4f       	sbci	r23, 0xFF	; 255
     74e:	6f 31       	cpi	r22, 0x1F	; 31
     750:	71 05       	cpc	r23, r1
     752:	31 f7       	brne	.-52     	; 0x720 <__divsf3+0xda>
     754:	da 01       	movw	r26, r20
     756:	c9 01       	movw	r24, r18
     758:	8f 77       	andi	r24, 0x7F	; 127
     75a:	90 70       	andi	r25, 0x00	; 0
     75c:	a0 70       	andi	r26, 0x00	; 0
     75e:	b0 70       	andi	r27, 0x00	; 0
     760:	80 34       	cpi	r24, 0x40	; 64
     762:	91 05       	cpc	r25, r1
     764:	a1 05       	cpc	r26, r1
     766:	b1 05       	cpc	r27, r1
     768:	61 f4       	brne	.+24     	; 0x782 <__divsf3+0x13c>
     76a:	27 fd       	sbrc	r18, 7
     76c:	0a c0       	rjmp	.+20     	; 0x782 <__divsf3+0x13c>
     76e:	e1 14       	cp	r14, r1
     770:	f1 04       	cpc	r15, r1
     772:	01 05       	cpc	r16, r1
     774:	11 05       	cpc	r17, r1
     776:	29 f0       	breq	.+10     	; 0x782 <__divsf3+0x13c>
     778:	20 5c       	subi	r18, 0xC0	; 192
     77a:	3f 4f       	sbci	r19, 0xFF	; 255
     77c:	4f 4f       	sbci	r20, 0xFF	; 255
     77e:	5f 4f       	sbci	r21, 0xFF	; 255
     780:	20 78       	andi	r18, 0x80	; 128
     782:	2d 87       	std	Y+13, r18	; 0x0d
     784:	3e 87       	std	Y+14, r19	; 0x0e
     786:	4f 87       	std	Y+15, r20	; 0x0f
     788:	58 8b       	std	Y+16, r21	; 0x10
     78a:	be 01       	movw	r22, r28
     78c:	67 5f       	subi	r22, 0xF7	; 247
     78e:	7f 4f       	sbci	r23, 0xFF	; 255
     790:	cb 01       	movw	r24, r22
     792:	0e 94 a9 05 	call	0xb52	; 0xb52 <__pack_f>
     796:	68 96       	adiw	r28, 0x18	; 24
     798:	ea e0       	ldi	r30, 0x0A	; 10
     79a:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__epilogue_restores__+0x10>

0000079e <__gesf2>:
     79e:	a8 e1       	ldi	r26, 0x18	; 24
     7a0:	b0 e0       	ldi	r27, 0x00	; 0
     7a2:	e5 ed       	ldi	r30, 0xD5	; 213
     7a4:	f3 e0       	ldi	r31, 0x03	; 3
     7a6:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__prologue_saves__+0x18>
     7aa:	69 83       	std	Y+1, r22	; 0x01
     7ac:	7a 83       	std	Y+2, r23	; 0x02
     7ae:	8b 83       	std	Y+3, r24	; 0x03
     7b0:	9c 83       	std	Y+4, r25	; 0x04
     7b2:	2d 83       	std	Y+5, r18	; 0x05
     7b4:	3e 83       	std	Y+6, r19	; 0x06
     7b6:	4f 83       	std	Y+7, r20	; 0x07
     7b8:	58 87       	std	Y+8, r21	; 0x08
     7ba:	89 e0       	ldi	r24, 0x09	; 9
     7bc:	e8 2e       	mov	r14, r24
     7be:	f1 2c       	mov	r15, r1
     7c0:	ec 0e       	add	r14, r28
     7c2:	fd 1e       	adc	r15, r29
     7c4:	ce 01       	movw	r24, r28
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	b7 01       	movw	r22, r14
     7ca:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__unpack_f>
     7ce:	8e 01       	movw	r16, r28
     7d0:	0f 5e       	subi	r16, 0xEF	; 239
     7d2:	1f 4f       	sbci	r17, 0xFF	; 255
     7d4:	ce 01       	movw	r24, r28
     7d6:	05 96       	adiw	r24, 0x05	; 5
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__unpack_f>
     7de:	89 85       	ldd	r24, Y+9	; 0x09
     7e0:	82 30       	cpi	r24, 0x02	; 2
     7e2:	40 f0       	brcs	.+16     	; 0x7f4 <__gesf2+0x56>
     7e4:	89 89       	ldd	r24, Y+17	; 0x11
     7e6:	82 30       	cpi	r24, 0x02	; 2
     7e8:	28 f0       	brcs	.+10     	; 0x7f4 <__gesf2+0x56>
     7ea:	c7 01       	movw	r24, r14
     7ec:	b8 01       	movw	r22, r16
     7ee:	0e 94 f6 06 	call	0xdec	; 0xdec <__fpcmp_parts_f>
     7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <__gesf2+0x58>
     7f4:	8f ef       	ldi	r24, 0xFF	; 255
     7f6:	68 96       	adiw	r28, 0x18	; 24
     7f8:	e6 e0       	ldi	r30, 0x06	; 6
     7fa:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__epilogue_restores__+0x18>

000007fe <__ltsf2>:
     7fe:	a8 e1       	ldi	r26, 0x18	; 24
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__prologue_saves__+0x18>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	2d 83       	std	Y+5, r18	; 0x05
     814:	3e 83       	std	Y+6, r19	; 0x06
     816:	4f 83       	std	Y+7, r20	; 0x07
     818:	58 87       	std	Y+8, r21	; 0x08
     81a:	89 e0       	ldi	r24, 0x09	; 9
     81c:	e8 2e       	mov	r14, r24
     81e:	f1 2c       	mov	r15, r1
     820:	ec 0e       	add	r14, r28
     822:	fd 1e       	adc	r15, r29
     824:	ce 01       	movw	r24, r28
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	b7 01       	movw	r22, r14
     82a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__unpack_f>
     82e:	8e 01       	movw	r16, r28
     830:	0f 5e       	subi	r16, 0xEF	; 239
     832:	1f 4f       	sbci	r17, 0xFF	; 255
     834:	ce 01       	movw	r24, r28
     836:	05 96       	adiw	r24, 0x05	; 5
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__unpack_f>
     83e:	89 85       	ldd	r24, Y+9	; 0x09
     840:	82 30       	cpi	r24, 0x02	; 2
     842:	40 f0       	brcs	.+16     	; 0x854 <__ltsf2+0x56>
     844:	89 89       	ldd	r24, Y+17	; 0x11
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	28 f0       	brcs	.+10     	; 0x854 <__ltsf2+0x56>
     84a:	c7 01       	movw	r24, r14
     84c:	b8 01       	movw	r22, r16
     84e:	0e 94 f6 06 	call	0xdec	; 0xdec <__fpcmp_parts_f>
     852:	01 c0       	rjmp	.+2      	; 0x856 <__ltsf2+0x58>
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	68 96       	adiw	r28, 0x18	; 24
     858:	e6 e0       	ldi	r30, 0x06	; 6
     85a:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__epilogue_restores__+0x18>

0000085e <__floatsisf>:
     85e:	a8 e0       	ldi	r26, 0x08	; 8
     860:	b0 e0       	ldi	r27, 0x00	; 0
     862:	e5 e3       	ldi	r30, 0x35	; 53
     864:	f4 e0       	ldi	r31, 0x04	; 4
     866:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__prologue_saves__+0x12>
     86a:	9b 01       	movw	r18, r22
     86c:	ac 01       	movw	r20, r24
     86e:	83 e0       	ldi	r24, 0x03	; 3
     870:	89 83       	std	Y+1, r24	; 0x01
     872:	da 01       	movw	r26, r20
     874:	c9 01       	movw	r24, r18
     876:	88 27       	eor	r24, r24
     878:	b7 fd       	sbrc	r27, 7
     87a:	83 95       	inc	r24
     87c:	99 27       	eor	r25, r25
     87e:	aa 27       	eor	r26, r26
     880:	bb 27       	eor	r27, r27
     882:	b8 2e       	mov	r11, r24
     884:	21 15       	cp	r18, r1
     886:	31 05       	cpc	r19, r1
     888:	41 05       	cpc	r20, r1
     88a:	51 05       	cpc	r21, r1
     88c:	19 f4       	brne	.+6      	; 0x894 <__floatsisf+0x36>
     88e:	82 e0       	ldi	r24, 0x02	; 2
     890:	89 83       	std	Y+1, r24	; 0x01
     892:	3a c0       	rjmp	.+116    	; 0x908 <__stack+0x9>
     894:	88 23       	and	r24, r24
     896:	a9 f0       	breq	.+42     	; 0x8c2 <__floatsisf+0x64>
     898:	20 30       	cpi	r18, 0x00	; 0
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	38 07       	cpc	r19, r24
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	48 07       	cpc	r20, r24
     8a2:	80 e8       	ldi	r24, 0x80	; 128
     8a4:	58 07       	cpc	r21, r24
     8a6:	29 f4       	brne	.+10     	; 0x8b2 <__floatsisf+0x54>
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	9f ec       	ldi	r25, 0xCF	; 207
     8b0:	30 c0       	rjmp	.+96     	; 0x912 <__stack+0x13>
     8b2:	ee 24       	eor	r14, r14
     8b4:	ff 24       	eor	r15, r15
     8b6:	87 01       	movw	r16, r14
     8b8:	e2 1a       	sub	r14, r18
     8ba:	f3 0a       	sbc	r15, r19
     8bc:	04 0b       	sbc	r16, r20
     8be:	15 0b       	sbc	r17, r21
     8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <__floatsisf+0x68>
     8c2:	79 01       	movw	r14, r18
     8c4:	8a 01       	movw	r16, r20
     8c6:	8e e1       	ldi	r24, 0x1E	; 30
     8c8:	c8 2e       	mov	r12, r24
     8ca:	d1 2c       	mov	r13, r1
     8cc:	dc 82       	std	Y+4, r13	; 0x04
     8ce:	cb 82       	std	Y+3, r12	; 0x03
     8d0:	ed 82       	std	Y+5, r14	; 0x05
     8d2:	fe 82       	std	Y+6, r15	; 0x06
     8d4:	0f 83       	std	Y+7, r16	; 0x07
     8d6:	18 87       	std	Y+8, r17	; 0x08
     8d8:	c8 01       	movw	r24, r16
     8da:	b7 01       	movw	r22, r14
     8dc:	0e 94 5a 05 	call	0xab4	; 0xab4 <__clzsi2>
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	18 16       	cp	r1, r24
     8e4:	19 06       	cpc	r1, r25
     8e6:	84 f4       	brge	.+32     	; 0x908 <__stack+0x9>
     8e8:	08 2e       	mov	r0, r24
     8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <__floatsisf+0x96>
     8ec:	ee 0c       	add	r14, r14
     8ee:	ff 1c       	adc	r15, r15
     8f0:	00 1f       	adc	r16, r16
     8f2:	11 1f       	adc	r17, r17
     8f4:	0a 94       	dec	r0
     8f6:	d2 f7       	brpl	.-12     	; 0x8ec <__floatsisf+0x8e>
     8f8:	ed 82       	std	Y+5, r14	; 0x05
     8fa:	fe 82       	std	Y+6, r15	; 0x06
     8fc:	0f 83       	std	Y+7, r16	; 0x07
     8fe:	18 87       	std	Y+8, r17	; 0x08
     900:	c8 1a       	sub	r12, r24
     902:	d9 0a       	sbc	r13, r25
     904:	dc 82       	std	Y+4, r13	; 0x04
     906:	cb 82       	std	Y+3, r12	; 0x03
     908:	ba 82       	std	Y+2, r11	; 0x02
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	0e 94 a9 05 	call	0xb52	; 0xb52 <__pack_f>
     912:	28 96       	adiw	r28, 0x08	; 8
     914:	e9 e0       	ldi	r30, 0x09	; 9
     916:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__epilogue_restores__+0x12>

0000091a <__fixsfsi>:
     91a:	ac e0       	ldi	r26, 0x0C	; 12
     91c:	b0 e0       	ldi	r27, 0x00	; 0
     91e:	e3 e9       	ldi	r30, 0x93	; 147
     920:	f4 e0       	ldi	r31, 0x04	; 4
     922:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__prologue_saves__+0x20>
     926:	69 83       	std	Y+1, r22	; 0x01
     928:	7a 83       	std	Y+2, r23	; 0x02
     92a:	8b 83       	std	Y+3, r24	; 0x03
     92c:	9c 83       	std	Y+4, r25	; 0x04
     92e:	ce 01       	movw	r24, r28
     930:	01 96       	adiw	r24, 0x01	; 1
     932:	be 01       	movw	r22, r28
     934:	6b 5f       	subi	r22, 0xFB	; 251
     936:	7f 4f       	sbci	r23, 0xFF	; 255
     938:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__unpack_f>
     93c:	8d 81       	ldd	r24, Y+5	; 0x05
     93e:	82 30       	cpi	r24, 0x02	; 2
     940:	61 f1       	breq	.+88     	; 0x99a <__fixsfsi+0x80>
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	50 f1       	brcs	.+84     	; 0x99a <__fixsfsi+0x80>
     946:	84 30       	cpi	r24, 0x04	; 4
     948:	21 f4       	brne	.+8      	; 0x952 <__fixsfsi+0x38>
     94a:	8e 81       	ldd	r24, Y+6	; 0x06
     94c:	88 23       	and	r24, r24
     94e:	51 f1       	breq	.+84     	; 0x9a4 <__fixsfsi+0x8a>
     950:	2e c0       	rjmp	.+92     	; 0x9ae <__fixsfsi+0x94>
     952:	2f 81       	ldd	r18, Y+7	; 0x07
     954:	38 85       	ldd	r19, Y+8	; 0x08
     956:	37 fd       	sbrc	r19, 7
     958:	20 c0       	rjmp	.+64     	; 0x99a <__fixsfsi+0x80>
     95a:	6e 81       	ldd	r22, Y+6	; 0x06
     95c:	2f 31       	cpi	r18, 0x1F	; 31
     95e:	31 05       	cpc	r19, r1
     960:	1c f0       	brlt	.+6      	; 0x968 <__fixsfsi+0x4e>
     962:	66 23       	and	r22, r22
     964:	f9 f0       	breq	.+62     	; 0x9a4 <__fixsfsi+0x8a>
     966:	23 c0       	rjmp	.+70     	; 0x9ae <__fixsfsi+0x94>
     968:	8e e1       	ldi	r24, 0x1E	; 30
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	82 1b       	sub	r24, r18
     96e:	93 0b       	sbc	r25, r19
     970:	29 85       	ldd	r18, Y+9	; 0x09
     972:	3a 85       	ldd	r19, Y+10	; 0x0a
     974:	4b 85       	ldd	r20, Y+11	; 0x0b
     976:	5c 85       	ldd	r21, Y+12	; 0x0c
     978:	04 c0       	rjmp	.+8      	; 0x982 <__fixsfsi+0x68>
     97a:	56 95       	lsr	r21
     97c:	47 95       	ror	r20
     97e:	37 95       	ror	r19
     980:	27 95       	ror	r18
     982:	8a 95       	dec	r24
     984:	d2 f7       	brpl	.-12     	; 0x97a <__fixsfsi+0x60>
     986:	66 23       	and	r22, r22
     988:	b1 f0       	breq	.+44     	; 0x9b6 <__fixsfsi+0x9c>
     98a:	50 95       	com	r21
     98c:	40 95       	com	r20
     98e:	30 95       	com	r19
     990:	21 95       	neg	r18
     992:	3f 4f       	sbci	r19, 0xFF	; 255
     994:	4f 4f       	sbci	r20, 0xFF	; 255
     996:	5f 4f       	sbci	r21, 0xFF	; 255
     998:	0e c0       	rjmp	.+28     	; 0x9b6 <__fixsfsi+0x9c>
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	50 e0       	ldi	r21, 0x00	; 0
     9a2:	09 c0       	rjmp	.+18     	; 0x9b6 <__fixsfsi+0x9c>
     9a4:	2f ef       	ldi	r18, 0xFF	; 255
     9a6:	3f ef       	ldi	r19, 0xFF	; 255
     9a8:	4f ef       	ldi	r20, 0xFF	; 255
     9aa:	5f e7       	ldi	r21, 0x7F	; 127
     9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <__fixsfsi+0x9c>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e8       	ldi	r21, 0x80	; 128
     9b6:	b9 01       	movw	r22, r18
     9b8:	ca 01       	movw	r24, r20
     9ba:	2c 96       	adiw	r28, 0x0c	; 12
     9bc:	e2 e0       	ldi	r30, 0x02	; 2
     9be:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__epilogue_restores__+0x20>

000009c2 <__floatunsisf>:
     9c2:	a8 e0       	ldi	r26, 0x08	; 8
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e7 ee       	ldi	r30, 0xE7	; 231
     9c8:	f4 e0       	ldi	r31, 0x04	; 4
     9ca:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__prologue_saves__+0x10>
     9ce:	7b 01       	movw	r14, r22
     9d0:	8c 01       	movw	r16, r24
     9d2:	61 15       	cp	r22, r1
     9d4:	71 05       	cpc	r23, r1
     9d6:	81 05       	cpc	r24, r1
     9d8:	91 05       	cpc	r25, r1
     9da:	19 f4       	brne	.+6      	; 0x9e2 <__floatunsisf+0x20>
     9dc:	82 e0       	ldi	r24, 0x02	; 2
     9de:	89 83       	std	Y+1, r24	; 0x01
     9e0:	60 c0       	rjmp	.+192    	; 0xaa2 <__floatunsisf+0xe0>
     9e2:	83 e0       	ldi	r24, 0x03	; 3
     9e4:	89 83       	std	Y+1, r24	; 0x01
     9e6:	8e e1       	ldi	r24, 0x1E	; 30
     9e8:	c8 2e       	mov	r12, r24
     9ea:	d1 2c       	mov	r13, r1
     9ec:	dc 82       	std	Y+4, r13	; 0x04
     9ee:	cb 82       	std	Y+3, r12	; 0x03
     9f0:	ed 82       	std	Y+5, r14	; 0x05
     9f2:	fe 82       	std	Y+6, r15	; 0x06
     9f4:	0f 83       	std	Y+7, r16	; 0x07
     9f6:	18 87       	std	Y+8, r17	; 0x08
     9f8:	c8 01       	movw	r24, r16
     9fa:	b7 01       	movw	r22, r14
     9fc:	0e 94 5a 05 	call	0xab4	; 0xab4 <__clzsi2>
     a00:	fc 01       	movw	r30, r24
     a02:	31 97       	sbiw	r30, 0x01	; 1
     a04:	f7 ff       	sbrs	r31, 7
     a06:	3b c0       	rjmp	.+118    	; 0xa7e <__floatunsisf+0xbc>
     a08:	22 27       	eor	r18, r18
     a0a:	33 27       	eor	r19, r19
     a0c:	2e 1b       	sub	r18, r30
     a0e:	3f 0b       	sbc	r19, r31
     a10:	57 01       	movw	r10, r14
     a12:	68 01       	movw	r12, r16
     a14:	02 2e       	mov	r0, r18
     a16:	04 c0       	rjmp	.+8      	; 0xa20 <__floatunsisf+0x5e>
     a18:	d6 94       	lsr	r13
     a1a:	c7 94       	ror	r12
     a1c:	b7 94       	ror	r11
     a1e:	a7 94       	ror	r10
     a20:	0a 94       	dec	r0
     a22:	d2 f7       	brpl	.-12     	; 0xa18 <__floatunsisf+0x56>
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	a0 e0       	ldi	r26, 0x00	; 0
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	04 c0       	rjmp	.+8      	; 0xa3e <__floatunsisf+0x7c>
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	aa 1f       	adc	r26, r26
     a3c:	bb 1f       	adc	r27, r27
     a3e:	2a 95       	dec	r18
     a40:	d2 f7       	brpl	.-12     	; 0xa36 <__floatunsisf+0x74>
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	a1 09       	sbc	r26, r1
     a46:	b1 09       	sbc	r27, r1
     a48:	8e 21       	and	r24, r14
     a4a:	9f 21       	and	r25, r15
     a4c:	a0 23       	and	r26, r16
     a4e:	b1 23       	and	r27, r17
     a50:	00 97       	sbiw	r24, 0x00	; 0
     a52:	a1 05       	cpc	r26, r1
     a54:	b1 05       	cpc	r27, r1
     a56:	21 f0       	breq	.+8      	; 0xa60 <__floatunsisf+0x9e>
     a58:	41 e0       	ldi	r20, 0x01	; 1
     a5a:	50 e0       	ldi	r21, 0x00	; 0
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	4a 29       	or	r20, r10
     a62:	5b 29       	or	r21, r11
     a64:	6c 29       	or	r22, r12
     a66:	7d 29       	or	r23, r13
     a68:	4d 83       	std	Y+5, r20	; 0x05
     a6a:	5e 83       	std	Y+6, r21	; 0x06
     a6c:	6f 83       	std	Y+7, r22	; 0x07
     a6e:	78 87       	std	Y+8, r23	; 0x08
     a70:	8e e1       	ldi	r24, 0x1E	; 30
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	8e 1b       	sub	r24, r30
     a76:	9f 0b       	sbc	r25, r31
     a78:	9c 83       	std	Y+4, r25	; 0x04
     a7a:	8b 83       	std	Y+3, r24	; 0x03
     a7c:	12 c0       	rjmp	.+36     	; 0xaa2 <__floatunsisf+0xe0>
     a7e:	30 97       	sbiw	r30, 0x00	; 0
     a80:	81 f0       	breq	.+32     	; 0xaa2 <__floatunsisf+0xe0>
     a82:	0e 2e       	mov	r0, r30
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__floatunsisf+0xcc>
     a86:	ee 0c       	add	r14, r14
     a88:	ff 1c       	adc	r15, r15
     a8a:	00 1f       	adc	r16, r16
     a8c:	11 1f       	adc	r17, r17
     a8e:	0a 94       	dec	r0
     a90:	d2 f7       	brpl	.-12     	; 0xa86 <__floatunsisf+0xc4>
     a92:	ed 82       	std	Y+5, r14	; 0x05
     a94:	fe 82       	std	Y+6, r15	; 0x06
     a96:	0f 83       	std	Y+7, r16	; 0x07
     a98:	18 87       	std	Y+8, r17	; 0x08
     a9a:	ce 1a       	sub	r12, r30
     a9c:	df 0a       	sbc	r13, r31
     a9e:	dc 82       	std	Y+4, r13	; 0x04
     aa0:	cb 82       	std	Y+3, r12	; 0x03
     aa2:	1a 82       	std	Y+2, r1	; 0x02
     aa4:	ce 01       	movw	r24, r28
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	0e 94 a9 05 	call	0xb52	; 0xb52 <__pack_f>
     aac:	28 96       	adiw	r28, 0x08	; 8
     aae:	ea e0       	ldi	r30, 0x0A	; 10
     ab0:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__epilogue_restores__+0x10>

00000ab4 <__clzsi2>:
     ab4:	ef 92       	push	r14
     ab6:	ff 92       	push	r15
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
     abc:	7b 01       	movw	r14, r22
     abe:	8c 01       	movw	r16, r24
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	e8 16       	cp	r14, r24
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	f8 06       	cpc	r15, r24
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	08 07       	cpc	r16, r24
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	18 07       	cpc	r17, r24
     ad0:	88 f4       	brcc	.+34     	; 0xaf4 <__clzsi2+0x40>
     ad2:	8f ef       	ldi	r24, 0xFF	; 255
     ad4:	e8 16       	cp	r14, r24
     ad6:	f1 04       	cpc	r15, r1
     ad8:	01 05       	cpc	r16, r1
     ada:	11 05       	cpc	r17, r1
     adc:	31 f0       	breq	.+12     	; 0xaea <__clzsi2+0x36>
     ade:	28 f0       	brcs	.+10     	; 0xaea <__clzsi2+0x36>
     ae0:	88 e0       	ldi	r24, 0x08	; 8
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	a0 e0       	ldi	r26, 0x00	; 0
     ae6:	b0 e0       	ldi	r27, 0x00	; 0
     ae8:	17 c0       	rjmp	.+46     	; 0xb18 <__clzsi2+0x64>
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	a0 e0       	ldi	r26, 0x00	; 0
     af0:	b0 e0       	ldi	r27, 0x00	; 0
     af2:	12 c0       	rjmp	.+36     	; 0xb18 <__clzsi2+0x64>
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	e8 16       	cp	r14, r24
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	f8 06       	cpc	r15, r24
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	08 07       	cpc	r16, r24
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	18 07       	cpc	r17, r24
     b04:	28 f0       	brcs	.+10     	; 0xb10 <__clzsi2+0x5c>
     b06:	88 e1       	ldi	r24, 0x18	; 24
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	a0 e0       	ldi	r26, 0x00	; 0
     b0c:	b0 e0       	ldi	r27, 0x00	; 0
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__clzsi2+0x64>
     b10:	80 e1       	ldi	r24, 0x10	; 16
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	a0 e0       	ldi	r26, 0x00	; 0
     b16:	b0 e0       	ldi	r27, 0x00	; 0
     b18:	20 e2       	ldi	r18, 0x20	; 32
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	28 1b       	sub	r18, r24
     b22:	39 0b       	sbc	r19, r25
     b24:	4a 0b       	sbc	r20, r26
     b26:	5b 0b       	sbc	r21, r27
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__clzsi2+0x7e>
     b2a:	16 95       	lsr	r17
     b2c:	07 95       	ror	r16
     b2e:	f7 94       	ror	r15
     b30:	e7 94       	ror	r14
     b32:	8a 95       	dec	r24
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__clzsi2+0x76>
     b36:	f7 01       	movw	r30, r14
     b38:	e7 5c       	subi	r30, 0xC7	; 199
     b3a:	fe 4f       	sbci	r31, 0xFE	; 254
     b3c:	80 81       	ld	r24, Z
     b3e:	28 1b       	sub	r18, r24
     b40:	31 09       	sbc	r19, r1
     b42:	41 09       	sbc	r20, r1
     b44:	51 09       	sbc	r21, r1
     b46:	c9 01       	movw	r24, r18
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	08 95       	ret

00000b52 <__pack_f>:
     b52:	df 92       	push	r13
     b54:	ef 92       	push	r14
     b56:	ff 92       	push	r15
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	fc 01       	movw	r30, r24
     b5e:	e4 80       	ldd	r14, Z+4	; 0x04
     b60:	f5 80       	ldd	r15, Z+5	; 0x05
     b62:	06 81       	ldd	r16, Z+6	; 0x06
     b64:	17 81       	ldd	r17, Z+7	; 0x07
     b66:	d1 80       	ldd	r13, Z+1	; 0x01
     b68:	80 81       	ld	r24, Z
     b6a:	82 30       	cpi	r24, 0x02	; 2
     b6c:	48 f4       	brcc	.+18     	; 0xb80 <__pack_f+0x2e>
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	a0 e1       	ldi	r26, 0x10	; 16
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e8 2a       	or	r14, r24
     b78:	f9 2a       	or	r15, r25
     b7a:	0a 2b       	or	r16, r26
     b7c:	1b 2b       	or	r17, r27
     b7e:	a5 c0       	rjmp	.+330    	; 0xcca <__pack_f+0x178>
     b80:	84 30       	cpi	r24, 0x04	; 4
     b82:	09 f4       	brne	.+2      	; 0xb86 <__pack_f+0x34>
     b84:	9f c0       	rjmp	.+318    	; 0xcc4 <__pack_f+0x172>
     b86:	82 30       	cpi	r24, 0x02	; 2
     b88:	21 f4       	brne	.+8      	; 0xb92 <__pack_f+0x40>
     b8a:	ee 24       	eor	r14, r14
     b8c:	ff 24       	eor	r15, r15
     b8e:	87 01       	movw	r16, r14
     b90:	05 c0       	rjmp	.+10     	; 0xb9c <__pack_f+0x4a>
     b92:	e1 14       	cp	r14, r1
     b94:	f1 04       	cpc	r15, r1
     b96:	01 05       	cpc	r16, r1
     b98:	11 05       	cpc	r17, r1
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__pack_f+0x50>
     b9c:	e0 e0       	ldi	r30, 0x00	; 0
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	96 c0       	rjmp	.+300    	; 0xcce <__pack_f+0x17c>
     ba2:	62 81       	ldd	r22, Z+2	; 0x02
     ba4:	73 81       	ldd	r23, Z+3	; 0x03
     ba6:	9f ef       	ldi	r25, 0xFF	; 255
     ba8:	62 38       	cpi	r22, 0x82	; 130
     baa:	79 07       	cpc	r23, r25
     bac:	0c f0       	brlt	.+2      	; 0xbb0 <__pack_f+0x5e>
     bae:	5b c0       	rjmp	.+182    	; 0xc66 <__pack_f+0x114>
     bb0:	22 e8       	ldi	r18, 0x82	; 130
     bb2:	3f ef       	ldi	r19, 0xFF	; 255
     bb4:	26 1b       	sub	r18, r22
     bb6:	37 0b       	sbc	r19, r23
     bb8:	2a 31       	cpi	r18, 0x1A	; 26
     bba:	31 05       	cpc	r19, r1
     bbc:	2c f0       	brlt	.+10     	; 0xbc8 <__pack_f+0x76>
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	50 e0       	ldi	r21, 0x00	; 0
     bc6:	2a c0       	rjmp	.+84     	; 0xc1c <__pack_f+0xca>
     bc8:	b8 01       	movw	r22, r16
     bca:	a7 01       	movw	r20, r14
     bcc:	02 2e       	mov	r0, r18
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0x86>
     bd0:	76 95       	lsr	r23
     bd2:	67 95       	ror	r22
     bd4:	57 95       	ror	r21
     bd6:	47 95       	ror	r20
     bd8:	0a 94       	dec	r0
     bda:	d2 f7       	brpl	.-12     	; 0xbd0 <__pack_f+0x7e>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	a0 e0       	ldi	r26, 0x00	; 0
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	04 c0       	rjmp	.+8      	; 0xbee <__pack_f+0x9c>
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	aa 1f       	adc	r26, r26
     bec:	bb 1f       	adc	r27, r27
     bee:	2a 95       	dec	r18
     bf0:	d2 f7       	brpl	.-12     	; 0xbe6 <__pack_f+0x94>
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	a1 09       	sbc	r26, r1
     bf6:	b1 09       	sbc	r27, r1
     bf8:	8e 21       	and	r24, r14
     bfa:	9f 21       	and	r25, r15
     bfc:	a0 23       	and	r26, r16
     bfe:	b1 23       	and	r27, r17
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	21 f0       	breq	.+8      	; 0xc10 <__pack_f+0xbe>
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	a0 e0       	ldi	r26, 0x00	; 0
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	9a 01       	movw	r18, r20
     c12:	ab 01       	movw	r20, r22
     c14:	28 2b       	or	r18, r24
     c16:	39 2b       	or	r19, r25
     c18:	4a 2b       	or	r20, r26
     c1a:	5b 2b       	or	r21, r27
     c1c:	da 01       	movw	r26, r20
     c1e:	c9 01       	movw	r24, r18
     c20:	8f 77       	andi	r24, 0x7F	; 127
     c22:	90 70       	andi	r25, 0x00	; 0
     c24:	a0 70       	andi	r26, 0x00	; 0
     c26:	b0 70       	andi	r27, 0x00	; 0
     c28:	80 34       	cpi	r24, 0x40	; 64
     c2a:	91 05       	cpc	r25, r1
     c2c:	a1 05       	cpc	r26, r1
     c2e:	b1 05       	cpc	r27, r1
     c30:	39 f4       	brne	.+14     	; 0xc40 <__pack_f+0xee>
     c32:	27 ff       	sbrs	r18, 7
     c34:	09 c0       	rjmp	.+18     	; 0xc48 <__pack_f+0xf6>
     c36:	20 5c       	subi	r18, 0xC0	; 192
     c38:	3f 4f       	sbci	r19, 0xFF	; 255
     c3a:	4f 4f       	sbci	r20, 0xFF	; 255
     c3c:	5f 4f       	sbci	r21, 0xFF	; 255
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <__pack_f+0xf6>
     c40:	21 5c       	subi	r18, 0xC1	; 193
     c42:	3f 4f       	sbci	r19, 0xFF	; 255
     c44:	4f 4f       	sbci	r20, 0xFF	; 255
     c46:	5f 4f       	sbci	r21, 0xFF	; 255
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	a0 e0       	ldi	r26, 0x00	; 0
     c50:	3a 07       	cpc	r19, r26
     c52:	a0 e0       	ldi	r26, 0x00	; 0
     c54:	4a 07       	cpc	r20, r26
     c56:	a0 e4       	ldi	r26, 0x40	; 64
     c58:	5a 07       	cpc	r21, r26
     c5a:	10 f0       	brcs	.+4      	; 0xc60 <__pack_f+0x10e>
     c5c:	e1 e0       	ldi	r30, 0x01	; 1
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	79 01       	movw	r14, r18
     c62:	8a 01       	movw	r16, r20
     c64:	27 c0       	rjmp	.+78     	; 0xcb4 <__pack_f+0x162>
     c66:	60 38       	cpi	r22, 0x80	; 128
     c68:	71 05       	cpc	r23, r1
     c6a:	64 f5       	brge	.+88     	; 0xcc4 <__pack_f+0x172>
     c6c:	fb 01       	movw	r30, r22
     c6e:	e1 58       	subi	r30, 0x81	; 129
     c70:	ff 4f       	sbci	r31, 0xFF	; 255
     c72:	d8 01       	movw	r26, r16
     c74:	c7 01       	movw	r24, r14
     c76:	8f 77       	andi	r24, 0x7F	; 127
     c78:	90 70       	andi	r25, 0x00	; 0
     c7a:	a0 70       	andi	r26, 0x00	; 0
     c7c:	b0 70       	andi	r27, 0x00	; 0
     c7e:	80 34       	cpi	r24, 0x40	; 64
     c80:	91 05       	cpc	r25, r1
     c82:	a1 05       	cpc	r26, r1
     c84:	b1 05       	cpc	r27, r1
     c86:	39 f4       	brne	.+14     	; 0xc96 <__pack_f+0x144>
     c88:	e7 fe       	sbrs	r14, 7
     c8a:	0d c0       	rjmp	.+26     	; 0xca6 <__pack_f+0x154>
     c8c:	80 e4       	ldi	r24, 0x40	; 64
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	a0 e0       	ldi	r26, 0x00	; 0
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <__pack_f+0x14c>
     c96:	8f e3       	ldi	r24, 0x3F	; 63
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e8 0e       	add	r14, r24
     ca0:	f9 1e       	adc	r15, r25
     ca2:	0a 1f       	adc	r16, r26
     ca4:	1b 1f       	adc	r17, r27
     ca6:	17 ff       	sbrs	r17, 7
     ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <__pack_f+0x162>
     caa:	16 95       	lsr	r17
     cac:	07 95       	ror	r16
     cae:	f7 94       	ror	r15
     cb0:	e7 94       	ror	r14
     cb2:	31 96       	adiw	r30, 0x01	; 1
     cb4:	87 e0       	ldi	r24, 0x07	; 7
     cb6:	16 95       	lsr	r17
     cb8:	07 95       	ror	r16
     cba:	f7 94       	ror	r15
     cbc:	e7 94       	ror	r14
     cbe:	8a 95       	dec	r24
     cc0:	d1 f7       	brne	.-12     	; 0xcb6 <__pack_f+0x164>
     cc2:	05 c0       	rjmp	.+10     	; 0xcce <__pack_f+0x17c>
     cc4:	ee 24       	eor	r14, r14
     cc6:	ff 24       	eor	r15, r15
     cc8:	87 01       	movw	r16, r14
     cca:	ef ef       	ldi	r30, 0xFF	; 255
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	6e 2f       	mov	r22, r30
     cd0:	67 95       	ror	r22
     cd2:	66 27       	eor	r22, r22
     cd4:	67 95       	ror	r22
     cd6:	90 2f       	mov	r25, r16
     cd8:	9f 77       	andi	r25, 0x7F	; 127
     cda:	d7 94       	ror	r13
     cdc:	dd 24       	eor	r13, r13
     cde:	d7 94       	ror	r13
     ce0:	8e 2f       	mov	r24, r30
     ce2:	86 95       	lsr	r24
     ce4:	49 2f       	mov	r20, r25
     ce6:	46 2b       	or	r20, r22
     ce8:	58 2f       	mov	r21, r24
     cea:	5d 29       	or	r21, r13
     cec:	b7 01       	movw	r22, r14
     cee:	ca 01       	movw	r24, r20
     cf0:	1f 91       	pop	r17
     cf2:	0f 91       	pop	r16
     cf4:	ff 90       	pop	r15
     cf6:	ef 90       	pop	r14
     cf8:	df 90       	pop	r13
     cfa:	08 95       	ret

00000cfc <__unpack_f>:
     cfc:	fc 01       	movw	r30, r24
     cfe:	db 01       	movw	r26, r22
     d00:	40 81       	ld	r20, Z
     d02:	51 81       	ldd	r21, Z+1	; 0x01
     d04:	22 81       	ldd	r18, Z+2	; 0x02
     d06:	62 2f       	mov	r22, r18
     d08:	6f 77       	andi	r22, 0x7F	; 127
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	22 1f       	adc	r18, r18
     d0e:	22 27       	eor	r18, r18
     d10:	22 1f       	adc	r18, r18
     d12:	93 81       	ldd	r25, Z+3	; 0x03
     d14:	89 2f       	mov	r24, r25
     d16:	88 0f       	add	r24, r24
     d18:	82 2b       	or	r24, r18
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	99 1f       	adc	r25, r25
     d20:	99 27       	eor	r25, r25
     d22:	99 1f       	adc	r25, r25
     d24:	11 96       	adiw	r26, 0x01	; 1
     d26:	9c 93       	st	X, r25
     d28:	11 97       	sbiw	r26, 0x01	; 1
     d2a:	21 15       	cp	r18, r1
     d2c:	31 05       	cpc	r19, r1
     d2e:	a9 f5       	brne	.+106    	; 0xd9a <__unpack_f+0x9e>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	11 f4       	brne	.+4      	; 0xd3e <__unpack_f+0x42>
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	37 c0       	rjmp	.+110    	; 0xdac <__unpack_f+0xb0>
     d3e:	82 e8       	ldi	r24, 0x82	; 130
     d40:	9f ef       	ldi	r25, 0xFF	; 255
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	9c 93       	st	X, r25
     d46:	8e 93       	st	-X, r24
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	9a 01       	movw	r18, r20
     d4c:	ab 01       	movw	r20, r22
     d4e:	67 e0       	ldi	r22, 0x07	; 7
     d50:	22 0f       	add	r18, r18
     d52:	33 1f       	adc	r19, r19
     d54:	44 1f       	adc	r20, r20
     d56:	55 1f       	adc	r21, r21
     d58:	6a 95       	dec	r22
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0x54>
     d5c:	83 e0       	ldi	r24, 0x03	; 3
     d5e:	8c 93       	st	X, r24
     d60:	0d c0       	rjmp	.+26     	; 0xd7c <__unpack_f+0x80>
     d62:	22 0f       	add	r18, r18
     d64:	33 1f       	adc	r19, r19
     d66:	44 1f       	adc	r20, r20
     d68:	55 1f       	adc	r21, r21
     d6a:	12 96       	adiw	r26, 0x02	; 2
     d6c:	8d 91       	ld	r24, X+
     d6e:	9c 91       	ld	r25, X
     d70:	13 97       	sbiw	r26, 0x03	; 3
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	13 96       	adiw	r26, 0x03	; 3
     d76:	9c 93       	st	X, r25
     d78:	8e 93       	st	-X, r24
     d7a:	12 97       	sbiw	r26, 0x02	; 2
     d7c:	20 30       	cpi	r18, 0x00	; 0
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	38 07       	cpc	r19, r24
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	48 07       	cpc	r20, r24
     d86:	80 e4       	ldi	r24, 0x40	; 64
     d88:	58 07       	cpc	r21, r24
     d8a:	58 f3       	brcs	.-42     	; 0xd62 <__unpack_f+0x66>
     d8c:	14 96       	adiw	r26, 0x04	; 4
     d8e:	2d 93       	st	X+, r18
     d90:	3d 93       	st	X+, r19
     d92:	4d 93       	st	X+, r20
     d94:	5c 93       	st	X, r21
     d96:	17 97       	sbiw	r26, 0x07	; 7
     d98:	08 95       	ret
     d9a:	2f 3f       	cpi	r18, 0xFF	; 255
     d9c:	31 05       	cpc	r19, r1
     d9e:	79 f4       	brne	.+30     	; 0xdbe <__unpack_f+0xc2>
     da0:	41 15       	cp	r20, r1
     da2:	51 05       	cpc	r21, r1
     da4:	61 05       	cpc	r22, r1
     da6:	71 05       	cpc	r23, r1
     da8:	19 f4       	brne	.+6      	; 0xdb0 <__unpack_f+0xb4>
     daa:	84 e0       	ldi	r24, 0x04	; 4
     dac:	8c 93       	st	X, r24
     dae:	08 95       	ret
     db0:	64 ff       	sbrs	r22, 4
     db2:	03 c0       	rjmp	.+6      	; 0xdba <__unpack_f+0xbe>
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	8c 93       	st	X, r24
     db8:	12 c0       	rjmp	.+36     	; 0xdde <__unpack_f+0xe2>
     dba:	1c 92       	st	X, r1
     dbc:	10 c0       	rjmp	.+32     	; 0xdde <__unpack_f+0xe2>
     dbe:	2f 57       	subi	r18, 0x7F	; 127
     dc0:	30 40       	sbci	r19, 0x00	; 0
     dc2:	13 96       	adiw	r26, 0x03	; 3
     dc4:	3c 93       	st	X, r19
     dc6:	2e 93       	st	-X, r18
     dc8:	12 97       	sbiw	r26, 0x02	; 2
     dca:	83 e0       	ldi	r24, 0x03	; 3
     dcc:	8c 93       	st	X, r24
     dce:	87 e0       	ldi	r24, 0x07	; 7
     dd0:	44 0f       	add	r20, r20
     dd2:	55 1f       	adc	r21, r21
     dd4:	66 1f       	adc	r22, r22
     dd6:	77 1f       	adc	r23, r23
     dd8:	8a 95       	dec	r24
     dda:	d1 f7       	brne	.-12     	; 0xdd0 <__unpack_f+0xd4>
     ddc:	70 64       	ori	r23, 0x40	; 64
     dde:	14 96       	adiw	r26, 0x04	; 4
     de0:	4d 93       	st	X+, r20
     de2:	5d 93       	st	X+, r21
     de4:	6d 93       	st	X+, r22
     de6:	7c 93       	st	X, r23
     de8:	17 97       	sbiw	r26, 0x07	; 7
     dea:	08 95       	ret

00000dec <__fpcmp_parts_f>:
     dec:	1f 93       	push	r17
     dee:	dc 01       	movw	r26, r24
     df0:	fb 01       	movw	r30, r22
     df2:	9c 91       	ld	r25, X
     df4:	92 30       	cpi	r25, 0x02	; 2
     df6:	08 f4       	brcc	.+2      	; 0xdfa <__fpcmp_parts_f+0xe>
     df8:	47 c0       	rjmp	.+142    	; 0xe88 <__fpcmp_parts_f+0x9c>
     dfa:	80 81       	ld	r24, Z
     dfc:	82 30       	cpi	r24, 0x02	; 2
     dfe:	08 f4       	brcc	.+2      	; 0xe02 <__fpcmp_parts_f+0x16>
     e00:	43 c0       	rjmp	.+134    	; 0xe88 <__fpcmp_parts_f+0x9c>
     e02:	94 30       	cpi	r25, 0x04	; 4
     e04:	51 f4       	brne	.+20     	; 0xe1a <__fpcmp_parts_f+0x2e>
     e06:	11 96       	adiw	r26, 0x01	; 1
     e08:	1c 91       	ld	r17, X
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	99 f5       	brne	.+102    	; 0xe74 <__fpcmp_parts_f+0x88>
     e0e:	81 81       	ldd	r24, Z+1	; 0x01
     e10:	68 2f       	mov	r22, r24
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	61 1b       	sub	r22, r17
     e16:	71 09       	sbc	r23, r1
     e18:	3f c0       	rjmp	.+126    	; 0xe98 <__fpcmp_parts_f+0xac>
     e1a:	84 30       	cpi	r24, 0x04	; 4
     e1c:	21 f0       	breq	.+8      	; 0xe26 <__fpcmp_parts_f+0x3a>
     e1e:	92 30       	cpi	r25, 0x02	; 2
     e20:	31 f4       	brne	.+12     	; 0xe2e <__fpcmp_parts_f+0x42>
     e22:	82 30       	cpi	r24, 0x02	; 2
     e24:	b9 f1       	breq	.+110    	; 0xe94 <__fpcmp_parts_f+0xa8>
     e26:	81 81       	ldd	r24, Z+1	; 0x01
     e28:	88 23       	and	r24, r24
     e2a:	89 f1       	breq	.+98     	; 0xe8e <__fpcmp_parts_f+0xa2>
     e2c:	2d c0       	rjmp	.+90     	; 0xe88 <__fpcmp_parts_f+0x9c>
     e2e:	11 96       	adiw	r26, 0x01	; 1
     e30:	1c 91       	ld	r17, X
     e32:	11 97       	sbiw	r26, 0x01	; 1
     e34:	82 30       	cpi	r24, 0x02	; 2
     e36:	f1 f0       	breq	.+60     	; 0xe74 <__fpcmp_parts_f+0x88>
     e38:	81 81       	ldd	r24, Z+1	; 0x01
     e3a:	18 17       	cp	r17, r24
     e3c:	d9 f4       	brne	.+54     	; 0xe74 <__fpcmp_parts_f+0x88>
     e3e:	12 96       	adiw	r26, 0x02	; 2
     e40:	2d 91       	ld	r18, X+
     e42:	3c 91       	ld	r19, X
     e44:	13 97       	sbiw	r26, 0x03	; 3
     e46:	82 81       	ldd	r24, Z+2	; 0x02
     e48:	93 81       	ldd	r25, Z+3	; 0x03
     e4a:	82 17       	cp	r24, r18
     e4c:	93 07       	cpc	r25, r19
     e4e:	94 f0       	brlt	.+36     	; 0xe74 <__fpcmp_parts_f+0x88>
     e50:	28 17       	cp	r18, r24
     e52:	39 07       	cpc	r19, r25
     e54:	bc f0       	brlt	.+46     	; 0xe84 <__fpcmp_parts_f+0x98>
     e56:	14 96       	adiw	r26, 0x04	; 4
     e58:	8d 91       	ld	r24, X+
     e5a:	9d 91       	ld	r25, X+
     e5c:	0d 90       	ld	r0, X+
     e5e:	bc 91       	ld	r27, X
     e60:	a0 2d       	mov	r26, r0
     e62:	24 81       	ldd	r18, Z+4	; 0x04
     e64:	35 81       	ldd	r19, Z+5	; 0x05
     e66:	46 81       	ldd	r20, Z+6	; 0x06
     e68:	57 81       	ldd	r21, Z+7	; 0x07
     e6a:	28 17       	cp	r18, r24
     e6c:	39 07       	cpc	r19, r25
     e6e:	4a 07       	cpc	r20, r26
     e70:	5b 07       	cpc	r21, r27
     e72:	18 f4       	brcc	.+6      	; 0xe7a <__fpcmp_parts_f+0x8e>
     e74:	11 23       	and	r17, r17
     e76:	41 f0       	breq	.+16     	; 0xe88 <__fpcmp_parts_f+0x9c>
     e78:	0a c0       	rjmp	.+20     	; 0xe8e <__fpcmp_parts_f+0xa2>
     e7a:	82 17       	cp	r24, r18
     e7c:	93 07       	cpc	r25, r19
     e7e:	a4 07       	cpc	r26, r20
     e80:	b5 07       	cpc	r27, r21
     e82:	40 f4       	brcc	.+16     	; 0xe94 <__fpcmp_parts_f+0xa8>
     e84:	11 23       	and	r17, r17
     e86:	19 f0       	breq	.+6      	; 0xe8e <__fpcmp_parts_f+0xa2>
     e88:	61 e0       	ldi	r22, 0x01	; 1
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	05 c0       	rjmp	.+10     	; 0xe98 <__fpcmp_parts_f+0xac>
     e8e:	6f ef       	ldi	r22, 0xFF	; 255
     e90:	7f ef       	ldi	r23, 0xFF	; 255
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <__fpcmp_parts_f+0xac>
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	cb 01       	movw	r24, r22
     e9a:	1f 91       	pop	r17
     e9c:	08 95       	ret

00000e9e <delay_ms>:
 */

#include "delay.h"


void delay_ms(int x){
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	2a 97       	sbiw	r28, 0x0a	; 10
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	9a 87       	std	Y+10, r25	; 0x0a
     eb4:	89 87       	std	Y+9, r24	; 0x09
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
     ec6:	00 00       	nop

	long int countlimit = 248+(x-1)*250;
     ec8:	29 85       	ldd	r18, Y+9	; 0x09
     eca:	3a 85       	ldd	r19, Y+10	; 0x0a
     ecc:	83 e8       	ldi	r24, 0x83	; 131
     ece:	9f ef       	ldi	r25, 0xFF	; 255
     ed0:	ac 01       	movw	r20, r24
     ed2:	24 9f       	mul	r18, r20
     ed4:	c0 01       	movw	r24, r0
     ed6:	25 9f       	mul	r18, r21
     ed8:	90 0d       	add	r25, r0
     eda:	34 9f       	mul	r19, r20
     edc:	90 0d       	add	r25, r0
     ede:	11 24       	eor	r1, r1
     ee0:	80 95       	com	r24
     ee2:	90 95       	com	r25
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	aa 27       	eor	r26, r26
     eea:	97 fd       	sbrc	r25, 7
     eec:	a0 95       	com	r26
     eee:	ba 2f       	mov	r27, r26
     ef0:	8d 83       	std	Y+5, r24	; 0x05
     ef2:	9e 83       	std	Y+6, r25	; 0x06
     ef4:	af 83       	std	Y+7, r26	; 0x07
     ef6:	b8 87       	std	Y+8, r27	; 0x08
for (long int a=0;a<=countlimit;a++){
     ef8:	19 82       	std	Y+1, r1	; 0x01
     efa:	1a 82       	std	Y+2, r1	; 0x02
     efc:	1b 82       	std	Y+3, r1	; 0x03
     efe:	1c 82       	std	Y+4, r1	; 0x04
     f00:	0d c0       	rjmp	.+26     	; 0xf1c <delay_ms+0x7e>
	delay_minimum();
     f02:	0e 94 a4 07 	call	0xf48	; 0xf48 <delay_minimum>
	asm("nop");
	asm("nop");
	asm("nop");

	long int countlimit = 248+(x-1)*250;
for (long int a=0;a<=countlimit;a++){
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	ab 81       	ldd	r26, Y+3	; 0x03
     f0c:	bc 81       	ldd	r27, Y+4	; 0x04
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	a1 1d       	adc	r26, r1
     f12:	b1 1d       	adc	r27, r1
     f14:	89 83       	std	Y+1, r24	; 0x01
     f16:	9a 83       	std	Y+2, r25	; 0x02
     f18:	ab 83       	std	Y+3, r26	; 0x03
     f1a:	bc 83       	std	Y+4, r27	; 0x04
     f1c:	29 81       	ldd	r18, Y+1	; 0x01
     f1e:	3a 81       	ldd	r19, Y+2	; 0x02
     f20:	4b 81       	ldd	r20, Y+3	; 0x03
     f22:	5c 81       	ldd	r21, Y+4	; 0x04
     f24:	8d 81       	ldd	r24, Y+5	; 0x05
     f26:	9e 81       	ldd	r25, Y+6	; 0x06
     f28:	af 81       	ldd	r26, Y+7	; 0x07
     f2a:	b8 85       	ldd	r27, Y+8	; 0x08
     f2c:	82 17       	cp	r24, r18
     f2e:	93 07       	cpc	r25, r19
     f30:	a4 07       	cpc	r26, r20
     f32:	b5 07       	cpc	r27, r21
     f34:	34 f7       	brge	.-52     	; 0xf02 <delay_ms+0x64>
	delay_minimum();
}
}
     f36:	2a 96       	adiw	r28, 0x0a	; 10
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <delay_minimum>:

void delay_minimum(){
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
	...
asm("nop");
asm("nop");
asm("nop");
asm("nop");
}
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <delay_us>:

void delay_us(char x){
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	00 d0       	rcall	.+0      	; 0xf64 <delay_us+0x6>
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	8a 83       	std	Y+2, r24	; 0x02
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");

	if(x>3){
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	84 30       	cpi	r24, 0x04	; 4
     f7a:	80 f0       	brcs	.+32     	; 0xf9c <delay_us+0x3e>
		x=x-3;
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	83 50       	subi	r24, 0x03	; 3
     f80:	8a 83       	std	Y+2, r24	; 0x02
	for(i=0;i<x;i++){
     f82:	19 82       	std	Y+1, r1	; 0x01
     f84:	05 c0       	rjmp	.+10     	; 0xf90 <delay_us+0x32>
		asm("nop");
     f86:	00 00       	nop
		asm("nop");
     f88:	00 00       	nop
	asm("nop");
	asm("nop");

	if(x>3){
		x=x-3;
	for(i=0;i<x;i++){
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	8f 5f       	subi	r24, 0xFF	; 255
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	99 81       	ldd	r25, Y+1	; 0x01
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	98 17       	cp	r25, r24
     f96:	b8 f3       	brcs	.-18     	; 0xf86 <delay_us+0x28>
		asm("nop");
		asm("nop");


	}
	asm("nop");
     f98:	00 00       	nop
	asm("nop");
     f9a:	00 00       	nop
	}
}
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <delay_s>:

void delay_s(int s){
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	00 d0       	rcall	.+0      	; 0xfac <delay_s+0x6>
     fac:	00 d0       	rcall	.+0      	; 0xfae <delay_s+0x8>
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <delay_s+0xa>
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	9e 83       	std	Y+6, r25	; 0x06
     fb6:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;

	for(i=0;i<s;i++){
     fb8:	1c 82       	std	Y+4, r1	; 0x04
     fba:	1b 82       	std	Y+3, r1	; 0x03
     fbc:	3c c0       	rjmp	.+120    	; 0x1036 <delay_s+0x90>
		for (j=0;j<1151;j++){
     fbe:	1a 82       	std	Y+2, r1	; 0x02
     fc0:	19 82       	std	Y+1, r1	; 0x01
     fc2:	06 c0       	rjmp	.+12     	; 0xfd0 <delay_s+0x2a>
			asm("nop");
     fc4:	00 00       	nop

void delay_s(int s){
	int i,j;

	for(i=0;i<s;i++){
		for (j=0;j<1151;j++){
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	9a 81       	ldd	r25, Y+2	; 0x02
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	9a 83       	std	Y+2, r25	; 0x02
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	9a 81       	ldd	r25, Y+2	; 0x02
     fd4:	24 e0       	ldi	r18, 0x04	; 4
     fd6:	8f 37       	cpi	r24, 0x7F	; 127
     fd8:	92 07       	cpc	r25, r18
     fda:	a4 f3       	brlt	.-24     	; 0xfc4 <delay_s+0x1e>
			asm("nop");
		}
	delay_ms(100);
     fdc:	84 e6       	ldi	r24, 0x64	; 100
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
	delay_ms(100);
     fe4:	84 e6       	ldi	r24, 0x64	; 100
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
	delay_ms(100);
     fec:	84 e6       	ldi	r24, 0x64	; 100
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
	delay_ms(100);
     ff4:	84 e6       	ldi	r24, 0x64	; 100
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
	delay_ms(100);
     ffc:	84 e6       	ldi	r24, 0x64	; 100
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
	delay_ms(100);
    1004:	84 e6       	ldi	r24, 0x64	; 100
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
	delay_ms(100);
    100c:	84 e6       	ldi	r24, 0x64	; 100
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
	delay_ms(100);
    1014:	84 e6       	ldi	r24, 0x64	; 100
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
	delay_ms(100);
    101c:	84 e6       	ldi	r24, 0x64	; 100
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
	delay_ms(99);
    1024:	83 e6       	ldi	r24, 0x63	; 99
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
}

void delay_s(int s){
	int i,j;

	for(i=0;i<s;i++){
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	9c 83       	std	Y+4, r25	; 0x04
    1034:	8b 83       	std	Y+3, r24	; 0x03
    1036:	2b 81       	ldd	r18, Y+3	; 0x03
    1038:	3c 81       	ldd	r19, Y+4	; 0x04
    103a:	8d 81       	ldd	r24, Y+5	; 0x05
    103c:	9e 81       	ldd	r25, Y+6	; 0x06
    103e:	28 17       	cp	r18, r24
    1040:	39 07       	cpc	r19, r25
    1042:	0c f4       	brge	.+2      	; 0x1046 <delay_s+0xa0>
    1044:	bc cf       	rjmp	.-136    	; 0xfbe <delay_s+0x18>
	delay_ms(100);
	delay_ms(100);
	delay_ms(100);
	delay_ms(99);
	}
}
    1046:	26 96       	adiw	r28, 0x06	; 6
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <actionfunction>:
volatile char dcspeed;
volatile char sweepbool;
volatile unsigned int angle1;
volatile unsigned int angle2;

void actionfunction(char chararray[]){
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	2a 97       	sbiw	r28, 0x0a	; 10
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	9a 87       	std	Y+10, r25	; 0x0a
    106e:	89 87       	std	Y+9, r24	; 0x09

	if (chararray[0]=='v'){
    1070:	e9 85       	ldd	r30, Y+9	; 0x09
    1072:	fa 85       	ldd	r31, Y+10	; 0x0a
    1074:	80 81       	ld	r24, Z
    1076:	86 37       	cpi	r24, 0x76	; 118
    1078:	09 f0       	breq	.+2      	; 0x107c <actionfunction+0x24>
    107a:	b1 c0       	rjmp	.+354    	; 0x11de <actionfunction+0x186>
			//must write all, 50%=v050
		if (chararray[2]<0x30) dcspeed=chararray[1]-0x30;
    107c:	89 85       	ldd	r24, Y+9	; 0x09
    107e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1080:	fc 01       	movw	r30, r24
    1082:	32 96       	adiw	r30, 0x02	; 2
    1084:	80 81       	ld	r24, Z
    1086:	80 33       	cpi	r24, 0x30	; 48
    1088:	48 f4       	brcc	.+18     	; 0x109c <actionfunction+0x44>
    108a:	89 85       	ldd	r24, Y+9	; 0x09
    108c:	9a 85       	ldd	r25, Y+10	; 0x0a
    108e:	fc 01       	movw	r30, r24
    1090:	31 96       	adiw	r30, 0x01	; 1
    1092:	80 81       	ld	r24, Z
    1094:	80 53       	subi	r24, 0x30	; 48
    1096:	80 93 90 02 	sts	0x0290, r24
    109a:	5b c0       	rjmp	.+182    	; 0x1152 <actionfunction+0xfa>
		else if (chararray[3]<0x30) dcspeed=(10*(chararray[1]-0x30)+(chararray[2]-0x30));
    109c:	89 85       	ldd	r24, Y+9	; 0x09
    109e:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a0:	fc 01       	movw	r30, r24
    10a2:	33 96       	adiw	r30, 0x03	; 3
    10a4:	80 81       	ld	r24, Z
    10a6:	80 33       	cpi	r24, 0x30	; 48
    10a8:	e0 f4       	brcc	.+56     	; 0x10e2 <actionfunction+0x8a>
    10aa:	89 85       	ldd	r24, Y+9	; 0x09
    10ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ae:	fc 01       	movw	r30, r24
    10b0:	31 96       	adiw	r30, 0x01	; 1
    10b2:	80 81       	ld	r24, Z
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	9c 01       	movw	r18, r24
    10ba:	22 0f       	add	r18, r18
    10bc:	33 1f       	adc	r19, r19
    10be:	c9 01       	movw	r24, r18
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	82 0f       	add	r24, r18
    10ca:	93 1f       	adc	r25, r19
    10cc:	28 2f       	mov	r18, r24
    10ce:	89 85       	ldd	r24, Y+9	; 0x09
    10d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d2:	fc 01       	movw	r30, r24
    10d4:	32 96       	adiw	r30, 0x02	; 2
    10d6:	80 81       	ld	r24, Z
    10d8:	82 0f       	add	r24, r18
    10da:	80 51       	subi	r24, 0x10	; 16
    10dc:	80 93 90 02 	sts	0x0290, r24
    10e0:	38 c0       	rjmp	.+112    	; 0x1152 <actionfunction+0xfa>
		else if (chararray[1]=='0') dcspeed=0;
    10e2:	89 85       	ldd	r24, Y+9	; 0x09
    10e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e6:	fc 01       	movw	r30, r24
    10e8:	31 96       	adiw	r30, 0x01	; 1
    10ea:	80 81       	ld	r24, Z
    10ec:	80 33       	cpi	r24, 0x30	; 48
    10ee:	19 f4       	brne	.+6      	; 0x10f6 <actionfunction+0x9e>
    10f0:	10 92 90 02 	sts	0x0290, r1
    10f4:	2e c0       	rjmp	.+92     	; 0x1152 <actionfunction+0xfa>
		else dcspeed=100*(chararray[1]-0x30)+10*(chararray[2]-0x30)+(chararray[3]-0x30);
    10f6:	89 85       	ldd	r24, Y+9	; 0x09
    10f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fa:	fc 01       	movw	r30, r24
    10fc:	31 96       	adiw	r30, 0x01	; 1
    10fe:	80 81       	ld	r24, Z
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	84 e6       	ldi	r24, 0x64	; 100
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	ac 01       	movw	r20, r24
    110a:	24 9f       	mul	r18, r20
    110c:	c0 01       	movw	r24, r0
    110e:	25 9f       	mul	r18, r21
    1110:	90 0d       	add	r25, r0
    1112:	34 9f       	mul	r19, r20
    1114:	90 0d       	add	r25, r0
    1116:	11 24       	eor	r1, r1
    1118:	48 2f       	mov	r20, r24
    111a:	89 85       	ldd	r24, Y+9	; 0x09
    111c:	9a 85       	ldd	r25, Y+10	; 0x0a
    111e:	fc 01       	movw	r30, r24
    1120:	32 96       	adiw	r30, 0x02	; 2
    1122:	80 81       	ld	r24, Z
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	9c 01       	movw	r18, r24
    112a:	22 0f       	add	r18, r18
    112c:	33 1f       	adc	r19, r19
    112e:	c9 01       	movw	r24, r18
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	82 0f       	add	r24, r18
    113a:	93 1f       	adc	r25, r19
    113c:	24 2f       	mov	r18, r20
    113e:	28 0f       	add	r18, r24
    1140:	89 85       	ldd	r24, Y+9	; 0x09
    1142:	9a 85       	ldd	r25, Y+10	; 0x0a
    1144:	fc 01       	movw	r30, r24
    1146:	33 96       	adiw	r30, 0x03	; 3
    1148:	80 81       	ld	r24, Z
    114a:	82 0f       	add	r24, r18
    114c:	80 5d       	subi	r24, 0xD0	; 208
    114e:	80 93 90 02 	sts	0x0290, r24

		dcspeed=(dcspeed/100.0)*255;
    1152:	80 91 90 02 	lds	r24, 0x0290
    1156:	88 2f       	mov	r24, r24
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	aa 27       	eor	r26, r26
    115c:	97 fd       	sbrc	r25, 7
    115e:	a0 95       	com	r26
    1160:	ba 2f       	mov	r27, r26
    1162:	bc 01       	movw	r22, r24
    1164:	cd 01       	movw	r24, r26
    1166:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	bc 01       	movw	r22, r24
    1170:	cd 01       	movw	r24, r26
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	48 ec       	ldi	r20, 0xC8	; 200
    1178:	52 e4       	ldi	r21, 0x42	; 66
    117a:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	4f e7       	ldi	r20, 0x7F	; 127
    118c:	53 e4       	ldi	r21, 0x43	; 67
    118e:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	bc 01       	movw	r22, r24
    1198:	cd 01       	movw	r24, r26
    119a:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	80 93 90 02 	sts	0x0290, r24
		if (dcspeed==0){
    11a6:	80 91 90 02 	lds	r24, 0x0290
    11aa:	88 23       	and	r24, r24
    11ac:	19 f4       	brne	.+6      	; 0x11b4 <actionfunction+0x15c>
			pwmalloff();
    11ae:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <pwmalloff>
    11b2:	62 c1       	rjmp	.+708    	; 0x1478 <actionfunction+0x420>
		}
		else{
		OCR0A = dcspeed;
    11b4:	e7 e4       	ldi	r30, 0x47	; 71
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 91 90 02 	lds	r24, 0x0290
    11bc:	80 83       	st	Z, r24
		OCR0B = dcspeed;
    11be:	e8 e4       	ldi	r30, 0x48	; 72
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 91 90 02 	lds	r24, 0x0290
    11c6:	80 83       	st	Z, r24
		OCR2A = dcspeed;
    11c8:	e3 eb       	ldi	r30, 0xB3	; 179
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 91 90 02 	lds	r24, 0x0290
    11d0:	80 83       	st	Z, r24
		OCR2B = dcspeed;
    11d2:	e4 eb       	ldi	r30, 0xB4	; 180
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 91 90 02 	lds	r24, 0x0290
    11da:	80 83       	st	Z, r24
    11dc:	4d c1       	rjmp	.+666    	; 0x1478 <actionfunction+0x420>
		}
	}
	else if (chararray[0]=='n'){
    11de:	e9 85       	ldd	r30, Y+9	; 0x09
    11e0:	fa 85       	ldd	r31, Y+10	; 0x0a
    11e2:	80 81       	ld	r24, Z
    11e4:	8e 36       	cpi	r24, 0x6E	; 110
    11e6:	09 f0       	breq	.+2      	; 0x11ea <actionfunction+0x192>
    11e8:	91 c0       	rjmp	.+290    	; 0x130c <actionfunction+0x2b4>
		if (chararray[1]=='2'){
    11ea:	89 85       	ldd	r24, Y+9	; 0x09
    11ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ee:	fc 01       	movw	r30, r24
    11f0:	31 96       	adiw	r30, 0x01	; 1
    11f2:	80 81       	ld	r24, Z
    11f4:	82 33       	cpi	r24, 0x32	; 50
    11f6:	c9 f5       	brne	.+114    	; 0x126a <actionfunction+0x212>
			angle1 = 100*(chararray[2]-0x30)+10*(chararray[3]-0x30)+(chararray[4]-0x30);
    11f8:	89 85       	ldd	r24, Y+9	; 0x09
    11fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fc:	fc 01       	movw	r30, r24
    11fe:	32 96       	adiw	r30, 0x02	; 2
    1200:	80 81       	ld	r24, Z
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	84 e6       	ldi	r24, 0x64	; 100
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	ac 01       	movw	r20, r24
    120c:	24 9f       	mul	r18, r20
    120e:	c0 01       	movw	r24, r0
    1210:	25 9f       	mul	r18, r21
    1212:	90 0d       	add	r25, r0
    1214:	34 9f       	mul	r19, r20
    1216:	90 0d       	add	r25, r0
    1218:	11 24       	eor	r1, r1
    121a:	ac 01       	movw	r20, r24
    121c:	40 5c       	subi	r20, 0xC0	; 192
    121e:	52 41       	sbci	r21, 0x12	; 18
    1220:	89 85       	ldd	r24, Y+9	; 0x09
    1222:	9a 85       	ldd	r25, Y+10	; 0x0a
    1224:	fc 01       	movw	r30, r24
    1226:	33 96       	adiw	r30, 0x03	; 3
    1228:	80 81       	ld	r24, Z
    122a:	88 2f       	mov	r24, r24
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	9c 01       	movw	r18, r24
    1230:	22 0f       	add	r18, r18
    1232:	33 1f       	adc	r19, r19
    1234:	c9 01       	movw	r24, r18
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	82 0f       	add	r24, r18
    1240:	93 1f       	adc	r25, r19
    1242:	80 5e       	subi	r24, 0xE0	; 224
    1244:	91 40       	sbci	r25, 0x01	; 1
    1246:	9a 01       	movw	r18, r20
    1248:	28 0f       	add	r18, r24
    124a:	39 1f       	adc	r19, r25
    124c:	89 85       	ldd	r24, Y+9	; 0x09
    124e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1250:	fc 01       	movw	r30, r24
    1252:	34 96       	adiw	r30, 0x04	; 4
    1254:	80 81       	ld	r24, Z
    1256:	88 2f       	mov	r24, r24
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	c0 97       	sbiw	r24, 0x30	; 48
    125c:	82 0f       	add	r24, r18
    125e:	93 1f       	adc	r25, r19
    1260:	90 93 92 02 	sts	0x0292, r25
    1264:	80 93 91 02 	sts	0x0291, r24
    1268:	07 c1       	rjmp	.+526    	; 0x1478 <actionfunction+0x420>

		}
		else if (chararray[1]=='1'){
    126a:	89 85       	ldd	r24, Y+9	; 0x09
    126c:	9a 85       	ldd	r25, Y+10	; 0x0a
    126e:	fc 01       	movw	r30, r24
    1270:	31 96       	adiw	r30, 0x01	; 1
    1272:	80 81       	ld	r24, Z
    1274:	81 33       	cpi	r24, 0x31	; 49
    1276:	c9 f5       	brne	.+114    	; 0x12ea <actionfunction+0x292>
			angle2 = 100*(chararray[2]-0x30)+10*(chararray[3]-0x30)+(chararray[4]-0x30);
    1278:	89 85       	ldd	r24, Y+9	; 0x09
    127a:	9a 85       	ldd	r25, Y+10	; 0x0a
    127c:	fc 01       	movw	r30, r24
    127e:	32 96       	adiw	r30, 0x02	; 2
    1280:	80 81       	ld	r24, Z
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	84 e6       	ldi	r24, 0x64	; 100
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	ac 01       	movw	r20, r24
    128c:	24 9f       	mul	r18, r20
    128e:	c0 01       	movw	r24, r0
    1290:	25 9f       	mul	r18, r21
    1292:	90 0d       	add	r25, r0
    1294:	34 9f       	mul	r19, r20
    1296:	90 0d       	add	r25, r0
    1298:	11 24       	eor	r1, r1
    129a:	ac 01       	movw	r20, r24
    129c:	40 5c       	subi	r20, 0xC0	; 192
    129e:	52 41       	sbci	r21, 0x12	; 18
    12a0:	89 85       	ldd	r24, Y+9	; 0x09
    12a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a4:	fc 01       	movw	r30, r24
    12a6:	33 96       	adiw	r30, 0x03	; 3
    12a8:	80 81       	ld	r24, Z
    12aa:	88 2f       	mov	r24, r24
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	9c 01       	movw	r18, r24
    12b0:	22 0f       	add	r18, r18
    12b2:	33 1f       	adc	r19, r19
    12b4:	c9 01       	movw	r24, r18
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	82 0f       	add	r24, r18
    12c0:	93 1f       	adc	r25, r19
    12c2:	80 5e       	subi	r24, 0xE0	; 224
    12c4:	91 40       	sbci	r25, 0x01	; 1
    12c6:	9a 01       	movw	r18, r20
    12c8:	28 0f       	add	r18, r24
    12ca:	39 1f       	adc	r19, r25
    12cc:	89 85       	ldd	r24, Y+9	; 0x09
    12ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d0:	fc 01       	movw	r30, r24
    12d2:	34 96       	adiw	r30, 0x04	; 4
    12d4:	80 81       	ld	r24, Z
    12d6:	88 2f       	mov	r24, r24
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	c0 97       	sbiw	r24, 0x30	; 48
    12dc:	82 0f       	add	r24, r18
    12de:	93 1f       	adc	r25, r19
    12e0:	90 93 94 02 	sts	0x0294, r25
    12e4:	80 93 93 02 	sts	0x0293, r24
    12e8:	c7 c0       	rjmp	.+398    	; 0x1478 <actionfunction+0x420>


			}
		else if (chararray[1]=='s'){
    12ea:	89 85       	ldd	r24, Y+9	; 0x09
    12ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ee:	fc 01       	movw	r30, r24
    12f0:	31 96       	adiw	r30, 0x01	; 1
    12f2:	80 81       	ld	r24, Z
    12f4:	83 37       	cpi	r24, 0x73	; 115
    12f6:	09 f0       	breq	.+2      	; 0x12fa <actionfunction+0x2a2>
    12f8:	bf c0       	rjmp	.+382    	; 0x1478 <actionfunction+0x420>
			sweepbool=chararray[2]-0x30;
    12fa:	89 85       	ldd	r24, Y+9	; 0x09
    12fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fe:	fc 01       	movw	r30, r24
    1300:	32 96       	adiw	r30, 0x02	; 2
    1302:	80 81       	ld	r24, Z
    1304:	80 53       	subi	r24, 0x30	; 48
    1306:	80 93 95 02 	sts	0x0295, r24
    130a:	b6 c0       	rjmp	.+364    	; 0x1478 <actionfunction+0x420>

		}
	}
	else if (chararray[0]=='w'){
    130c:	e9 85       	ldd	r30, Y+9	; 0x09
    130e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1310:	80 81       	ld	r24, Z
    1312:	87 37       	cpi	r24, 0x77	; 119
    1314:	49 f4       	brne	.+18     	; 0x1328 <actionfunction+0x2d0>
		//pwmduty2 off;
		pwm2off();
    1316:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <pwm2off>
		//pwmduty4 off;
		pwm4off();
    131a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <pwm4off>
		//pwm1 on
		pwm1on();
    131e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <pwm1on>
		pwm3on();
    1322:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <pwm3on>
    1326:	a8 c0       	rjmp	.+336    	; 0x1478 <actionfunction+0x420>
	}
	else if (chararray[0]=='s'){
    1328:	e9 85       	ldd	r30, Y+9	; 0x09
    132a:	fa 85       	ldd	r31, Y+10	; 0x0a
    132c:	80 81       	ld	r24, Z
    132e:	83 37       	cpi	r24, 0x73	; 115
    1330:	49 f4       	brne	.+18     	; 0x1344 <actionfunction+0x2ec>
		//pwmduty1 off;
		pwm1off();
    1332:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <pwm1off>
		//	pwmduty3 off;
		pwm3off();
    1336:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <pwm3off>
		pwm2on();
    133a:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <pwm2on>
		pwm4on();
    133e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <pwm4on>
    1342:	9a c0       	rjmp	.+308    	; 0x1478 <actionfunction+0x420>
	}
	else if (chararray[0]=='a'){
    1344:	e9 85       	ldd	r30, Y+9	; 0x09
    1346:	fa 85       	ldd	r31, Y+10	; 0x0a
    1348:	80 81       	ld	r24, Z
    134a:	81 36       	cpi	r24, 0x61	; 97
    134c:	49 f4       	brne	.+18     	; 0x1360 <actionfunction+0x308>
		pwm3off();
    134e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <pwm3off>
		pwm2off();
    1352:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <pwm2off>
		pwm1on();
    1356:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <pwm1on>
		pwm4on();
    135a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <pwm4on>
    135e:	8c c0       	rjmp	.+280    	; 0x1478 <actionfunction+0x420>
	}
	else if (chararray[0]=='d'){
    1360:	e9 85       	ldd	r30, Y+9	; 0x09
    1362:	fa 85       	ldd	r31, Y+10	; 0x0a
    1364:	80 81       	ld	r24, Z
    1366:	84 36       	cpi	r24, 0x64	; 100
    1368:	49 f4       	brne	.+18     	; 0x137c <actionfunction+0x324>
		pwm1off();
    136a:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <pwm1off>
		pwm4off();
    136e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <pwm4off>
		pwm2on();
    1372:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <pwm2on>
		pwm3on();
    1376:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <pwm3on>
    137a:	7e c0       	rjmp	.+252    	; 0x1478 <actionfunction+0x420>
	}
	else if (chararray[0]=='p'){
    137c:	e9 85       	ldd	r30, Y+9	; 0x09
    137e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1380:	80 81       	ld	r24, Z
    1382:	80 37       	cpi	r24, 0x70	; 112
    1384:	09 f0       	breq	.+2      	; 0x1388 <actionfunction+0x330>
    1386:	78 c0       	rjmp	.+240    	; 0x1478 <actionfunction+0x420>
		long timediff1=averagefunc(movave);
    1388:	8a e3       	ldi	r24, 0x3A	; 58
    138a:	92 e0       	ldi	r25, 0x02	; 2
    138c:	0e 94 45 0a 	call	0x148a	; 0x148a <averagefunc>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	8d 83       	std	Y+5, r24	; 0x05
    1396:	9e 83       	std	Y+6, r25	; 0x06
    1398:	af 83       	std	Y+7, r26	; 0x07
    139a:	b8 87       	std	Y+8, r27	; 0x08
		long timediff=averagefunc(movave2);
    139c:	84 e6       	ldi	r24, 0x64	; 100
    139e:	92 e0       	ldi	r25, 0x02	; 2
    13a0:	0e 94 45 0a 	call	0x148a	; 0x148a <averagefunc>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	89 83       	std	Y+1, r24	; 0x01
    13aa:	9a 83       	std	Y+2, r25	; 0x02
    13ac:	ab 83       	std	Y+3, r26	; 0x03
    13ae:	bc 83       	std	Y+4, r27	; 0x04
		writestring("dir1: ");
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	0e 94 19 15 	call	0x2a32	; 0x2a32 <writestring>
		chartoascii(dir1);
    13b8:	80 91 96 02 	lds	r24, 0x0296
    13bc:	0e 94 bd 10 	call	0x217a	; 0x217a <chartoascii>
		writestring("\nTime: ");
    13c0:	87 e0       	ldi	r24, 0x07	; 7
    13c2:	91 e0       	ldi	r25, 0x01	; 1
    13c4:	0e 94 19 15 	call	0x2a32	; 0x2a32 <writestring>
		floattoascii(timediff1*0.0159375);
    13c8:	6d 81       	ldd	r22, Y+5	; 0x05
    13ca:	7e 81       	ldd	r23, Y+6	; 0x06
    13cc:	8f 81       	ldd	r24, Y+7	; 0x07
    13ce:	98 85       	ldd	r25, Y+8	; 0x08
    13d0:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	bc 01       	movw	r22, r24
    13da:	cd 01       	movw	r24, r26
    13dc:	2c e5       	ldi	r18, 0x5C	; 92
    13de:	3f e8       	ldi	r19, 0x8F	; 143
    13e0:	42 e8       	ldi	r20, 0x82	; 130
    13e2:	5c e3       	ldi	r21, 0x3C	; 60
    13e4:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	bc 01       	movw	r22, r24
    13ee:	cd 01       	movw	r24, r26
    13f0:	0e 94 74 11 	call	0x22e8	; 0x22e8 <floattoascii>
		writestring("\ndir2: ");
    13f4:	8f e0       	ldi	r24, 0x0F	; 15
    13f6:	91 e0       	ldi	r25, 0x01	; 1
    13f8:	0e 94 19 15 	call	0x2a32	; 0x2a32 <writestring>
		chartoascii(dir0);
    13fc:	80 91 97 02 	lds	r24, 0x0297
    1400:	0e 94 bd 10 	call	0x217a	; 0x217a <chartoascii>
		writestring("\nTime: ");
    1404:	87 e0       	ldi	r24, 0x07	; 7
    1406:	91 e0       	ldi	r25, 0x01	; 1
    1408:	0e 94 19 15 	call	0x2a32	; 0x2a32 <writestring>
		floattoascii(timediff*0.0159375);
    140c:	69 81       	ldd	r22, Y+1	; 0x01
    140e:	7a 81       	ldd	r23, Y+2	; 0x02
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	bc 01       	movw	r22, r24
    141e:	cd 01       	movw	r24, r26
    1420:	2c e5       	ldi	r18, 0x5C	; 92
    1422:	3f e8       	ldi	r19, 0x8F	; 143
    1424:	42 e8       	ldi	r20, 0x82	; 130
    1426:	5c e3       	ldi	r21, 0x3C	; 60
    1428:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	bc 01       	movw	r22, r24
    1432:	cd 01       	movw	r24, r26
    1434:	0e 94 74 11 	call	0x22e8	; 0x22e8 <floattoascii>
		writestring("\ndcspeed: ");
    1438:	87 e1       	ldi	r24, 0x17	; 23
    143a:	91 e0       	ldi	r25, 0x01	; 1
    143c:	0e 94 19 15 	call	0x2a32	; 0x2a32 <writestring>
		chartoascii(dcspeed);
    1440:	80 91 90 02 	lds	r24, 0x0290
    1444:	0e 94 bd 10 	call	0x217a	; 0x217a <chartoascii>
		writestring("\nAngle1: ");
    1448:	82 e2       	ldi	r24, 0x22	; 34
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	0e 94 19 15 	call	0x2a32	; 0x2a32 <writestring>
		chartoascii(angle1);
    1450:	80 91 91 02 	lds	r24, 0x0291
    1454:	90 91 92 02 	lds	r25, 0x0292
    1458:	0e 94 bd 10 	call	0x217a	; 0x217a <chartoascii>
		writestring("\nAngle1: ");
    145c:	82 e2       	ldi	r24, 0x22	; 34
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	0e 94 19 15 	call	0x2a32	; 0x2a32 <writestring>
		chartoascii(angle2);
    1464:	80 91 93 02 	lds	r24, 0x0293
    1468:	90 91 94 02 	lds	r25, 0x0294
    146c:	0e 94 bd 10 	call	0x217a	; 0x217a <chartoascii>
		writestring("\n\n");
    1470:	8c e2       	ldi	r24, 0x2C	; 44
    1472:	91 e0       	ldi	r25, 0x01	; 1
    1474:	0e 94 19 15 	call	0x2a32	; 0x2a32 <writestring>
	}

}
    1478:	2a 96       	adiw	r28, 0x0a	; 10
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	f8 94       	cli
    147e:	de bf       	out	0x3e, r29	; 62
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <averagefunc>:

long averagefunc(long valuelist[10]){
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	27 97       	sbiw	r28, 0x07	; 7
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	9f 83       	std	Y+7, r25	; 0x07
    14a0:	8e 83       	std	Y+6, r24	; 0x06
	long sumvalue=0;
    14a2:	1a 82       	std	Y+2, r1	; 0x02
    14a4:	1b 82       	std	Y+3, r1	; 0x03
    14a6:	1c 82       	std	Y+4, r1	; 0x04
    14a8:	1d 82       	std	Y+5, r1	; 0x05
	for (char i=0;i<10;i++){
    14aa:	19 82       	std	Y+1, r1	; 0x01
    14ac:	20 c0       	rjmp	.+64     	; 0x14ee <averagefunc+0x64>
		sumvalue=sumvalue+valuelist[i];
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	88 2f       	mov	r24, r24
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	9c 01       	movw	r18, r24
    14b6:	22 0f       	add	r18, r18
    14b8:	33 1f       	adc	r19, r19
    14ba:	22 0f       	add	r18, r18
    14bc:	33 1f       	adc	r19, r19
    14be:	8e 81       	ldd	r24, Y+6	; 0x06
    14c0:	9f 81       	ldd	r25, Y+7	; 0x07
    14c2:	fc 01       	movw	r30, r24
    14c4:	e2 0f       	add	r30, r18
    14c6:	f3 1f       	adc	r31, r19
    14c8:	20 81       	ld	r18, Z
    14ca:	31 81       	ldd	r19, Z+1	; 0x01
    14cc:	42 81       	ldd	r20, Z+2	; 0x02
    14ce:	53 81       	ldd	r21, Z+3	; 0x03
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	9b 81       	ldd	r25, Y+3	; 0x03
    14d4:	ac 81       	ldd	r26, Y+4	; 0x04
    14d6:	bd 81       	ldd	r27, Y+5	; 0x05
    14d8:	82 0f       	add	r24, r18
    14da:	93 1f       	adc	r25, r19
    14dc:	a4 1f       	adc	r26, r20
    14de:	b5 1f       	adc	r27, r21
    14e0:	8a 83       	std	Y+2, r24	; 0x02
    14e2:	9b 83       	std	Y+3, r25	; 0x03
    14e4:	ac 83       	std	Y+4, r26	; 0x04
    14e6:	bd 83       	std	Y+5, r27	; 0x05

}

long averagefunc(long valuelist[10]){
	long sumvalue=0;
	for (char i=0;i<10;i++){
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	8f 5f       	subi	r24, 0xFF	; 255
    14ec:	89 83       	std	Y+1, r24	; 0x01
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	8a 30       	cpi	r24, 0x0A	; 10
    14f2:	e8 f2       	brcs	.-70     	; 0x14ae <averagefunc+0x24>
		sumvalue=sumvalue+valuelist[i];
	}
	return sumvalue/10;
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	9b 81       	ldd	r25, Y+3	; 0x03
    14f8:	ac 81       	ldd	r26, Y+4	; 0x04
    14fa:	bd 81       	ldd	r27, Y+5	; 0x05
    14fc:	2a e0       	ldi	r18, 0x0A	; 10
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	50 e0       	ldi	r21, 0x00	; 0
    1504:	bc 01       	movw	r22, r24
    1506:	cd 01       	movw	r24, r26
    1508:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__divmodsi4>
    150c:	da 01       	movw	r26, r20
    150e:	c9 01       	movw	r24, r18
}
    1510:	bc 01       	movw	r22, r24
    1512:	cd 01       	movw	r24, r26
    1514:	27 96       	adiw	r28, 0x07	; 7
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <encoder1init>:
long movave[10]={0,0,0,0,0,0,0,0,0,0};
static int avepos=0;
long movave2[10]={0,0,0,0,0,0,0,0,0,0};
static int avepos2=0;

void encoder1init(){
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
	// Utilize attatch interrupt on pin D4
	clockcount1=0;
    152e:	10 92 98 02 	sts	0x0298, r1
    1532:	10 92 99 02 	sts	0x0299, r1
    1536:	10 92 9a 02 	sts	0x029A, r1
    153a:	10 92 9b 02 	sts	0x029B, r1
	onoff=0;
    153e:	10 92 8e 02 	sts	0x028E, r1
	TIMSK2 |= (1<<TOIE2);
    1542:	a0 e7       	ldi	r26, 0x70	; 112
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e0 e7       	ldi	r30, 0x70	; 112
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	81 60       	ori	r24, 0x01	; 1
    154e:	8c 93       	st	X, r24
	TCCR2B=0x01;
    1550:	e1 eb       	ldi	r30, 0xB1	; 177
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	80 83       	st	Z, r24
	PCICR|=(1<<PCIE2);
    1558:	a8 e6       	ldi	r26, 0x68	; 104
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e8 e6       	ldi	r30, 0x68	; 104
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	84 60       	ori	r24, 0x04	; 4
    1564:	8c 93       	st	X, r24
	PCMSK2|=(1<<PCINT20);
    1566:	ad e6       	ldi	r26, 0x6D	; 109
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	ed e6       	ldi	r30, 0x6D	; 109
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	80 61       	ori	r24, 0x10	; 16
    1572:	8c 93       	st	X, r24

}
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <encoder0init>:

void encoder0init(){
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
	// Utilize pin D2 on arduino with external interrupt
	clockcount=0;
    1582:	10 92 9c 02 	sts	0x029C, r1
    1586:	10 92 9d 02 	sts	0x029D, r1
    158a:	10 92 9e 02 	sts	0x029E, r1
    158e:	10 92 9f 02 	sts	0x029F, r1
	TIMSK2 |= (1<<TOIE2);
    1592:	a0 e7       	ldi	r26, 0x70	; 112
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e0 e7       	ldi	r30, 0x70	; 112
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	81 60       	ori	r24, 0x01	; 1
    159e:	8c 93       	st	X, r24
	TCCR2B=0x01;
    15a0:	e1 eb       	ldi	r30, 0xB1	; 177
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	80 83       	st	Z, r24
	EICRA|=(1<<ISC01)|(1<<ISC00);
    15a8:	a9 e6       	ldi	r26, 0x69	; 105
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e9 e6       	ldi	r30, 0x69	; 105
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	83 60       	ori	r24, 0x03	; 3
    15b4:	8c 93       	st	X, r24
	EIMSK|=(1<< INT0);
    15b6:	ad e3       	ldi	r26, 0x3D	; 61
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	ed e3       	ldi	r30, 0x3D	; 61
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	81 60       	ori	r24, 0x01	; 1
    15c2:	8c 93       	st	X, r24
}
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	08 95       	ret

000015ca <__vector_5>:



ISR(PCINT2_vect){
    15ca:	1f 92       	push	r1
    15cc:	0f 92       	push	r0
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	0f 92       	push	r0
    15d2:	11 24       	eor	r1, r1
    15d4:	2f 93       	push	r18
    15d6:	3f 93       	push	r19
    15d8:	4f 93       	push	r20
    15da:	5f 93       	push	r21
    15dc:	8f 93       	push	r24
    15de:	9f 93       	push	r25
    15e0:	ef 93       	push	r30
    15e2:	ff 93       	push	r31
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
	if (PIND & (1 << PD4)) {
    15ec:	e9 e2       	ldi	r30, 0x29	; 41
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	88 2f       	mov	r24, r24
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	80 71       	andi	r24, 0x10	; 16
    15f8:	90 70       	andi	r25, 0x00	; 0
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	d1 f1       	breq	.+116    	; 0x1672 <__vector_5+0xa8>
	dir1=PINB&0x01;
    15fe:	e3 e2       	ldi	r30, 0x23	; 35
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	81 70       	andi	r24, 0x01	; 1
    1606:	80 93 96 02 	sts	0x0296, r24
	movave[avepos]=clockcount;
    160a:	80 91 62 02 	lds	r24, 0x0262
    160e:	90 91 63 02 	lds	r25, 0x0263
    1612:	20 91 9c 02 	lds	r18, 0x029C
    1616:	30 91 9d 02 	lds	r19, 0x029D
    161a:	40 91 9e 02 	lds	r20, 0x029E
    161e:	50 91 9f 02 	lds	r21, 0x029F
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	fc 01       	movw	r30, r24
    162c:	e6 5c       	subi	r30, 0xC6	; 198
    162e:	fd 4f       	sbci	r31, 0xFD	; 253
    1630:	20 83       	st	Z, r18
    1632:	31 83       	std	Z+1, r19	; 0x01
    1634:	42 83       	std	Z+2, r20	; 0x02
    1636:	53 83       	std	Z+3, r21	; 0x03
	clockcount=0;
    1638:	10 92 9c 02 	sts	0x029C, r1
    163c:	10 92 9d 02 	sts	0x029D, r1
    1640:	10 92 9e 02 	sts	0x029E, r1
    1644:	10 92 9f 02 	sts	0x029F, r1
	if (avepos==9) avepos=0;
    1648:	80 91 62 02 	lds	r24, 0x0262
    164c:	90 91 63 02 	lds	r25, 0x0263
    1650:	89 30       	cpi	r24, 0x09	; 9
    1652:	91 05       	cpc	r25, r1
    1654:	29 f4       	brne	.+10     	; 0x1660 <__vector_5+0x96>
    1656:	10 92 63 02 	sts	0x0263, r1
    165a:	10 92 62 02 	sts	0x0262, r1
    165e:	09 c0       	rjmp	.+18     	; 0x1672 <__vector_5+0xa8>
	else avepos++;
    1660:	80 91 62 02 	lds	r24, 0x0262
    1664:	90 91 63 02 	lds	r25, 0x0263
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	90 93 63 02 	sts	0x0263, r25
    166e:	80 93 62 02 	sts	0x0262, r24
	}
}
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	ff 91       	pop	r31
    1678:	ef 91       	pop	r30
    167a:	9f 91       	pop	r25
    167c:	8f 91       	pop	r24
    167e:	5f 91       	pop	r21
    1680:	4f 91       	pop	r20
    1682:	3f 91       	pop	r19
    1684:	2f 91       	pop	r18
    1686:	0f 90       	pop	r0
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	0f 90       	pop	r0
    168c:	1f 90       	pop	r1
    168e:	18 95       	reti

00001690 <__vector_1>:


ISR(INT0_vect){
    1690:	1f 92       	push	r1
    1692:	0f 92       	push	r0
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	0f 92       	push	r0
    1698:	11 24       	eor	r1, r1
    169a:	2f 93       	push	r18
    169c:	3f 93       	push	r19
    169e:	4f 93       	push	r20
    16a0:	5f 93       	push	r21
    16a2:	8f 93       	push	r24
    16a4:	9f 93       	push	r25
    16a6:	ef 93       	push	r30
    16a8:	ff 93       	push	r31
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
dir0=(PIND & (1<<PD7))>>7;
    16b2:	e9 e2       	ldi	r30, 0x29	; 41
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	88 1f       	adc	r24, r24
    16ba:	88 27       	eor	r24, r24
    16bc:	88 1f       	adc	r24, r24
    16be:	80 93 97 02 	sts	0x0297, r24
movave2[avepos2]=clockcount1;
    16c2:	80 91 8c 02 	lds	r24, 0x028C
    16c6:	90 91 8d 02 	lds	r25, 0x028D
    16ca:	20 91 98 02 	lds	r18, 0x0298
    16ce:	30 91 99 02 	lds	r19, 0x0299
    16d2:	40 91 9a 02 	lds	r20, 0x029A
    16d6:	50 91 9b 02 	lds	r21, 0x029B
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	fc 01       	movw	r30, r24
    16e4:	ec 59       	subi	r30, 0x9C	; 156
    16e6:	fd 4f       	sbci	r31, 0xFD	; 253
    16e8:	20 83       	st	Z, r18
    16ea:	31 83       	std	Z+1, r19	; 0x01
    16ec:	42 83       	std	Z+2, r20	; 0x02
    16ee:	53 83       	std	Z+3, r21	; 0x03
clockcount1=0;
    16f0:	10 92 98 02 	sts	0x0298, r1
    16f4:	10 92 99 02 	sts	0x0299, r1
    16f8:	10 92 9a 02 	sts	0x029A, r1
    16fc:	10 92 9b 02 	sts	0x029B, r1
if (avepos2==9) avepos2=0;
    1700:	80 91 8c 02 	lds	r24, 0x028C
    1704:	90 91 8d 02 	lds	r25, 0x028D
    1708:	89 30       	cpi	r24, 0x09	; 9
    170a:	91 05       	cpc	r25, r1
    170c:	29 f4       	brne	.+10     	; 0x1718 <__vector_1+0x88>
    170e:	10 92 8d 02 	sts	0x028D, r1
    1712:	10 92 8c 02 	sts	0x028C, r1
    1716:	09 c0       	rjmp	.+18     	; 0x172a <__vector_1+0x9a>
else avepos2++;
    1718:	80 91 8c 02 	lds	r24, 0x028C
    171c:	90 91 8d 02 	lds	r25, 0x028D
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	90 93 8d 02 	sts	0x028D, r25
    1726:	80 93 8c 02 	sts	0x028C, r24
}
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	ff 91       	pop	r31
    1730:	ef 91       	pop	r30
    1732:	9f 91       	pop	r25
    1734:	8f 91       	pop	r24
    1736:	5f 91       	pop	r21
    1738:	4f 91       	pop	r20
    173a:	3f 91       	pop	r19
    173c:	2f 91       	pop	r18
    173e:	0f 90       	pop	r0
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	0f 90       	pop	r0
    1744:	1f 90       	pop	r1
    1746:	18 95       	reti

00001748 <pwmall_init>:
volatile char pwmduty2;
volatile char pwmduty3;
volatile char pwmduty4;


void pwmall_init(){
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
	pwm1_init();
    1750:	0e 94 b9 0b 	call	0x1772	; 0x1772 <pwm1_init>
	pwm2_init();
    1754:	0e 94 0c 0c 	call	0x1818	; 0x1818 <pwm2_init>
	pwm3_init();
    1758:	0e 94 5f 0c 	call	0x18be	; 0x18be <pwm3_init>
	pwm4_init();
    175c:	0e 94 af 0c 	call	0x195e	; 0x195e <pwm4_init>
	pwm5_init();
    1760:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <pwm5_init>
	pwm6_init();
    1764:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <pwm6_init>
	pwmalloff();
    1768:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <pwmalloff>

}
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <pwm1_init>:

void pwm1_init(){
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
	//works - Digitalpin 6
	DDRD |= (1<<PORTD6);
    177e:	aa e2       	ldi	r26, 0x2A	; 42
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	ea e2       	ldi	r30, 0x2A	; 42
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	80 64       	ori	r24, 0x40	; 64
    178a:	8c 93       	st	X, r24
	TCCR0A|=(1<<COM0A1)| (1<<WGM00)|(1<<WGM01); // Setup fastpwm with Clear OC0A on compare match and set at bottom
    178c:	a4 e4       	ldi	r26, 0x44	; 68
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e4 e4       	ldi	r30, 0x44	; 68
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	83 68       	ori	r24, 0x83	; 131
    1798:	8c 93       	st	X, r24

	TIMSK0 |= (1<<TOIE0);
    179a:	ae e6       	ldi	r26, 0x6E	; 110
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	ee e6       	ldi	r30, 0x6E	; 110
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	81 60       	ori	r24, 0x01	; 1
    17a6:	8c 93       	st	X, r24
	OCR0A = (pwmduty1/100.0)*255;
    17a8:	07 e4       	ldi	r16, 0x47	; 71
    17aa:	10 e0       	ldi	r17, 0x00	; 0
    17ac:	80 91 a3 02 	lds	r24, 0x02A3
    17b0:	88 2f       	mov	r24, r24
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	aa 27       	eor	r26, r26
    17b6:	97 fd       	sbrc	r25, 7
    17b8:	a0 95       	com	r26
    17ba:	ba 2f       	mov	r27, r26
    17bc:	bc 01       	movw	r22, r24
    17be:	cd 01       	movw	r24, r26
    17c0:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	bc 01       	movw	r22, r24
    17ca:	cd 01       	movw	r24, r26
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	48 ec       	ldi	r20, 0xC8	; 200
    17d2:	52 e4       	ldi	r21, 0x42	; 66
    17d4:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	bc 01       	movw	r22, r24
    17de:	cd 01       	movw	r24, r26
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	4f e7       	ldi	r20, 0x7F	; 127
    17e6:	53 e4       	ldi	r21, 0x43	; 67
    17e8:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	bc 01       	movw	r22, r24
    17f2:	cd 01       	movw	r24, r26
    17f4:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	f8 01       	movw	r30, r16
    17fe:	80 83       	st	Z, r24
	TCCR0B|=0x01;
    1800:	a5 e4       	ldi	r26, 0x45	; 69
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e5 e4       	ldi	r30, 0x45	; 69
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	81 60       	ori	r24, 0x01	; 1
    180c:	8c 93       	st	X, r24

}
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	08 95       	ret

00001818 <pwm2_init>:

void pwm2_init(){
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
//digitalpin 5
	DDRD |= (1<<PORTD5);
    1824:	aa e2       	ldi	r26, 0x2A	; 42
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	ea e2       	ldi	r30, 0x2A	; 42
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	80 62       	ori	r24, 0x20	; 32
    1830:	8c 93       	st	X, r24
	TCCR0A|=(1<<COM0B1)| (1<<WGM00)|(1<<WGM01);
    1832:	a4 e4       	ldi	r26, 0x44	; 68
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e4 e4       	ldi	r30, 0x44	; 68
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	83 62       	ori	r24, 0x23	; 35
    183e:	8c 93       	st	X, r24

	TIMSK0 |= (1<<TOIE0);
    1840:	ae e6       	ldi	r26, 0x6E	; 110
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	ee e6       	ldi	r30, 0x6E	; 110
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	81 60       	ori	r24, 0x01	; 1
    184c:	8c 93       	st	X, r24

	OCR0B = (pwmduty2/100.0)*255;
    184e:	08 e4       	ldi	r16, 0x48	; 72
    1850:	10 e0       	ldi	r17, 0x00	; 0
    1852:	80 91 a0 02 	lds	r24, 0x02A0
    1856:	88 2f       	mov	r24, r24
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	aa 27       	eor	r26, r26
    185c:	97 fd       	sbrc	r25, 7
    185e:	a0 95       	com	r26
    1860:	ba 2f       	mov	r27, r26
    1862:	bc 01       	movw	r22, r24
    1864:	cd 01       	movw	r24, r26
    1866:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	bc 01       	movw	r22, r24
    1870:	cd 01       	movw	r24, r26
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	48 ec       	ldi	r20, 0xC8	; 200
    1878:	52 e4       	ldi	r21, 0x42	; 66
    187a:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	bc 01       	movw	r22, r24
    1884:	cd 01       	movw	r24, r26
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	4f e7       	ldi	r20, 0x7F	; 127
    188c:	53 e4       	ldi	r21, 0x43	; 67
    188e:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	bc 01       	movw	r22, r24
    1898:	cd 01       	movw	r24, r26
    189a:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	f8 01       	movw	r30, r16
    18a4:	80 83       	st	Z, r24

	TCCR0B|=0x01;
    18a6:	a5 e4       	ldi	r26, 0x45	; 69
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e5 e4       	ldi	r30, 0x45	; 69
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	81 60       	ori	r24, 0x01	; 1
    18b2:	8c 93       	st	X, r24
}
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	08 95       	ret

000018be <pwm3_init>:

void pwm3_init(){
    18be:	0f 93       	push	r16
    18c0:	1f 93       	push	r17
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
//works - Digitalpin 3
	DDRD |= (1<<PORTD3);
    18ca:	aa e2       	ldi	r26, 0x2A	; 42
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	ea e2       	ldi	r30, 0x2A	; 42
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	88 60       	ori	r24, 0x08	; 8
    18d6:	8c 93       	st	X, r24
	TCCR2A|=(1<<COM2B1)| (1<<WGM20)|(1<<WGM21);
    18d8:	a0 eb       	ldi	r26, 0xB0	; 176
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e0 eb       	ldi	r30, 0xB0	; 176
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	83 62       	ori	r24, 0x23	; 35
    18e4:	8c 93       	st	X, r24

	TIMSK2 |= (1<<TOIE2);
    18e6:	a0 e7       	ldi	r26, 0x70	; 112
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e0 e7       	ldi	r30, 0x70	; 112
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	81 60       	ori	r24, 0x01	; 1
    18f2:	8c 93       	st	X, r24

	OCR2B = (pwmduty3/100.0)*255;
    18f4:	04 eb       	ldi	r16, 0xB4	; 180
    18f6:	10 e0       	ldi	r17, 0x00	; 0
    18f8:	80 91 a2 02 	lds	r24, 0x02A2
    18fc:	88 2f       	mov	r24, r24
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	aa 27       	eor	r26, r26
    1902:	97 fd       	sbrc	r25, 7
    1904:	a0 95       	com	r26
    1906:	ba 2f       	mov	r27, r26
    1908:	bc 01       	movw	r22, r24
    190a:	cd 01       	movw	r24, r26
    190c:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	bc 01       	movw	r22, r24
    1916:	cd 01       	movw	r24, r26
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	48 ec       	ldi	r20, 0xC8	; 200
    191e:	52 e4       	ldi	r21, 0x42	; 66
    1920:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	bc 01       	movw	r22, r24
    192a:	cd 01       	movw	r24, r26
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	4f e7       	ldi	r20, 0x7F	; 127
    1932:	53 e4       	ldi	r21, 0x43	; 67
    1934:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	bc 01       	movw	r22, r24
    193e:	cd 01       	movw	r24, r26
    1940:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	f8 01       	movw	r30, r16
    194a:	80 83       	st	Z, r24

	TCCR2B=0x01;
    194c:	e1 eb       	ldi	r30, 0xB1	; 177
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	80 83       	st	Z, r24
}
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	08 95       	ret

0000195e <pwm4_init>:

void pwm4_init(){
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
// digitalpin 11
	DDRB |= (1<<PORTB3);
    196a:	a4 e2       	ldi	r26, 0x24	; 36
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e4 e2       	ldi	r30, 0x24	; 36
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	88 60       	ori	r24, 0x08	; 8
    1976:	8c 93       	st	X, r24
	TCCR2A|=(1<<COM2A1)| (1<<WGM20)|(1<<WGM21);
    1978:	a0 eb       	ldi	r26, 0xB0	; 176
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e0 eb       	ldi	r30, 0xB0	; 176
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	83 68       	ori	r24, 0x83	; 131
    1984:	8c 93       	st	X, r24

	TIMSK2 |= (1<<TOIE2);
    1986:	a0 e7       	ldi	r26, 0x70	; 112
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e0 e7       	ldi	r30, 0x70	; 112
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	81 60       	ori	r24, 0x01	; 1
    1992:	8c 93       	st	X, r24

	OCR2A = (pwmduty4/100.0)*255;
    1994:	03 eb       	ldi	r16, 0xB3	; 179
    1996:	10 e0       	ldi	r17, 0x00	; 0
    1998:	80 91 a1 02 	lds	r24, 0x02A1
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	aa 27       	eor	r26, r26
    19a2:	97 fd       	sbrc	r25, 7
    19a4:	a0 95       	com	r26
    19a6:	ba 2f       	mov	r27, r26
    19a8:	bc 01       	movw	r22, r24
    19aa:	cd 01       	movw	r24, r26
    19ac:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	bc 01       	movw	r22, r24
    19b6:	cd 01       	movw	r24, r26
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	48 ec       	ldi	r20, 0xC8	; 200
    19be:	52 e4       	ldi	r21, 0x42	; 66
    19c0:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	bc 01       	movw	r22, r24
    19ca:	cd 01       	movw	r24, r26
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	4f e7       	ldi	r20, 0x7F	; 127
    19d2:	53 e4       	ldi	r21, 0x43	; 67
    19d4:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	bc 01       	movw	r22, r24
    19de:	cd 01       	movw	r24, r26
    19e0:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	f8 01       	movw	r30, r16
    19ea:	80 83       	st	Z, r24

	TCCR2B=0x01;
    19ec:	e1 eb       	ldi	r30, 0xB1	; 177
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	80 83       	st	Z, r24
}
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	1f 91       	pop	r17
    19fa:	0f 91       	pop	r16
    19fc:	08 95       	ret

000019fe <pwm5_init>:

void pwm5_init(){
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
// digitalpin 9 - Servo 1
	DDRB |= (1 << DDB1);
    1a06:	a4 e2       	ldi	r26, 0x24	; 36
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e4 e2       	ldi	r30, 0x24	; 36
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	82 60       	ori	r24, 0x02	; 2
    1a12:	8c 93       	st	X, r24

	TCCR1A |= (0b10 << COM1A0) | (0b10 << WGM10);
    1a14:	a0 e8       	ldi	r26, 0x80	; 128
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e0 e8       	ldi	r30, 0x80	; 128
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	82 68       	ori	r24, 0x82	; 130
    1a20:	8c 93       	st	X, r24

	TIMSK1 = (1 << TOIE1) | (1 << OCIE1A);
    1a22:	ef e6       	ldi	r30, 0x6F	; 111
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	83 e0       	ldi	r24, 0x03	; 3
    1a28:	80 83       	st	Z, r24

	OCR1AH = (SERVO_MIN & 0xFF00) >> 8;
    1a2a:	e9 e8       	ldi	r30, 0x89	; 137
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	83 e0       	ldi	r24, 0x03	; 3
    1a30:	80 83       	st	Z, r24
	OCR1AL = (SERVO_MIN & 0x00FF);
    1a32:	e8 e8       	ldi	r30, 0x88	; 136
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	87 ee       	ldi	r24, 0xE7	; 231
    1a38:	80 83       	st	Z, r24

	ICR1H = (PWM_TOP & 0xFF00) >> 8;
    1a3a:	e7 e8       	ldi	r30, 0x87	; 135
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	8c e9       	ldi	r24, 0x9C	; 156
    1a40:	80 83       	st	Z, r24
	ICR1L = (PWM_TOP & 0x00FF);
    1a42:	e6 e8       	ldi	r30, 0x86	; 134
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	8f e3       	ldi	r24, 0x3F	; 63
    1a48:	80 83       	st	Z, r24


	TCCR1B = (0b11 << WGM12) | (0b010 << CS10);
    1a4a:	e1 e8       	ldi	r30, 0x81	; 129
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	8a e1       	ldi	r24, 0x1A	; 26
    1a50:	80 83       	st	Z, r24

}
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	08 95       	ret

00001a58 <pwm6_init>:

void pwm6_init(){
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
// digitalpin 10 - Servo 2
	DDRB |= (1<<DDB2);
    1a60:	a4 e2       	ldi	r26, 0x24	; 36
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e4 e2       	ldi	r30, 0x24	; 36
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	84 60       	ori	r24, 0x04	; 4
    1a6c:	8c 93       	st	X, r24
	TCCR1A |= (0b10 << COM1B0) | (0b10 << WGM10);
    1a6e:	a0 e8       	ldi	r26, 0x80	; 128
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e0 e8       	ldi	r30, 0x80	; 128
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	82 62       	ori	r24, 0x22	; 34
    1a7a:	8c 93       	st	X, r24
	TIMSK1 = (1 << TOIE1) | (1 << OCIE1A);
    1a7c:	ef e6       	ldi	r30, 0x6F	; 111
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	83 e0       	ldi	r24, 0x03	; 3
    1a82:	80 83       	st	Z, r24

	OCR1BH = (SERVO_MIN & 0xFF00) >> 8;
    1a84:	eb e8       	ldi	r30, 0x8B	; 139
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	83 e0       	ldi	r24, 0x03	; 3
    1a8a:	80 83       	st	Z, r24
	OCR1BL = (SERVO_MIN & 0x00FF);
    1a8c:	ea e8       	ldi	r30, 0x8A	; 138
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	87 ee       	ldi	r24, 0xE7	; 231
    1a92:	80 83       	st	Z, r24

	ICR1H = (PWM_TOP & 0xFF00) >> 8;
    1a94:	e7 e8       	ldi	r30, 0x87	; 135
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	8c e9       	ldi	r24, 0x9C	; 156
    1a9a:	80 83       	st	Z, r24
	ICR1L = (PWM_TOP & 0x00FF);
    1a9c:	e6 e8       	ldi	r30, 0x86	; 134
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	8f e3       	ldi	r24, 0x3F	; 63
    1aa2:	80 83       	st	Z, r24

	TCCR1B = (0b11 << WGM12) | (0b010 << CS10);
    1aa4:	e1 e8       	ldi	r30, 0x81	; 129
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	8a e1       	ldi	r24, 0x1A	; 26
    1aaa:	80 83       	st	Z, r24

}
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <update_pwm>:

static void update_pwm(unsigned int newvalue){
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <update_pwm+0x6>
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	9a 83       	std	Y+2, r25	; 0x02
    1abe:	89 83       	std	Y+1, r24	; 0x01
	pwm_ready = 1;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	80 93 8f 02 	sts	0x028F, r24
	while(pwm_ready != 0);
    1ac6:	80 91 8f 02 	lds	r24, 0x028F
    1aca:	88 23       	and	r24, r24
    1acc:	e1 f7       	brne	.-8      	; 0x1ac6 <update_pwm+0x14>
	OCR1AH = (newvalue & 0xFF00) >> 8;
    1ace:	e9 e8       	ldi	r30, 0x89	; 137
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad6:	89 2f       	mov	r24, r25
    1ad8:	99 27       	eor	r25, r25
    1ada:	80 83       	st	Z, r24
	OCR1AL = (newvalue & 0x00FF);
    1adc:	e8 e8       	ldi	r30, 0x88	; 136
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	80 83       	st	Z, r24
}
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	08 95       	ret

00001aee <update_pwm2>:

static void update_pwm2(unsigned int newvalue){
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <update_pwm2+0x6>
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	9a 83       	std	Y+2, r25	; 0x02
    1afa:	89 83       	std	Y+1, r24	; 0x01
	pwm_ready = 1;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	80 93 8f 02 	sts	0x028F, r24
	while(pwm_ready != 0);
    1b02:	80 91 8f 02 	lds	r24, 0x028F
    1b06:	88 23       	and	r24, r24
    1b08:	e1 f7       	brne	.-8      	; 0x1b02 <update_pwm2+0x14>
	OCR1BH = (newvalue & 0xFF00) >> 8;
    1b0a:	eb e8       	ldi	r30, 0x8B	; 139
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	9a 81       	ldd	r25, Y+2	; 0x02
    1b12:	89 2f       	mov	r24, r25
    1b14:	99 27       	eor	r25, r25
    1b16:	80 83       	st	Z, r24
	OCR1BL = (newvalue & 0x00FF);
    1b18:	ea e8       	ldi	r30, 0x8A	; 138
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	80 83       	st	Z, r24
}
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	08 95       	ret

00001b2a <servo_set>:

void servo_set(unsigned int deg,unsigned int max_deg){
    1b2a:	ef 92       	push	r14
    1b2c:	ff 92       	push	r15
    1b2e:	0f 93       	push	r16
    1b30:	1f 93       	push	r17
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	2a 97       	sbiw	r28, 0x0a	; 10
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	98 87       	std	Y+8, r25	; 0x08
    1b48:	8f 83       	std	Y+7, r24	; 0x07
    1b4a:	7a 87       	std	Y+10, r23	; 0x0a
    1b4c:	69 87       	std	Y+9, r22	; 0x09

	float set = (float)deg / (float)max_deg;
    1b4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b50:	98 85       	ldd	r25, Y+8	; 0x08
    1b52:	cc 01       	movw	r24, r24
    1b54:	a0 e0       	ldi	r26, 0x00	; 0
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	bc 01       	movw	r22, r24
    1b5a:	cd 01       	movw	r24, r26
    1b5c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__floatunsisf>
    1b60:	7b 01       	movw	r14, r22
    1b62:	8c 01       	movw	r16, r24
    1b64:	89 85       	ldd	r24, Y+9	; 0x09
    1b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b68:	cc 01       	movw	r24, r24
    1b6a:	a0 e0       	ldi	r26, 0x00	; 0
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	bc 01       	movw	r22, r24
    1b70:	cd 01       	movw	r24, r26
    1b72:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__floatunsisf>
    1b76:	9b 01       	movw	r18, r22
    1b78:	ac 01       	movw	r20, r24
    1b7a:	c8 01       	movw	r24, r16
    1b7c:	b7 01       	movw	r22, r14
    1b7e:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	8b 83       	std	Y+3, r24	; 0x03
    1b88:	9c 83       	std	Y+4, r25	; 0x04
    1b8a:	ad 83       	std	Y+5, r26	; 0x05
    1b8c:	be 83       	std	Y+6, r27	; 0x06

	set = (((float)SERVO_MX-(float)SERVO_MIN)*set) + (float)SERVO_MIN;
    1b8e:	6b 81       	ldd	r22, Y+3	; 0x03
    1b90:	7c 81       	ldd	r23, Y+4	; 0x04
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	9e 81       	ldd	r25, Y+6	; 0x06
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	4a e7       	ldi	r20, 0x7A	; 122
    1b9c:	55 e4       	ldi	r21, 0x45	; 69
    1b9e:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 ec       	ldi	r19, 0xC0	; 192
    1bae:	49 e7       	ldi	r20, 0x79	; 121
    1bb0:	54 e4       	ldi	r21, 0x44	; 68
    1bb2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__addsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	8b 83       	std	Y+3, r24	; 0x03
    1bbc:	9c 83       	std	Y+4, r25	; 0x04
    1bbe:	ad 83       	std	Y+5, r26	; 0x05
    1bc0:	be 83       	std	Y+6, r27	; 0x06

	unsigned int newvalue = (unsigned int)set;
    1bc2:	6b 81       	ldd	r22, Y+3	; 0x03
    1bc4:	7c 81       	ldd	r23, Y+4	; 0x04
    1bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bca:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	9a 83       	std	Y+2, r25	; 0x02
    1bd4:	89 83       	std	Y+1, r24	; 0x01

	update_pwm(newvalue);
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bda:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <update_pwm>

}
    1bde:	2a 96       	adiw	r28, 0x0a	; 10
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	1f 91       	pop	r17
    1bf0:	0f 91       	pop	r16
    1bf2:	ff 90       	pop	r15
    1bf4:	ef 90       	pop	r14
    1bf6:	08 95       	ret

00001bf8 <servo2_set>:
void servo2_set(unsigned int deg,unsigned int max_deg){
    1bf8:	ef 92       	push	r14
    1bfa:	ff 92       	push	r15
    1bfc:	0f 93       	push	r16
    1bfe:	1f 93       	push	r17
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	2a 97       	sbiw	r28, 0x0a	; 10
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	f8 94       	cli
    1c0e:	de bf       	out	0x3e, r29	; 62
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	cd bf       	out	0x3d, r28	; 61
    1c14:	98 87       	std	Y+8, r25	; 0x08
    1c16:	8f 83       	std	Y+7, r24	; 0x07
    1c18:	7a 87       	std	Y+10, r23	; 0x0a
    1c1a:	69 87       	std	Y+9, r22	; 0x09

	float set = (float)deg / (float)max_deg;
    1c1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c1e:	98 85       	ldd	r25, Y+8	; 0x08
    1c20:	cc 01       	movw	r24, r24
    1c22:	a0 e0       	ldi	r26, 0x00	; 0
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	bc 01       	movw	r22, r24
    1c28:	cd 01       	movw	r24, r26
    1c2a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__floatunsisf>
    1c2e:	7b 01       	movw	r14, r22
    1c30:	8c 01       	movw	r16, r24
    1c32:	89 85       	ldd	r24, Y+9	; 0x09
    1c34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c36:	cc 01       	movw	r24, r24
    1c38:	a0 e0       	ldi	r26, 0x00	; 0
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	bc 01       	movw	r22, r24
    1c3e:	cd 01       	movw	r24, r26
    1c40:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__floatunsisf>
    1c44:	9b 01       	movw	r18, r22
    1c46:	ac 01       	movw	r20, r24
    1c48:	c8 01       	movw	r24, r16
    1c4a:	b7 01       	movw	r22, r14
    1c4c:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	8b 83       	std	Y+3, r24	; 0x03
    1c56:	9c 83       	std	Y+4, r25	; 0x04
    1c58:	ad 83       	std	Y+5, r26	; 0x05
    1c5a:	be 83       	std	Y+6, r27	; 0x06

	set = (((float)SERVO_MX-(float)SERVO_MIN)*set) + (float)SERVO_MIN;
    1c5c:	6b 81       	ldd	r22, Y+3	; 0x03
    1c5e:	7c 81       	ldd	r23, Y+4	; 0x04
    1c60:	8d 81       	ldd	r24, Y+5	; 0x05
    1c62:	9e 81       	ldd	r25, Y+6	; 0x06
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	4a e7       	ldi	r20, 0x7A	; 122
    1c6a:	55 e4       	ldi	r21, 0x45	; 69
    1c6c:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	bc 01       	movw	r22, r24
    1c76:	cd 01       	movw	r24, r26
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 ec       	ldi	r19, 0xC0	; 192
    1c7c:	49 e7       	ldi	r20, 0x79	; 121
    1c7e:	54 e4       	ldi	r21, 0x44	; 68
    1c80:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__addsf3>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	8b 83       	std	Y+3, r24	; 0x03
    1c8a:	9c 83       	std	Y+4, r25	; 0x04
    1c8c:	ad 83       	std	Y+5, r26	; 0x05
    1c8e:	be 83       	std	Y+6, r27	; 0x06

	unsigned int newvalue = (unsigned int)set;
    1c90:	6b 81       	ldd	r22, Y+3	; 0x03
    1c92:	7c 81       	ldd	r23, Y+4	; 0x04
    1c94:	8d 81       	ldd	r24, Y+5	; 0x05
    1c96:	9e 81       	ldd	r25, Y+6	; 0x06
    1c98:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	9a 83       	std	Y+2, r25	; 0x02
    1ca2:	89 83       	std	Y+1, r24	; 0x01

	update_pwm2(newvalue);
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca8:	0e 94 77 0d 	call	0x1aee	; 0x1aee <update_pwm2>

}
    1cac:	2a 96       	adiw	r28, 0x0a	; 10
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	de bf       	out	0x3e, r29	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	1f 91       	pop	r17
    1cbe:	0f 91       	pop	r16
    1cc0:	ff 90       	pop	r15
    1cc2:	ef 90       	pop	r14
    1cc4:	08 95       	ret

00001cc6 <pwm1off>:

void pwm1off(){
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
	TCCR0A&=~(1<<COM0A1);
    1cce:	a4 e4       	ldi	r26, 0x44	; 68
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e4 e4       	ldi	r30, 0x44	; 68
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	8f 77       	andi	r24, 0x7F	; 127
    1cda:	8c 93       	st	X, r24
}
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <pwm2off>:

void pwm2off(){
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
	TCCR0A&=~(1<<COM0B1);
    1cea:	a4 e4       	ldi	r26, 0x44	; 68
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	e4 e4       	ldi	r30, 0x44	; 68
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	8f 7d       	andi	r24, 0xDF	; 223
    1cf6:	8c 93       	st	X, r24
}
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <pwm3off>:
void pwm3off(){
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
	TCCR2A&=~(1<<COM2A1);
    1d06:	a0 eb       	ldi	r26, 0xB0	; 176
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e0 eb       	ldi	r30, 0xB0	; 176
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	8f 77       	andi	r24, 0x7F	; 127
    1d12:	8c 93       	st	X, r24
}
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <pwm4off>:

void pwm4off(){
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
	TCCR2A&=~(1<<COM2B1);
    1d22:	a0 eb       	ldi	r26, 0xB0	; 176
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e0 eb       	ldi	r30, 0xB0	; 176
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	8f 7d       	andi	r24, 0xDF	; 223
    1d2e:	8c 93       	st	X, r24
}
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <pwm1on>:
void pwm1on(){
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
	TCCR0A|=(1<<COM0A1);
    1d3e:	a4 e4       	ldi	r26, 0x44	; 68
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e4 e4       	ldi	r30, 0x44	; 68
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	80 68       	ori	r24, 0x80	; 128
    1d4a:	8c 93       	st	X, r24
}
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <pwm2on>:

void pwm2on(){
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
	TCCR0A|=(1<<COM0B1);
    1d5a:	a4 e4       	ldi	r26, 0x44	; 68
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e4 e4       	ldi	r30, 0x44	; 68
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	80 62       	ori	r24, 0x20	; 32
    1d66:	8c 93       	st	X, r24
}
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	08 95       	ret

00001d6e <pwm3on>:
void pwm3on(){
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
	TCCR2A|=(1<<COM2A1);
    1d76:	a0 eb       	ldi	r26, 0xB0	; 176
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e0 eb       	ldi	r30, 0xB0	; 176
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	80 68       	ori	r24, 0x80	; 128
    1d82:	8c 93       	st	X, r24
}
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <pwm4on>:

void pwm4on(){
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
	TCCR2A|=(1<<COM2B1);
    1d92:	a0 eb       	ldi	r26, 0xB0	; 176
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e0 eb       	ldi	r30, 0xB0	; 176
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	80 62       	ori	r24, 0x20	; 32
    1d9e:	8c 93       	st	X, r24
}
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <pwmalloff>:

void pwmalloff(){
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
	pwm1off();
    1dae:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <pwm1off>
	pwm2off();
    1db2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <pwm2off>
	pwm3off();
    1db6:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <pwm3off>
	pwm4off();
    1dba:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <pwm4off>
}
    1dbe:	cf 91       	pop	r28
    1dc0:	df 91       	pop	r29
    1dc2:	08 95       	ret

00001dc4 <__vector_16>:

ISR(TIMER0_OVF_vect){
    1dc4:	1f 92       	push	r1
    1dc6:	0f 92       	push	r0
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	0f 92       	push	r0
    1dcc:	11 24       	eor	r1, r1
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
//	else TCCR0A|=(1<<COM0A1);
//	if(pwmduty2==0) TCCR0A&=~(1<<COM0B1);
//	else TCCR0A|=(1<<COM0B1);


}
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	0f 90       	pop	r0
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	0f 90       	pop	r0
    1de0:	1f 90       	pop	r1
    1de2:	18 95       	reti

00001de4 <__vector_13>:
ISR(TIMER1_OVF_vect){
    1de4:	1f 92       	push	r1
    1de6:	0f 92       	push	r0
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	0f 92       	push	r0
    1dec:	11 24       	eor	r1, r1
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
	pwm_ready = 0;
    1df6:	10 92 8f 02 	sts	0x028F, r1
}
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	0f 90       	pop	r0
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	0f 90       	pop	r0
    1e04:	1f 90       	pop	r1
    1e06:	18 95       	reti

00001e08 <__vector_11>:

ISR(TIMER1_COMPA_vect){
    1e08:	1f 92       	push	r1
    1e0a:	0f 92       	push	r0
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	0f 92       	push	r0
    1e10:	11 24       	eor	r1, r1
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62

}
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	0f 90       	pop	r0
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	0f 90       	pop	r0
    1e24:	1f 90       	pop	r1
    1e26:	18 95       	reti

00001e28 <__vector_9>:
ISR(TIMER2_OVF_vect){
    1e28:	1f 92       	push	r1
    1e2a:	0f 92       	push	r0
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	0f 92       	push	r0
    1e30:	11 24       	eor	r1, r1
    1e32:	8f 93       	push	r24
    1e34:	9f 93       	push	r25
    1e36:	af 93       	push	r26
    1e38:	bf 93       	push	r27
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
//	if(pwmduty3==0) TCCR2A&=~(1<<COM2A1);
//	else TCCR2A|=(1<<COM2A1);
//	if(pwmduty4==0) TCCR2A&=~(1<<COM2B1);
//	else TCCR2A|=(1<<COM2B1);
	clockcount1++;
    1e42:	80 91 98 02 	lds	r24, 0x0298
    1e46:	90 91 99 02 	lds	r25, 0x0299
    1e4a:	a0 91 9a 02 	lds	r26, 0x029A
    1e4e:	b0 91 9b 02 	lds	r27, 0x029B
    1e52:	01 96       	adiw	r24, 0x01	; 1
    1e54:	a1 1d       	adc	r26, r1
    1e56:	b1 1d       	adc	r27, r1
    1e58:	80 93 98 02 	sts	0x0298, r24
    1e5c:	90 93 99 02 	sts	0x0299, r25
    1e60:	a0 93 9a 02 	sts	0x029A, r26
    1e64:	b0 93 9b 02 	sts	0x029B, r27
	clockcount++;
    1e68:	80 91 9c 02 	lds	r24, 0x029C
    1e6c:	90 91 9d 02 	lds	r25, 0x029D
    1e70:	a0 91 9e 02 	lds	r26, 0x029E
    1e74:	b0 91 9f 02 	lds	r27, 0x029F
    1e78:	01 96       	adiw	r24, 0x01	; 1
    1e7a:	a1 1d       	adc	r26, r1
    1e7c:	b1 1d       	adc	r27, r1
    1e7e:	80 93 9c 02 	sts	0x029C, r24
    1e82:	90 93 9d 02 	sts	0x029D, r25
    1e86:	a0 93 9e 02 	sts	0x029E, r26
    1e8a:	b0 93 9f 02 	sts	0x029F, r27
}
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	bf 91       	pop	r27
    1e94:	af 91       	pop	r26
    1e96:	9f 91       	pop	r25
    1e98:	8f 91       	pop	r24
    1e9a:	0f 90       	pop	r0
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	0f 90       	pop	r0
    1ea0:	1f 90       	pop	r1
    1ea2:	18 95       	reti

00001ea4 <Init_Uart>:

volatile char cRx[10];
volatile int charcounter;


void Init_Uart(){
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <Init_Uart+0x6>
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
	UBRR0H=0;
    1eae:	e5 ec       	ldi	r30, 0xC5	; 197
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	10 82       	st	Z, r1
	UBRR0L = 16;
    1eb4:	e4 ec       	ldi	r30, 0xC4	; 196
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 e1       	ldi	r24, 0x10	; 16
    1eba:	80 83       	st	Z, r24
	UCSR0B=(1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
    1ebc:	e1 ec       	ldi	r30, 0xC1	; 193
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	88 e9       	ldi	r24, 0x98	; 152
    1ec2:	80 83       	st	Z, r24
	UCSR0C=(1<<USBS0)|(3<<UCSZ00);
    1ec4:	e2 ec       	ldi	r30, 0xC2	; 194
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	8e e0       	ldi	r24, 0x0E	; 14
    1eca:	80 83       	st	Z, r24

	for(int i=0;i<10;i++){
    1ecc:	1a 82       	std	Y+2, r1	; 0x02
    1ece:	19 82       	std	Y+1, r1	; 0x01
    1ed0:	0c c0       	rjmp	.+24     	; 0x1eea <Init_Uart+0x46>
		cRx[i]='0';
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	ea 55       	subi	r30, 0x5A	; 90
    1eda:	fd 4f       	sbci	r31, 0xFD	; 253
    1edc:	80 e3       	ldi	r24, 0x30	; 48
    1ede:	80 83       	st	Z, r24
	UBRR0H=0;
	UBRR0L = 16;
	UCSR0B=(1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
	UCSR0C=(1<<USBS0)|(3<<UCSZ00);

	for(int i=0;i<10;i++){
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee4:	01 96       	adiw	r24, 0x01	; 1
    1ee6:	9a 83       	std	Y+2, r25	; 0x02
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	9a 81       	ldd	r25, Y+2	; 0x02
    1eee:	8a 30       	cpi	r24, 0x0A	; 10
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	7c f3       	brlt	.-34     	; 0x1ed2 <Init_Uart+0x2e>
		cRx[i]='0';
	}
	cRx[10]='\0';
    1ef4:	10 92 b0 02 	sts	0x02B0, r1
}
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <nibbletohexvalue>:

char nibbletohexvalue( char nibblebyte){
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <nibbletohexvalue+0x6>
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	89 83       	std	Y+1, r24	; 0x01
	nibblebyte = nibblebyte & 0x0F;
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	8f 70       	andi	r24, 0x0F	; 15
    1f12:	89 83       	std	Y+1, r24	; 0x01

	if((nibblebyte>=0)&&(nibblebyte<10)){
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	8a 30       	cpi	r24, 0x0A	; 10
    1f18:	28 f4       	brcc	.+10     	; 0x1f24 <nibbletohexvalue+0x22>
		return '0'+nibblebyte;
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	98 2f       	mov	r25, r24
    1f1e:	90 5d       	subi	r25, 0xD0	; 208
    1f20:	9a 83       	std	Y+2, r25	; 0x02
    1f22:	0d c0       	rjmp	.+26     	; 0x1f3e <nibbletohexvalue+0x3c>
	}
	else if (( nibblebyte >= 10) && ( nibblebyte <= 15)){
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	8a 30       	cpi	r24, 0x0A	; 10
    1f28:	40 f0       	brcs	.+16     	; 0x1f3a <nibbletohexvalue+0x38>
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	80 31       	cpi	r24, 0x10	; 16
    1f2e:	28 f4       	brcc	.+10     	; 0x1f3a <nibbletohexvalue+0x38>
		return 'A'+(nibblebyte-10);
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	98 2f       	mov	r25, r24
    1f34:	99 5c       	subi	r25, 0xC9	; 201
    1f36:	9a 83       	std	Y+2, r25	; 0x02
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <nibbletohexvalue+0x3c>
	}
	return '-';
    1f3a:	8d e2       	ldi	r24, 0x2D	; 45
    1f3c:	8a 83       	std	Y+2, r24	; 0x02
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <printhexbyte>:

void printhexbyte(char inputchar){
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	29 97       	sbiw	r28, 0x09	; 9
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	89 87       	std	Y+9, r24	; 0x09
	char temps[3];
	temps[0]='0';
    1f60:	80 e3       	ldi	r24, 0x30	; 48
    1f62:	8e 83       	std	Y+6, r24	; 0x06
	temps[1]='x';
    1f64:	88 e7       	ldi	r24, 0x78	; 120
    1f66:	8f 83       	std	Y+7, r24	; 0x07
	char ln=nibbletohexvalue(inputchar);
    1f68:	89 85       	ldd	r24, Y+9	; 0x09
    1f6a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <nibbletohexvalue>
    1f6e:	8d 83       	std	Y+5, r24	; 0x05
	char hn=nibbletohexvalue(inputchar>>4);
    1f70:	89 85       	ldd	r24, Y+9	; 0x09
    1f72:	82 95       	swap	r24
    1f74:	8f 70       	andi	r24, 0x0F	; 15
    1f76:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <nibbletohexvalue>
    1f7a:	8c 83       	std	Y+4, r24	; 0x04
	temps[2]=hn;
    1f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7e:	88 87       	std	Y+8, r24	; 0x08
	temps[3]=ln;
    1f80:	8d 81       	ldd	r24, Y+5	; 0x05
    1f82:	89 87       	std	Y+9, r24	; 0x09

	for (int i=0;i<=3;i++){
    1f84:	1b 82       	std	Y+3, r1	; 0x03
    1f86:	1a 82       	std	Y+2, r1	; 0x02
    1f88:	16 c0       	rjmp	.+44     	; 0x1fb6 <printhexbyte+0x6c>
	 char	printchar=temps[i];
    1f8a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f8c:	3b 81       	ldd	r19, Y+3	; 0x03
    1f8e:	ce 01       	movw	r24, r28
    1f90:	06 96       	adiw	r24, 0x06	; 6
    1f92:	fc 01       	movw	r30, r24
    1f94:	e2 0f       	add	r30, r18
    1f96:	f3 1f       	adc	r31, r19
    1f98:	80 81       	ld	r24, Z
    1f9a:	89 83       	std	Y+1, r24	; 0x01

	UDR0=printchar;
    1f9c:	e6 ec       	ldi	r30, 0xC6	; 198
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	80 83       	st	Z, r24
	delay_ms(1);
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
	char ln=nibbletohexvalue(inputchar);
	char hn=nibbletohexvalue(inputchar>>4);
	temps[2]=hn;
	temps[3]=ln;

	for (int i=0;i<=3;i++){
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb0:	01 96       	adiw	r24, 0x01	; 1
    1fb2:	9b 83       	std	Y+3, r25	; 0x03
    1fb4:	8a 83       	std	Y+2, r24	; 0x02
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fba:	84 30       	cpi	r24, 0x04	; 4
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	2c f3       	brlt	.-54     	; 0x1f8a <printhexbyte+0x40>
	 char	printchar=temps[i];

	UDR0=printchar;
	delay_ms(1);
	}
}
    1fc0:	29 96       	adiw	r28, 0x09	; 9
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <printint>:


void printint(int inputint){
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	2c 97       	sbiw	r28, 0x0c	; 12
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	9c 87       	std	Y+12, r25	; 0x0c
    1fe8:	8b 87       	std	Y+11, r24	; 0x0b
	char upbyte=inputint>>8;
    1fea:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fec:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fee:	89 2f       	mov	r24, r25
    1ff0:	99 0f       	add	r25, r25
    1ff2:	99 0b       	sbc	r25, r25
    1ff4:	8d 83       	std	Y+5, r24	; 0x05
	char lowerbyte =inputint& 0xFF;
    1ff6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ff8:	8c 83       	std	Y+4, r24	; 0x04
	char tempi[5];
	tempi[0]='0';
    1ffa:	80 e3       	ldi	r24, 0x30	; 48
    1ffc:	8e 83       	std	Y+6, r24	; 0x06
	tempi[1]='x';
    1ffe:	88 e7       	ldi	r24, 0x78	; 120
    2000:	8f 83       	std	Y+7, r24	; 0x07
	tempi[2]=nibbletohexvalue(upbyte>>4);
    2002:	8d 81       	ldd	r24, Y+5	; 0x05
    2004:	82 95       	swap	r24
    2006:	8f 70       	andi	r24, 0x0F	; 15
    2008:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <nibbletohexvalue>
    200c:	88 87       	std	Y+8, r24	; 0x08
	tempi[3]=nibbletohexvalue(upbyte);
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <nibbletohexvalue>
    2014:	89 87       	std	Y+9, r24	; 0x09
	tempi[4]=nibbletohexvalue(lowerbyte>>4);
    2016:	8c 81       	ldd	r24, Y+4	; 0x04
    2018:	82 95       	swap	r24
    201a:	8f 70       	andi	r24, 0x0F	; 15
    201c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <nibbletohexvalue>
    2020:	8a 87       	std	Y+10, r24	; 0x0a
	tempi[5]=nibbletohexvalue(lowerbyte);
    2022:	8c 81       	ldd	r24, Y+4	; 0x04
    2024:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <nibbletohexvalue>
    2028:	8b 87       	std	Y+11, r24	; 0x0b
	for (int i=0;i<=5;i++){
    202a:	1b 82       	std	Y+3, r1	; 0x03
    202c:	1a 82       	std	Y+2, r1	; 0x02
    202e:	16 c0       	rjmp	.+44     	; 0x205c <printint+0x8a>
	 char	printchar=tempi[i];
    2030:	2a 81       	ldd	r18, Y+2	; 0x02
    2032:	3b 81       	ldd	r19, Y+3	; 0x03
    2034:	ce 01       	movw	r24, r28
    2036:	06 96       	adiw	r24, 0x06	; 6
    2038:	fc 01       	movw	r30, r24
    203a:	e2 0f       	add	r30, r18
    203c:	f3 1f       	adc	r31, r19
    203e:	80 81       	ld	r24, Z
    2040:	89 83       	std	Y+1, r24	; 0x01

	UDR0=printchar;
    2042:	e6 ec       	ldi	r30, 0xC6	; 198
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	80 83       	st	Z, r24
	delay_ms(1);
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
	tempi[1]='x';
	tempi[2]=nibbletohexvalue(upbyte>>4);
	tempi[3]=nibbletohexvalue(upbyte);
	tempi[4]=nibbletohexvalue(lowerbyte>>4);
	tempi[5]=nibbletohexvalue(lowerbyte);
	for (int i=0;i<=5;i++){
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	9b 81       	ldd	r25, Y+3	; 0x03
    2056:	01 96       	adiw	r24, 0x01	; 1
    2058:	9b 83       	std	Y+3, r25	; 0x03
    205a:	8a 83       	std	Y+2, r24	; 0x02
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	9b 81       	ldd	r25, Y+3	; 0x03
    2060:	86 30       	cpi	r24, 0x06	; 6
    2062:	91 05       	cpc	r25, r1
    2064:	2c f3       	brlt	.-54     	; 0x2030 <printint+0x5e>
	 char	printchar=tempi[i];

	UDR0=printchar;
	delay_ms(1);
	}
}
    2066:	2c 96       	adiw	r28, 0x0c	; 12
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <printlong>:
void printlong(long inputlong){
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    2080:	64 97       	sbiw	r28, 0x14	; 20
    2082:	0f b6       	in	r0, 0x3f	; 63
    2084:	f8 94       	cli
    2086:	de bf       	out	0x3e, r29	; 62
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	cd bf       	out	0x3d, r28	; 61
    208c:	69 8b       	std	Y+17, r22	; 0x11
    208e:	7a 8b       	std	Y+18, r23	; 0x12
    2090:	8b 8b       	std	Y+19, r24	; 0x13
    2092:	9c 8b       	std	Y+20, r25	; 0x14
	char byte1=inputlong&0xFF;
    2094:	89 89       	ldd	r24, Y+17	; 0x11
    2096:	8f 83       	std	Y+7, r24	; 0x07
	char byte2=(inputlong>>8)&0xFF;
    2098:	89 89       	ldd	r24, Y+17	; 0x11
    209a:	9a 89       	ldd	r25, Y+18	; 0x12
    209c:	ab 89       	ldd	r26, Y+19	; 0x13
    209e:	bc 89       	ldd	r27, Y+20	; 0x14
    20a0:	89 2f       	mov	r24, r25
    20a2:	9a 2f       	mov	r25, r26
    20a4:	ab 2f       	mov	r26, r27
    20a6:	bb 27       	eor	r27, r27
    20a8:	a7 fd       	sbrc	r26, 7
    20aa:	ba 95       	dec	r27
    20ac:	8e 83       	std	Y+6, r24	; 0x06
	char byte3=(inputlong>>16)&0xFF;
    20ae:	89 89       	ldd	r24, Y+17	; 0x11
    20b0:	9a 89       	ldd	r25, Y+18	; 0x12
    20b2:	ab 89       	ldd	r26, Y+19	; 0x13
    20b4:	bc 89       	ldd	r27, Y+20	; 0x14
    20b6:	cd 01       	movw	r24, r26
    20b8:	bb 27       	eor	r27, r27
    20ba:	97 fd       	sbrc	r25, 7
    20bc:	b0 95       	com	r27
    20be:	ab 2f       	mov	r26, r27
    20c0:	8d 83       	std	Y+5, r24	; 0x05
	char byte4=(inputlong>>24)&0xFF;
    20c2:	89 89       	ldd	r24, Y+17	; 0x11
    20c4:	9a 89       	ldd	r25, Y+18	; 0x12
    20c6:	ab 89       	ldd	r26, Y+19	; 0x13
    20c8:	bc 89       	ldd	r27, Y+20	; 0x14
    20ca:	8b 2f       	mov	r24, r27
    20cc:	99 27       	eor	r25, r25
    20ce:	aa 27       	eor	r26, r26
    20d0:	bb 27       	eor	r27, r27
    20d2:	8c 83       	std	Y+4, r24	; 0x04
	char templ[9];
	templ[0]='0';
    20d4:	80 e3       	ldi	r24, 0x30	; 48
    20d6:	88 87       	std	Y+8, r24	; 0x08
	templ[1]='x';
    20d8:	88 e7       	ldi	r24, 0x78	; 120
    20da:	89 87       	std	Y+9, r24	; 0x09
	templ[2]=nibbletohexvalue(byte4>>4);
    20dc:	8c 81       	ldd	r24, Y+4	; 0x04
    20de:	82 95       	swap	r24
    20e0:	8f 70       	andi	r24, 0x0F	; 15
    20e2:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <nibbletohexvalue>
    20e6:	8a 87       	std	Y+10, r24	; 0x0a
	templ[3]=nibbletohexvalue(byte4);
    20e8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ea:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <nibbletohexvalue>
    20ee:	8b 87       	std	Y+11, r24	; 0x0b
	templ[4]=nibbletohexvalue(byte3>>4);
    20f0:	8d 81       	ldd	r24, Y+5	; 0x05
    20f2:	82 95       	swap	r24
    20f4:	8f 70       	andi	r24, 0x0F	; 15
    20f6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <nibbletohexvalue>
    20fa:	8c 87       	std	Y+12, r24	; 0x0c
	templ[5]=nibbletohexvalue(byte3);
    20fc:	8d 81       	ldd	r24, Y+5	; 0x05
    20fe:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <nibbletohexvalue>
    2102:	8d 87       	std	Y+13, r24	; 0x0d
	templ[6]=nibbletohexvalue(byte2>>4);
    2104:	8e 81       	ldd	r24, Y+6	; 0x06
    2106:	82 95       	swap	r24
    2108:	8f 70       	andi	r24, 0x0F	; 15
    210a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <nibbletohexvalue>
    210e:	8e 87       	std	Y+14, r24	; 0x0e
	templ[7]=nibbletohexvalue(byte2);
    2110:	8e 81       	ldd	r24, Y+6	; 0x06
    2112:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <nibbletohexvalue>
    2116:	8f 87       	std	Y+15, r24	; 0x0f
	templ[8]=nibbletohexvalue(byte1>>4);
    2118:	8f 81       	ldd	r24, Y+7	; 0x07
    211a:	82 95       	swap	r24
    211c:	8f 70       	andi	r24, 0x0F	; 15
    211e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <nibbletohexvalue>
    2122:	88 8b       	std	Y+16, r24	; 0x10
	templ[9]=nibbletohexvalue(byte1);
    2124:	8f 81       	ldd	r24, Y+7	; 0x07
    2126:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <nibbletohexvalue>
    212a:	89 8b       	std	Y+17, r24	; 0x11
	for (int i=0;i<=9;i++){
    212c:	1b 82       	std	Y+3, r1	; 0x03
    212e:	1a 82       	std	Y+2, r1	; 0x02
    2130:	16 c0       	rjmp	.+44     	; 0x215e <printlong+0xe6>
	 char	printchar=templ[i];
    2132:	2a 81       	ldd	r18, Y+2	; 0x02
    2134:	3b 81       	ldd	r19, Y+3	; 0x03
    2136:	ce 01       	movw	r24, r28
    2138:	08 96       	adiw	r24, 0x08	; 8
    213a:	fc 01       	movw	r30, r24
    213c:	e2 0f       	add	r30, r18
    213e:	f3 1f       	adc	r31, r19
    2140:	80 81       	ld	r24, Z
    2142:	89 83       	std	Y+1, r24	; 0x01

	UDR0=printchar;
    2144:	e6 ec       	ldi	r30, 0xC6	; 198
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	80 83       	st	Z, r24
	delay_ms(1);
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
	templ[5]=nibbletohexvalue(byte3);
	templ[6]=nibbletohexvalue(byte2>>4);
	templ[7]=nibbletohexvalue(byte2);
	templ[8]=nibbletohexvalue(byte1>>4);
	templ[9]=nibbletohexvalue(byte1);
	for (int i=0;i<=9;i++){
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	9b 81       	ldd	r25, Y+3	; 0x03
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	9b 83       	std	Y+3, r25	; 0x03
    215c:	8a 83       	std	Y+2, r24	; 0x02
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	9b 81       	ldd	r25, Y+3	; 0x03
    2162:	8a 30       	cpi	r24, 0x0A	; 10
    2164:	91 05       	cpc	r25, r1
    2166:	2c f3       	brlt	.-54     	; 0x2132 <printlong+0xba>
	 char	printchar=templ[i];

	UDR0=printchar;
	delay_ms(1);
	}
}
    2168:	64 96       	adiw	r28, 0x14	; 20
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <chartoascii>:

void chartoascii(char data){
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	2b 97       	sbiw	r28, 0x0b	; 11
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	8b 87       	std	Y+11, r24	; 0x0b
	int dataint= data;
    2190:	8b 85       	ldd	r24, Y+11	; 0x0b
    2192:	88 2f       	mov	r24, r24
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9a 87       	std	Y+10, r25	; 0x0a
    2198:	89 87       	std	Y+9, r24	; 0x09
	char asciichar;
	if((0<=data) &&(data<10)){
    219a:	8b 85       	ldd	r24, Y+11	; 0x0b
    219c:	8a 30       	cpi	r24, 0x0A	; 10
    219e:	40 f4       	brcc	.+16     	; 0x21b0 <chartoascii+0x36>
		asciichar=data+0x30;
    21a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    21a2:	80 5d       	subi	r24, 0xD0	; 208
    21a4:	88 87       	std	Y+8, r24	; 0x08
		UDR0=asciichar;
    21a6:	e6 ec       	ldi	r30, 0xC6	; 198
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	88 85       	ldd	r24, Y+8	; 0x08
    21ac:	80 83       	st	Z, r24
    21ae:	93 c0       	rjmp	.+294    	; 0x22d6 <chartoascii+0x15c>
	}
	else if((10<=data)&&(data<100)){
    21b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    21b2:	8a 30       	cpi	r24, 0x0A	; 10
    21b4:	88 f1       	brcs	.+98     	; 0x2218 <chartoascii+0x9e>
    21b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    21b8:	84 36       	cpi	r24, 0x64	; 100
    21ba:	70 f5       	brcc	.+92     	; 0x2218 <chartoascii+0x9e>
		int tens=(dataint/10);
    21bc:	89 85       	ldd	r24, Y+9	; 0x09
    21be:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c0:	2a e0       	ldi	r18, 0x0A	; 10
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	b9 01       	movw	r22, r18
    21c6:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__divmodhi4>
    21ca:	cb 01       	movw	r24, r22
    21cc:	9f 83       	std	Y+7, r25	; 0x07
    21ce:	8e 83       	std	Y+6, r24	; 0x06
		int single=dataint-10*tens;
    21d0:	8e 81       	ldd	r24, Y+6	; 0x06
    21d2:	9f 81       	ldd	r25, Y+7	; 0x07
    21d4:	9c 01       	movw	r18, r24
    21d6:	22 0f       	add	r18, r18
    21d8:	33 1f       	adc	r19, r19
    21da:	c9 01       	movw	r24, r18
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	82 0f       	add	r24, r18
    21e6:	93 1f       	adc	r25, r19
    21e8:	90 95       	com	r25
    21ea:	81 95       	neg	r24
    21ec:	9f 4f       	sbci	r25, 0xFF	; 255
    21ee:	29 85       	ldd	r18, Y+9	; 0x09
    21f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    21f2:	82 0f       	add	r24, r18
    21f4:	93 1f       	adc	r25, r19
    21f6:	9d 83       	std	Y+5, r25	; 0x05
    21f8:	8c 83       	std	Y+4, r24	; 0x04
		UDR0=0x30+tens;
    21fa:	e6 ec       	ldi	r30, 0xC6	; 198
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2200:	80 5d       	subi	r24, 0xD0	; 208
    2202:	80 83       	st	Z, r24
		delay_ms(1);
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
		UDR0=0x30+single;
    220c:	e6 ec       	ldi	r30, 0xC6	; 198
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	8c 81       	ldd	r24, Y+4	; 0x04
    2212:	80 5d       	subi	r24, 0xD0	; 208
    2214:	80 83       	st	Z, r24
    2216:	5f c0       	rjmp	.+190    	; 0x22d6 <chartoascii+0x15c>
	}
	else if((100<=data) && (data<256)){
    2218:	8b 85       	ldd	r24, Y+11	; 0x0b
    221a:	84 36       	cpi	r24, 0x64	; 100
    221c:	08 f4       	brcc	.+2      	; 0x2220 <chartoascii+0xa6>
    221e:	5b c0       	rjmp	.+182    	; 0x22d6 <chartoascii+0x15c>
		char hundreds = dataint/100;
    2220:	89 85       	ldd	r24, Y+9	; 0x09
    2222:	9a 85       	ldd	r25, Y+10	; 0x0a
    2224:	24 e6       	ldi	r18, 0x64	; 100
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	b9 01       	movw	r22, r18
    222a:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__divmodhi4>
    222e:	cb 01       	movw	r24, r22
    2230:	8b 83       	std	Y+3, r24	; 0x03
		char tens=(dataint-100*hundreds)/10;
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	28 2f       	mov	r18, r24
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	8c e9       	ldi	r24, 0x9C	; 156
    223a:	9f ef       	ldi	r25, 0xFF	; 255
    223c:	a9 01       	movw	r20, r18
    223e:	48 9f       	mul	r20, r24
    2240:	90 01       	movw	r18, r0
    2242:	49 9f       	mul	r20, r25
    2244:	30 0d       	add	r19, r0
    2246:	58 9f       	mul	r21, r24
    2248:	30 0d       	add	r19, r0
    224a:	11 24       	eor	r1, r1
    224c:	89 85       	ldd	r24, Y+9	; 0x09
    224e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2250:	82 0f       	add	r24, r18
    2252:	93 1f       	adc	r25, r19
    2254:	2a e0       	ldi	r18, 0x0A	; 10
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	b9 01       	movw	r22, r18
    225a:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__divmodhi4>
    225e:	cb 01       	movw	r24, r22
    2260:	8a 83       	std	Y+2, r24	; 0x02
		char single=data-100*hundreds-10*tens;
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	88 2f       	mov	r24, r24
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9c 01       	movw	r18, r24
    226a:	22 0f       	add	r18, r18
    226c:	33 1f       	adc	r19, r19
    226e:	c9 01       	movw	r24, r18
    2270:	88 0f       	add	r24, r24
    2272:	99 1f       	adc	r25, r25
    2274:	88 0f       	add	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	82 0f       	add	r24, r18
    227a:	93 1f       	adc	r25, r19
    227c:	90 95       	com	r25
    227e:	81 95       	neg	r24
    2280:	9f 4f       	sbci	r25, 0xFF	; 255
    2282:	48 2f       	mov	r20, r24
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	8c e9       	ldi	r24, 0x9C	; 156
    228c:	9f ef       	ldi	r25, 0xFF	; 255
    228e:	bc 01       	movw	r22, r24
    2290:	26 9f       	mul	r18, r22
    2292:	c0 01       	movw	r24, r0
    2294:	27 9f       	mul	r18, r23
    2296:	90 0d       	add	r25, r0
    2298:	36 9f       	mul	r19, r22
    229a:	90 0d       	add	r25, r0
    229c:	11 24       	eor	r1, r1
    229e:	94 2f       	mov	r25, r20
    22a0:	98 0f       	add	r25, r24
    22a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    22a4:	89 0f       	add	r24, r25
    22a6:	89 83       	std	Y+1, r24	; 0x01
		UDR0=0x30+hundreds;
    22a8:	e6 ec       	ldi	r30, 0xC6	; 198
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	80 5d       	subi	r24, 0xD0	; 208
    22b0:	80 83       	st	Z, r24
		delay_ms(1);
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
		UDR0=0x30+tens;
    22ba:	e6 ec       	ldi	r30, 0xC6	; 198
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	8a 81       	ldd	r24, Y+2	; 0x02
    22c0:	80 5d       	subi	r24, 0xD0	; 208
    22c2:	80 83       	st	Z, r24
		delay_ms(1);
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
		UDR0=0x30+single;
    22cc:	e6 ec       	ldi	r30, 0xC6	; 198
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	80 5d       	subi	r24, 0xD0	; 208
    22d4:	80 83       	st	Z, r24
	}
}
    22d6:	2b 96       	adiw	r28, 0x0b	; 11
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <floattoascii>:
void floattoascii(float datain){
    22e8:	ef 92       	push	r14
    22ea:	ff 92       	push	r15
    22ec:	0f 93       	push	r16
    22ee:	1f 93       	push	r17
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    22f8:	68 97       	sbiw	r28, 0x18	; 24
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	de bf       	out	0x3e, r29	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	6f 87       	std	Y+15, r22	; 0x0f
    2306:	78 8b       	std	Y+16, r23	; 0x10
    2308:	89 8b       	std	Y+17, r24	; 0x11
    230a:	9a 8b       	std	Y+18, r25	; 0x12
	char asciichar;
	if((0<=datain) &&(datain<10)){
    230c:	18 8e       	std	Y+24, r1	; 0x18
    230e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2310:	78 89       	ldd	r23, Y+16	; 0x10
    2312:	89 89       	ldd	r24, Y+17	; 0x11
    2314:	9a 89       	ldd	r25, Y+18	; 0x12
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e0       	ldi	r20, 0x00	; 0
    231c:	50 e0       	ldi	r21, 0x00	; 0
    231e:	0e 94 cf 03 	call	0x79e	; 0x79e <__gesf2>
    2322:	88 23       	and	r24, r24
    2324:	14 f0       	brlt	.+4      	; 0x232a <floattoascii+0x42>
    2326:	41 e0       	ldi	r20, 0x01	; 1
    2328:	48 8f       	std	Y+24, r20	; 0x18
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	58 8d       	ldd	r21, Y+24	; 0x18
    232e:	85 27       	eor	r24, r21
    2330:	88 23       	and	r24, r24
    2332:	09 f0       	breq	.+2      	; 0x2336 <floattoascii+0x4e>
    2334:	b1 c0       	rjmp	.+354    	; 0x2498 <floattoascii+0x1b0>
    2336:	1f 8a       	std	Y+23, r1	; 0x17
    2338:	6f 85       	ldd	r22, Y+15	; 0x0f
    233a:	78 89       	ldd	r23, Y+16	; 0x10
    233c:	89 89       	ldd	r24, Y+17	; 0x11
    233e:	9a 89       	ldd	r25, Y+18	; 0x12
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e2       	ldi	r20, 0x20	; 32
    2346:	51 e4       	ldi	r21, 0x41	; 65
    2348:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__ltsf2>
    234c:	88 23       	and	r24, r24
    234e:	14 f4       	brge	.+4      	; 0x2354 <floattoascii+0x6c>
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	8f 8b       	std	Y+23, r24	; 0x17
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	9f 89       	ldd	r25, Y+23	; 0x17
    2358:	89 27       	eor	r24, r25
    235a:	88 23       	and	r24, r24
    235c:	09 f0       	breq	.+2      	; 0x2360 <floattoascii+0x78>
    235e:	9c c0       	rjmp	.+312    	; 0x2498 <floattoascii+0x1b0>
		char single=datain;
    2360:	6f 85       	ldd	r22, Y+15	; 0x0f
    2362:	78 89       	ldd	r23, Y+16	; 0x10
    2364:	89 89       	ldd	r24, Y+17	; 0x11
    2366:	9a 89       	ldd	r25, Y+18	; 0x12
    2368:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	8d 87       	std	Y+13, r24	; 0x0d
		char tenth=(datain-single)*10;
    2372:	8d 85       	ldd	r24, Y+13	; 0x0d
    2374:	88 2f       	mov	r24, r24
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	aa 27       	eor	r26, r26
    237a:	97 fd       	sbrc	r25, 7
    237c:	a0 95       	com	r26
    237e:	ba 2f       	mov	r27, r26
    2380:	bc 01       	movw	r22, r24
    2382:	cd 01       	movw	r24, r26
    2384:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    2388:	9b 01       	movw	r18, r22
    238a:	ac 01       	movw	r20, r24
    238c:	6f 85       	ldd	r22, Y+15	; 0x0f
    238e:	78 89       	ldd	r23, Y+16	; 0x10
    2390:	89 89       	ldd	r24, Y+17	; 0x11
    2392:	9a 89       	ldd	r25, Y+18	; 0x12
    2394:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	bc 01       	movw	r22, r24
    239e:	cd 01       	movw	r24, r26
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	40 e2       	ldi	r20, 0x20	; 32
    23a6:	51 e4       	ldi	r21, 0x41	; 65
    23a8:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	bc 01       	movw	r22, r24
    23b2:	cd 01       	movw	r24, r26
    23b4:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	8c 87       	std	Y+12, r24	; 0x0c
		char hundreth=(datain-single-tenth/10.0)*100;
    23be:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c0:	88 2f       	mov	r24, r24
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	aa 27       	eor	r26, r26
    23c6:	97 fd       	sbrc	r25, 7
    23c8:	a0 95       	com	r26
    23ca:	ba 2f       	mov	r27, r26
    23cc:	bc 01       	movw	r22, r24
    23ce:	cd 01       	movw	r24, r26
    23d0:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    23d4:	9b 01       	movw	r18, r22
    23d6:	ac 01       	movw	r20, r24
    23d8:	6f 85       	ldd	r22, Y+15	; 0x0f
    23da:	78 89       	ldd	r23, Y+16	; 0x10
    23dc:	89 89       	ldd	r24, Y+17	; 0x11
    23de:	9a 89       	ldd	r25, Y+18	; 0x12
    23e0:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	7c 01       	movw	r14, r24
    23ea:	8d 01       	movw	r16, r26
    23ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    23ee:	88 2f       	mov	r24, r24
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	aa 27       	eor	r26, r26
    23f4:	97 fd       	sbrc	r25, 7
    23f6:	a0 95       	com	r26
    23f8:	ba 2f       	mov	r27, r26
    23fa:	bc 01       	movw	r22, r24
    23fc:	cd 01       	movw	r24, r26
    23fe:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	40 e2       	ldi	r20, 0x20	; 32
    2410:	51 ec       	ldi	r21, 0xC1	; 193
    2412:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	9c 01       	movw	r18, r24
    241c:	ad 01       	movw	r20, r26
    241e:	c8 01       	movw	r24, r16
    2420:	b7 01       	movw	r22, r14
    2422:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__addsf3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	bc 01       	movw	r22, r24
    242c:	cd 01       	movw	r24, r26
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	48 ec       	ldi	r20, 0xC8	; 200
    2434:	52 e4       	ldi	r21, 0x42	; 66
    2436:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	8b 87       	std	Y+11, r24	; 0x0b
		asciichar=single+0x30;
    244c:	8d 85       	ldd	r24, Y+13	; 0x0d
    244e:	80 5d       	subi	r24, 0xD0	; 208
    2450:	8e 87       	std	Y+14, r24	; 0x0e
		UDR0=asciichar;
    2452:	e6 ec       	ldi	r30, 0xC6	; 198
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	8e 85       	ldd	r24, Y+14	; 0x0e
    2458:	80 83       	st	Z, r24
		delay_ms(1);
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
		writestring(".");
    2462:	8f e2       	ldi	r24, 0x2F	; 47
    2464:	91 e0       	ldi	r25, 0x01	; 1
    2466:	0e 94 19 15 	call	0x2a32	; 0x2a32 <writestring>
		asciichar=tenth+0x30;
    246a:	8c 85       	ldd	r24, Y+12	; 0x0c
    246c:	80 5d       	subi	r24, 0xD0	; 208
    246e:	8e 87       	std	Y+14, r24	; 0x0e
		UDR0=asciichar;
    2470:	e6 ec       	ldi	r30, 0xC6	; 198
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	8e 85       	ldd	r24, Y+14	; 0x0e
    2476:	80 83       	st	Z, r24
		delay_ms(1);
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
		asciichar=hundreth+0x30;
    2480:	8b 85       	ldd	r24, Y+11	; 0x0b
    2482:	80 5d       	subi	r24, 0xD0	; 208
    2484:	8e 87       	std	Y+14, r24	; 0x0e
		UDR0=asciichar;
    2486:	e6 ec       	ldi	r30, 0xC6	; 198
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	8e 85       	ldd	r24, Y+14	; 0x0e
    248c:	80 83       	st	Z, r24
		delay_ms(1);
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
    2496:	c0 c2       	rjmp	.+1408   	; 0x2a18 <floattoascii+0x730>
	}
	else if((10<=datain)&&(datain<100)){
    2498:	1e 8a       	std	Y+22, r1	; 0x16
    249a:	6f 85       	ldd	r22, Y+15	; 0x0f
    249c:	78 89       	ldd	r23, Y+16	; 0x10
    249e:	89 89       	ldd	r24, Y+17	; 0x11
    24a0:	9a 89       	ldd	r25, Y+18	; 0x12
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e2       	ldi	r20, 0x20	; 32
    24a8:	51 e4       	ldi	r21, 0x41	; 65
    24aa:	0e 94 cf 03 	call	0x79e	; 0x79e <__gesf2>
    24ae:	88 23       	and	r24, r24
    24b0:	14 f0       	brlt	.+4      	; 0x24b6 <floattoascii+0x1ce>
    24b2:	41 e0       	ldi	r20, 0x01	; 1
    24b4:	4e 8b       	std	Y+22, r20	; 0x16
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	5e 89       	ldd	r21, Y+22	; 0x16
    24ba:	85 27       	eor	r24, r21
    24bc:	88 23       	and	r24, r24
    24be:	09 f0       	breq	.+2      	; 0x24c2 <floattoascii+0x1da>
    24c0:	b1 c0       	rjmp	.+354    	; 0x2624 <floattoascii+0x33c>
    24c2:	1d 8a       	std	Y+21, r1	; 0x15
    24c4:	6f 85       	ldd	r22, Y+15	; 0x0f
    24c6:	78 89       	ldd	r23, Y+16	; 0x10
    24c8:	89 89       	ldd	r24, Y+17	; 0x11
    24ca:	9a 89       	ldd	r25, Y+18	; 0x12
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	48 ec       	ldi	r20, 0xC8	; 200
    24d2:	52 e4       	ldi	r21, 0x42	; 66
    24d4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__ltsf2>
    24d8:	88 23       	and	r24, r24
    24da:	14 f4       	brge	.+4      	; 0x24e0 <floattoascii+0x1f8>
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	8d 8b       	std	Y+21, r24	; 0x15
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	9d 89       	ldd	r25, Y+21	; 0x15
    24e4:	89 27       	eor	r24, r25
    24e6:	88 23       	and	r24, r24
    24e8:	09 f0       	breq	.+2      	; 0x24ec <floattoascii+0x204>
    24ea:	9c c0       	rjmp	.+312    	; 0x2624 <floattoascii+0x33c>
		char tens=(datain/10);
    24ec:	6f 85       	ldd	r22, Y+15	; 0x0f
    24ee:	78 89       	ldd	r23, Y+16	; 0x10
    24f0:	89 89       	ldd	r24, Y+17	; 0x11
    24f2:	9a 89       	ldd	r25, Y+18	; 0x12
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e2       	ldi	r20, 0x20	; 32
    24fa:	51 e4       	ldi	r21, 0x41	; 65
    24fc:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	bc 01       	movw	r22, r24
    2506:	cd 01       	movw	r24, r26
    2508:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	8a 87       	std	Y+10, r24	; 0x0a
		char single=datain-10*tens;
    2512:	8a 85       	ldd	r24, Y+10	; 0x0a
    2514:	88 2f       	mov	r24, r24
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	9c 01       	movw	r18, r24
    251a:	22 0f       	add	r18, r18
    251c:	33 1f       	adc	r19, r19
    251e:	c9 01       	movw	r24, r18
    2520:	88 0f       	add	r24, r24
    2522:	99 1f       	adc	r25, r25
    2524:	88 0f       	add	r24, r24
    2526:	99 1f       	adc	r25, r25
    2528:	82 0f       	add	r24, r18
    252a:	93 1f       	adc	r25, r19
    252c:	aa 27       	eor	r26, r26
    252e:	97 fd       	sbrc	r25, 7
    2530:	a0 95       	com	r26
    2532:	ba 2f       	mov	r27, r26
    2534:	bc 01       	movw	r22, r24
    2536:	cd 01       	movw	r24, r26
    2538:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    253c:	9b 01       	movw	r18, r22
    253e:	ac 01       	movw	r20, r24
    2540:	6f 85       	ldd	r22, Y+15	; 0x0f
    2542:	78 89       	ldd	r23, Y+16	; 0x10
    2544:	89 89       	ldd	r24, Y+17	; 0x11
    2546:	9a 89       	ldd	r25, Y+18	; 0x12
    2548:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	bc 01       	movw	r22, r24
    2552:	cd 01       	movw	r24, r26
    2554:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	89 87       	std	Y+9, r24	; 0x09
		char tenth=(datain-single-10*tens)*10;
    255e:	89 85       	ldd	r24, Y+9	; 0x09
    2560:	88 2f       	mov	r24, r24
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	aa 27       	eor	r26, r26
    2566:	97 fd       	sbrc	r25, 7
    2568:	a0 95       	com	r26
    256a:	ba 2f       	mov	r27, r26
    256c:	bc 01       	movw	r22, r24
    256e:	cd 01       	movw	r24, r26
    2570:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    2574:	9b 01       	movw	r18, r22
    2576:	ac 01       	movw	r20, r24
    2578:	6f 85       	ldd	r22, Y+15	; 0x0f
    257a:	78 89       	ldd	r23, Y+16	; 0x10
    257c:	89 89       	ldd	r24, Y+17	; 0x11
    257e:	9a 89       	ldd	r25, Y+18	; 0x12
    2580:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	7c 01       	movw	r14, r24
    258a:	8d 01       	movw	r16, r26
    258c:	8a 85       	ldd	r24, Y+10	; 0x0a
    258e:	88 2f       	mov	r24, r24
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	9c 01       	movw	r18, r24
    2594:	22 0f       	add	r18, r18
    2596:	33 1f       	adc	r19, r19
    2598:	c9 01       	movw	r24, r18
    259a:	88 0f       	add	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	88 0f       	add	r24, r24
    25a0:	99 1f       	adc	r25, r25
    25a2:	82 0f       	add	r24, r18
    25a4:	93 1f       	adc	r25, r19
    25a6:	aa 27       	eor	r26, r26
    25a8:	97 fd       	sbrc	r25, 7
    25aa:	a0 95       	com	r26
    25ac:	ba 2f       	mov	r27, r26
    25ae:	bc 01       	movw	r22, r24
    25b0:	cd 01       	movw	r24, r26
    25b2:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    25b6:	9b 01       	movw	r18, r22
    25b8:	ac 01       	movw	r20, r24
    25ba:	c8 01       	movw	r24, r16
    25bc:	b7 01       	movw	r22, r14
    25be:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	bc 01       	movw	r22, r24
    25c8:	cd 01       	movw	r24, r26
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e2       	ldi	r20, 0x20	; 32
    25d0:	51 e4       	ldi	r21, 0x41	; 65
    25d2:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	bc 01       	movw	r22, r24
    25dc:	cd 01       	movw	r24, r26
    25de:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	88 87       	std	Y+8, r24	; 0x08
//		char hundreth=(datain-single-10*tens-tenth/10.0)*100;
		UDR0=0x30+tens;
    25e8:	e6 ec       	ldi	r30, 0xC6	; 198
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ee:	80 5d       	subi	r24, 0xD0	; 208
    25f0:	80 83       	st	Z, r24
		delay_ms(1);
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
		UDR0=0x30+single;
    25fa:	e6 ec       	ldi	r30, 0xC6	; 198
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	89 85       	ldd	r24, Y+9	; 0x09
    2600:	80 5d       	subi	r24, 0xD0	; 208
    2602:	80 83       	st	Z, r24
		delay_ms(1);
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
		writestring(".");
    260c:	8f e2       	ldi	r24, 0x2F	; 47
    260e:	91 e0       	ldi	r25, 0x01	; 1
    2610:	0e 94 19 15 	call	0x2a32	; 0x2a32 <writestring>
		asciichar=tenth+0x30;
    2614:	88 85       	ldd	r24, Y+8	; 0x08
    2616:	80 5d       	subi	r24, 0xD0	; 208
    2618:	8e 87       	std	Y+14, r24	; 0x0e
		UDR0=asciichar;
    261a:	e6 ec       	ldi	r30, 0xC6	; 198
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2620:	80 83       	st	Z, r24
    2622:	fa c1       	rjmp	.+1012   	; 0x2a18 <floattoascii+0x730>
	}
	else if((100<=datain) && (datain<1000)){
    2624:	1c 8a       	std	Y+20, r1	; 0x14
    2626:	6f 85       	ldd	r22, Y+15	; 0x0f
    2628:	78 89       	ldd	r23, Y+16	; 0x10
    262a:	89 89       	ldd	r24, Y+17	; 0x11
    262c:	9a 89       	ldd	r25, Y+18	; 0x12
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	48 ec       	ldi	r20, 0xC8	; 200
    2634:	52 e4       	ldi	r21, 0x42	; 66
    2636:	0e 94 cf 03 	call	0x79e	; 0x79e <__gesf2>
    263a:	88 23       	and	r24, r24
    263c:	14 f0       	brlt	.+4      	; 0x2642 <floattoascii+0x35a>
    263e:	41 e0       	ldi	r20, 0x01	; 1
    2640:	4c 8b       	std	Y+20, r20	; 0x14
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	5c 89       	ldd	r21, Y+20	; 0x14
    2646:	85 27       	eor	r24, r21
    2648:	88 23       	and	r24, r24
    264a:	09 f0       	breq	.+2      	; 0x264e <floattoascii+0x366>
    264c:	b5 c0       	rjmp	.+362    	; 0x27b8 <floattoascii+0x4d0>
    264e:	1b 8a       	std	Y+19, r1	; 0x13
    2650:	6f 85       	ldd	r22, Y+15	; 0x0f
    2652:	78 89       	ldd	r23, Y+16	; 0x10
    2654:	89 89       	ldd	r24, Y+17	; 0x11
    2656:	9a 89       	ldd	r25, Y+18	; 0x12
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	4a e7       	ldi	r20, 0x7A	; 122
    265e:	54 e4       	ldi	r21, 0x44	; 68
    2660:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__ltsf2>
    2664:	88 23       	and	r24, r24
    2666:	14 f4       	brge	.+4      	; 0x266c <floattoascii+0x384>
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	8b 8b       	std	Y+19, r24	; 0x13
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	9b 89       	ldd	r25, Y+19	; 0x13
    2670:	89 27       	eor	r24, r25
    2672:	88 23       	and	r24, r24
    2674:	09 f0       	breq	.+2      	; 0x2678 <floattoascii+0x390>
    2676:	a0 c0       	rjmp	.+320    	; 0x27b8 <floattoascii+0x4d0>
		char hundreds = datain/100;
    2678:	6f 85       	ldd	r22, Y+15	; 0x0f
    267a:	78 89       	ldd	r23, Y+16	; 0x10
    267c:	89 89       	ldd	r24, Y+17	; 0x11
    267e:	9a 89       	ldd	r25, Y+18	; 0x12
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	48 ec       	ldi	r20, 0xC8	; 200
    2686:	52 e4       	ldi	r21, 0x42	; 66
    2688:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	bc 01       	movw	r22, r24
    2692:	cd 01       	movw	r24, r26
    2694:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	8f 83       	std	Y+7, r24	; 0x07
		char tens=(datain-100*hundreds)/10;
    269e:	8f 81       	ldd	r24, Y+7	; 0x07
    26a0:	28 2f       	mov	r18, r24
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	84 e6       	ldi	r24, 0x64	; 100
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	ac 01       	movw	r20, r24
    26aa:	24 9f       	mul	r18, r20
    26ac:	c0 01       	movw	r24, r0
    26ae:	25 9f       	mul	r18, r21
    26b0:	90 0d       	add	r25, r0
    26b2:	34 9f       	mul	r19, r20
    26b4:	90 0d       	add	r25, r0
    26b6:	11 24       	eor	r1, r1
    26b8:	aa 27       	eor	r26, r26
    26ba:	97 fd       	sbrc	r25, 7
    26bc:	a0 95       	com	r26
    26be:	ba 2f       	mov	r27, r26
    26c0:	bc 01       	movw	r22, r24
    26c2:	cd 01       	movw	r24, r26
    26c4:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    26c8:	9b 01       	movw	r18, r22
    26ca:	ac 01       	movw	r20, r24
    26cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    26ce:	78 89       	ldd	r23, Y+16	; 0x10
    26d0:	89 89       	ldd	r24, Y+17	; 0x11
    26d2:	9a 89       	ldd	r25, Y+18	; 0x12
    26d4:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	bc 01       	movw	r22, r24
    26de:	cd 01       	movw	r24, r26
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e2       	ldi	r20, 0x20	; 32
    26e6:	51 e4       	ldi	r21, 0x41	; 65
    26e8:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	8e 83       	std	Y+6, r24	; 0x06
		char single=datain-100*hundreds-10*tens;
    26fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2700:	28 2f       	mov	r18, r24
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	84 e6       	ldi	r24, 0x64	; 100
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	ac 01       	movw	r20, r24
    270a:	24 9f       	mul	r18, r20
    270c:	c0 01       	movw	r24, r0
    270e:	25 9f       	mul	r18, r21
    2710:	90 0d       	add	r25, r0
    2712:	34 9f       	mul	r19, r20
    2714:	90 0d       	add	r25, r0
    2716:	11 24       	eor	r1, r1
    2718:	aa 27       	eor	r26, r26
    271a:	97 fd       	sbrc	r25, 7
    271c:	a0 95       	com	r26
    271e:	ba 2f       	mov	r27, r26
    2720:	bc 01       	movw	r22, r24
    2722:	cd 01       	movw	r24, r26
    2724:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    2728:	9b 01       	movw	r18, r22
    272a:	ac 01       	movw	r20, r24
    272c:	6f 85       	ldd	r22, Y+15	; 0x0f
    272e:	78 89       	ldd	r23, Y+16	; 0x10
    2730:	89 89       	ldd	r24, Y+17	; 0x11
    2732:	9a 89       	ldd	r25, Y+18	; 0x12
    2734:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	7c 01       	movw	r14, r24
    273e:	8d 01       	movw	r16, r26
    2740:	8e 81       	ldd	r24, Y+6	; 0x06
    2742:	88 2f       	mov	r24, r24
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	9c 01       	movw	r18, r24
    2748:	22 0f       	add	r18, r18
    274a:	33 1f       	adc	r19, r19
    274c:	c9 01       	movw	r24, r18
    274e:	88 0f       	add	r24, r24
    2750:	99 1f       	adc	r25, r25
    2752:	88 0f       	add	r24, r24
    2754:	99 1f       	adc	r25, r25
    2756:	82 0f       	add	r24, r18
    2758:	93 1f       	adc	r25, r19
    275a:	aa 27       	eor	r26, r26
    275c:	97 fd       	sbrc	r25, 7
    275e:	a0 95       	com	r26
    2760:	ba 2f       	mov	r27, r26
    2762:	bc 01       	movw	r22, r24
    2764:	cd 01       	movw	r24, r26
    2766:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    276a:	9b 01       	movw	r18, r22
    276c:	ac 01       	movw	r20, r24
    276e:	c8 01       	movw	r24, r16
    2770:	b7 01       	movw	r22, r14
    2772:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	bc 01       	movw	r22, r24
    277c:	cd 01       	movw	r24, r26
    277e:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	8d 83       	std	Y+5, r24	; 0x05
		UDR0=0x30+hundreds;
    2788:	e6 ec       	ldi	r30, 0xC6	; 198
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	8f 81       	ldd	r24, Y+7	; 0x07
    278e:	80 5d       	subi	r24, 0xD0	; 208
    2790:	80 83       	st	Z, r24
		delay_ms(1);
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
		UDR0=0x30+tens;
    279a:	e6 ec       	ldi	r30, 0xC6	; 198
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	8e 81       	ldd	r24, Y+6	; 0x06
    27a0:	80 5d       	subi	r24, 0xD0	; 208
    27a2:	80 83       	st	Z, r24
		delay_ms(1);
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
		UDR0=0x30+single;
    27ac:	e6 ec       	ldi	r30, 0xC6	; 198
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	8d 81       	ldd	r24, Y+5	; 0x05
    27b2:	80 5d       	subi	r24, 0xD0	; 208
    27b4:	80 83       	st	Z, r24
    27b6:	30 c1       	rjmp	.+608    	; 0x2a18 <floattoascii+0x730>
	}
	else if((1000<=datain)&&(datain<10000)){
    27b8:	6f 85       	ldd	r22, Y+15	; 0x0f
    27ba:	78 89       	ldd	r23, Y+16	; 0x10
    27bc:	89 89       	ldd	r24, Y+17	; 0x11
    27be:	9a 89       	ldd	r25, Y+18	; 0x12
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	4a e7       	ldi	r20, 0x7A	; 122
    27c6:	54 e4       	ldi	r21, 0x44	; 68
    27c8:	0e 94 cf 03 	call	0x79e	; 0x79e <__gesf2>
    27cc:	88 23       	and	r24, r24
    27ce:	0c f4       	brge	.+2      	; 0x27d2 <floattoascii+0x4ea>
    27d0:	23 c1       	rjmp	.+582    	; 0x2a18 <floattoascii+0x730>
    27d2:	6f 85       	ldd	r22, Y+15	; 0x0f
    27d4:	78 89       	ldd	r23, Y+16	; 0x10
    27d6:	89 89       	ldd	r24, Y+17	; 0x11
    27d8:	9a 89       	ldd	r25, Y+18	; 0x12
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e4       	ldi	r19, 0x40	; 64
    27de:	4c e1       	ldi	r20, 0x1C	; 28
    27e0:	56 e4       	ldi	r21, 0x46	; 70
    27e2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__ltsf2>
    27e6:	88 23       	and	r24, r24
    27e8:	0c f0       	brlt	.+2      	; 0x27ec <floattoascii+0x504>
    27ea:	16 c1       	rjmp	.+556    	; 0x2a18 <floattoascii+0x730>
		char thousands= datain/1000;
    27ec:	6f 85       	ldd	r22, Y+15	; 0x0f
    27ee:	78 89       	ldd	r23, Y+16	; 0x10
    27f0:	89 89       	ldd	r24, Y+17	; 0x11
    27f2:	9a 89       	ldd	r25, Y+18	; 0x12
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	4a e7       	ldi	r20, 0x7A	; 122
    27fa:	54 e4       	ldi	r21, 0x44	; 68
    27fc:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	bc 01       	movw	r22, r24
    2806:	cd 01       	movw	r24, r26
    2808:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	8c 83       	std	Y+4, r24	; 0x04
		char hundreds=(datain-1000*thousands)/100;
    2812:	8c 81       	ldd	r24, Y+4	; 0x04
    2814:	28 2f       	mov	r18, r24
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	88 ee       	ldi	r24, 0xE8	; 232
    281a:	93 e0       	ldi	r25, 0x03	; 3
    281c:	ac 01       	movw	r20, r24
    281e:	24 9f       	mul	r18, r20
    2820:	c0 01       	movw	r24, r0
    2822:	25 9f       	mul	r18, r21
    2824:	90 0d       	add	r25, r0
    2826:	34 9f       	mul	r19, r20
    2828:	90 0d       	add	r25, r0
    282a:	11 24       	eor	r1, r1
    282c:	aa 27       	eor	r26, r26
    282e:	97 fd       	sbrc	r25, 7
    2830:	a0 95       	com	r26
    2832:	ba 2f       	mov	r27, r26
    2834:	bc 01       	movw	r22, r24
    2836:	cd 01       	movw	r24, r26
    2838:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    283c:	9b 01       	movw	r18, r22
    283e:	ac 01       	movw	r20, r24
    2840:	6f 85       	ldd	r22, Y+15	; 0x0f
    2842:	78 89       	ldd	r23, Y+16	; 0x10
    2844:	89 89       	ldd	r24, Y+17	; 0x11
    2846:	9a 89       	ldd	r25, Y+18	; 0x12
    2848:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	bc 01       	movw	r22, r24
    2852:	cd 01       	movw	r24, r26
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	48 ec       	ldi	r20, 0xC8	; 200
    285a:	52 e4       	ldi	r21, 0x42	; 66
    285c:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	bc 01       	movw	r22, r24
    2866:	cd 01       	movw	r24, r26
    2868:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	8b 83       	std	Y+3, r24	; 0x03
		char tens=(datain-1000*thousands-100*hundreds)/10;
    2872:	8c 81       	ldd	r24, Y+4	; 0x04
    2874:	28 2f       	mov	r18, r24
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	88 ee       	ldi	r24, 0xE8	; 232
    287a:	93 e0       	ldi	r25, 0x03	; 3
    287c:	ac 01       	movw	r20, r24
    287e:	24 9f       	mul	r18, r20
    2880:	c0 01       	movw	r24, r0
    2882:	25 9f       	mul	r18, r21
    2884:	90 0d       	add	r25, r0
    2886:	34 9f       	mul	r19, r20
    2888:	90 0d       	add	r25, r0
    288a:	11 24       	eor	r1, r1
    288c:	aa 27       	eor	r26, r26
    288e:	97 fd       	sbrc	r25, 7
    2890:	a0 95       	com	r26
    2892:	ba 2f       	mov	r27, r26
    2894:	bc 01       	movw	r22, r24
    2896:	cd 01       	movw	r24, r26
    2898:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    289c:	9b 01       	movw	r18, r22
    289e:	ac 01       	movw	r20, r24
    28a0:	6f 85       	ldd	r22, Y+15	; 0x0f
    28a2:	78 89       	ldd	r23, Y+16	; 0x10
    28a4:	89 89       	ldd	r24, Y+17	; 0x11
    28a6:	9a 89       	ldd	r25, Y+18	; 0x12
    28a8:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	7c 01       	movw	r14, r24
    28b2:	8d 01       	movw	r16, r26
    28b4:	8b 81       	ldd	r24, Y+3	; 0x03
    28b6:	28 2f       	mov	r18, r24
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	84 e6       	ldi	r24, 0x64	; 100
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	ac 01       	movw	r20, r24
    28c0:	24 9f       	mul	r18, r20
    28c2:	c0 01       	movw	r24, r0
    28c4:	25 9f       	mul	r18, r21
    28c6:	90 0d       	add	r25, r0
    28c8:	34 9f       	mul	r19, r20
    28ca:	90 0d       	add	r25, r0
    28cc:	11 24       	eor	r1, r1
    28ce:	aa 27       	eor	r26, r26
    28d0:	97 fd       	sbrc	r25, 7
    28d2:	a0 95       	com	r26
    28d4:	ba 2f       	mov	r27, r26
    28d6:	bc 01       	movw	r22, r24
    28d8:	cd 01       	movw	r24, r26
    28da:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    28de:	9b 01       	movw	r18, r22
    28e0:	ac 01       	movw	r20, r24
    28e2:	c8 01       	movw	r24, r16
    28e4:	b7 01       	movw	r22, r14
    28e6:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	bc 01       	movw	r22, r24
    28f0:	cd 01       	movw	r24, r26
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e2       	ldi	r20, 0x20	; 32
    28f8:	51 e4       	ldi	r21, 0x41	; 65
    28fa:	0e 94 23 03 	call	0x646	; 0x646 <__divsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	bc 01       	movw	r22, r24
    2904:	cd 01       	movw	r24, r26
    2906:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	8a 83       	std	Y+2, r24	; 0x02
		char single=datain-1000*thousands-100*hundreds-10*tens;
    2910:	8c 81       	ldd	r24, Y+4	; 0x04
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	88 ee       	ldi	r24, 0xE8	; 232
    2918:	93 e0       	ldi	r25, 0x03	; 3
    291a:	ac 01       	movw	r20, r24
    291c:	24 9f       	mul	r18, r20
    291e:	c0 01       	movw	r24, r0
    2920:	25 9f       	mul	r18, r21
    2922:	90 0d       	add	r25, r0
    2924:	34 9f       	mul	r19, r20
    2926:	90 0d       	add	r25, r0
    2928:	11 24       	eor	r1, r1
    292a:	aa 27       	eor	r26, r26
    292c:	97 fd       	sbrc	r25, 7
    292e:	a0 95       	com	r26
    2930:	ba 2f       	mov	r27, r26
    2932:	bc 01       	movw	r22, r24
    2934:	cd 01       	movw	r24, r26
    2936:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    293a:	9b 01       	movw	r18, r22
    293c:	ac 01       	movw	r20, r24
    293e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2940:	78 89       	ldd	r23, Y+16	; 0x10
    2942:	89 89       	ldd	r24, Y+17	; 0x11
    2944:	9a 89       	ldd	r25, Y+18	; 0x12
    2946:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	7c 01       	movw	r14, r24
    2950:	8d 01       	movw	r16, r26
    2952:	8b 81       	ldd	r24, Y+3	; 0x03
    2954:	28 2f       	mov	r18, r24
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	84 e6       	ldi	r24, 0x64	; 100
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	ac 01       	movw	r20, r24
    295e:	24 9f       	mul	r18, r20
    2960:	c0 01       	movw	r24, r0
    2962:	25 9f       	mul	r18, r21
    2964:	90 0d       	add	r25, r0
    2966:	34 9f       	mul	r19, r20
    2968:	90 0d       	add	r25, r0
    296a:	11 24       	eor	r1, r1
    296c:	aa 27       	eor	r26, r26
    296e:	97 fd       	sbrc	r25, 7
    2970:	a0 95       	com	r26
    2972:	ba 2f       	mov	r27, r26
    2974:	bc 01       	movw	r22, r24
    2976:	cd 01       	movw	r24, r26
    2978:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    297c:	9b 01       	movw	r18, r22
    297e:	ac 01       	movw	r20, r24
    2980:	c8 01       	movw	r24, r16
    2982:	b7 01       	movw	r22, r14
    2984:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	7c 01       	movw	r14, r24
    298e:	8d 01       	movw	r16, r26
    2990:	8a 81       	ldd	r24, Y+2	; 0x02
    2992:	88 2f       	mov	r24, r24
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	9c 01       	movw	r18, r24
    2998:	22 0f       	add	r18, r18
    299a:	33 1f       	adc	r19, r19
    299c:	c9 01       	movw	r24, r18
    299e:	88 0f       	add	r24, r24
    29a0:	99 1f       	adc	r25, r25
    29a2:	88 0f       	add	r24, r24
    29a4:	99 1f       	adc	r25, r25
    29a6:	82 0f       	add	r24, r18
    29a8:	93 1f       	adc	r25, r19
    29aa:	aa 27       	eor	r26, r26
    29ac:	97 fd       	sbrc	r25, 7
    29ae:	a0 95       	com	r26
    29b0:	ba 2f       	mov	r27, r26
    29b2:	bc 01       	movw	r22, r24
    29b4:	cd 01       	movw	r24, r26
    29b6:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatsisf>
    29ba:	9b 01       	movw	r18, r22
    29bc:	ac 01       	movw	r20, r24
    29be:	c8 01       	movw	r24, r16
    29c0:	b7 01       	movw	r22, r14
    29c2:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	bc 01       	movw	r22, r24
    29cc:	cd 01       	movw	r24, r26
    29ce:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	89 83       	std	Y+1, r24	; 0x01
		UDR0=0x30+thousands;
    29d8:	e6 ec       	ldi	r30, 0xC6	; 198
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	8c 81       	ldd	r24, Y+4	; 0x04
    29de:	80 5d       	subi	r24, 0xD0	; 208
    29e0:	80 83       	st	Z, r24
		delay_ms(1);
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
		UDR0=0x30+hundreds;
    29ea:	e6 ec       	ldi	r30, 0xC6	; 198
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	8b 81       	ldd	r24, Y+3	; 0x03
    29f0:	80 5d       	subi	r24, 0xD0	; 208
    29f2:	80 83       	st	Z, r24
		delay_ms(1);
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
		UDR0=0x30+tens;
    29fc:	e6 ec       	ldi	r30, 0xC6	; 198
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	8a 81       	ldd	r24, Y+2	; 0x02
    2a02:	80 5d       	subi	r24, 0xD0	; 208
    2a04:	80 83       	st	Z, r24
		delay_ms(1);
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
		UDR0=0x30+single;
    2a0e:	e6 ec       	ldi	r30, 0xC6	; 198
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	80 5d       	subi	r24, 0xD0	; 208
    2a16:	80 83       	st	Z, r24
	}
}
    2a18:	68 96       	adiw	r28, 0x18	; 24
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	1f 91       	pop	r17
    2a2a:	0f 91       	pop	r16
    2a2c:	ff 90       	pop	r15
    2a2e:	ef 90       	pop	r14
    2a30:	08 95       	ret

00002a32 <writestring>:



void writestring(char string[]){
    2a32:	df 93       	push	r29
    2a34:	cf 93       	push	r28
    2a36:	00 d0       	rcall	.+0      	; 0x2a38 <writestring+0x6>
    2a38:	00 d0       	rcall	.+0      	; 0x2a3a <writestring+0x8>
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
    2a3e:	9c 83       	std	Y+4, r25	; 0x04
    2a40:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0;string[i] !='\0';++i){
    2a42:	1a 82       	std	Y+2, r1	; 0x02
    2a44:	19 82       	std	Y+1, r1	; 0x01
    2a46:	14 c0       	rjmp	.+40     	; 0x2a70 <writestring+0x3e>
		UDR0=string[i];
    2a48:	a6 ec       	ldi	r26, 0xC6	; 198
    2a4a:	b0 e0       	ldi	r27, 0x00	; 0
    2a4c:	29 81       	ldd	r18, Y+1	; 0x01
    2a4e:	3a 81       	ldd	r19, Y+2	; 0x02
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
    2a52:	9c 81       	ldd	r25, Y+4	; 0x04
    2a54:	fc 01       	movw	r30, r24
    2a56:	e2 0f       	add	r30, r18
    2a58:	f3 1f       	adc	r31, r19
    2a5a:	80 81       	ld	r24, Z
    2a5c:	8c 93       	st	X, r24
		delay_ms(1);
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
}



void writestring(char string[]){
	for(int i=0;string[i] !='\0';++i){
    2a66:	89 81       	ldd	r24, Y+1	; 0x01
    2a68:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6a:	01 96       	adiw	r24, 0x01	; 1
    2a6c:	9a 83       	std	Y+2, r25	; 0x02
    2a6e:	89 83       	std	Y+1, r24	; 0x01
    2a70:	29 81       	ldd	r18, Y+1	; 0x01
    2a72:	3a 81       	ldd	r19, Y+2	; 0x02
    2a74:	8b 81       	ldd	r24, Y+3	; 0x03
    2a76:	9c 81       	ldd	r25, Y+4	; 0x04
    2a78:	fc 01       	movw	r30, r24
    2a7a:	e2 0f       	add	r30, r18
    2a7c:	f3 1f       	adc	r31, r19
    2a7e:	80 81       	ld	r24, Z
    2a80:	88 23       	and	r24, r24
    2a82:	11 f7       	brne	.-60     	; 0x2a48 <writestring+0x16>
		UDR0=string[i];
		delay_ms(1);
	}
}
    2a84:	0f 90       	pop	r0
    2a86:	0f 90       	pop	r0
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	cf 91       	pop	r28
    2a8e:	df 91       	pop	r29
    2a90:	08 95       	ret

00002a92 <__vector_18>:

ISR(USART_RX_vect){
    2a92:	1f 92       	push	r1
    2a94:	0f 92       	push	r0
    2a96:	0f b6       	in	r0, 0x3f	; 63
    2a98:	0f 92       	push	r0
    2a9a:	11 24       	eor	r1, r1
    2a9c:	2f 93       	push	r18
    2a9e:	3f 93       	push	r19
    2aa0:	4f 93       	push	r20
    2aa2:	5f 93       	push	r21
    2aa4:	6f 93       	push	r22
    2aa6:	7f 93       	push	r23
    2aa8:	8f 93       	push	r24
    2aaa:	9f 93       	push	r25
    2aac:	af 93       	push	r26
    2aae:	bf 93       	push	r27
    2ab0:	ef 93       	push	r30
    2ab2:	ff 93       	push	r31
    2ab4:	df 93       	push	r29
    2ab6:	cf 93       	push	r28
    2ab8:	00 d0       	rcall	.+0      	; 0x2aba <__vector_18+0x28>
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62

	cRx[charcounter]=UDR0;
    2abe:	80 91 a4 02 	lds	r24, 0x02A4
    2ac2:	90 91 a5 02 	lds	r25, 0x02A5
    2ac6:	e6 ec       	ldi	r30, 0xC6	; 198
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	20 81       	ld	r18, Z
    2acc:	fc 01       	movw	r30, r24
    2ace:	ea 55       	subi	r30, 0x5A	; 90
    2ad0:	fd 4f       	sbci	r31, 0xFD	; 253
    2ad2:	20 83       	st	Z, r18

	if (cRx[charcounter]=='\n' || charcounter>9){
    2ad4:	80 91 a4 02 	lds	r24, 0x02A4
    2ad8:	90 91 a5 02 	lds	r25, 0x02A5
    2adc:	fc 01       	movw	r30, r24
    2ade:	ea 55       	subi	r30, 0x5A	; 90
    2ae0:	fd 4f       	sbci	r31, 0xFD	; 253
    2ae2:	80 81       	ld	r24, Z
    2ae4:	8a 30       	cpi	r24, 0x0A	; 10
    2ae6:	39 f0       	breq	.+14     	; 0x2af6 <__vector_18+0x64>
    2ae8:	80 91 a4 02 	lds	r24, 0x02A4
    2aec:	90 91 a5 02 	lds	r25, 0x02A5
    2af0:	8a 30       	cpi	r24, 0x0A	; 10
    2af2:	91 05       	cpc	r25, r1
    2af4:	fc f0       	brlt	.+62     	; 0x2b34 <__vector_18+0xa2>
		actionfunction(cRx);
    2af6:	86 ea       	ldi	r24, 0xA6	; 166
    2af8:	92 e0       	ldi	r25, 0x02	; 2
    2afa:	0e 94 2c 08 	call	0x1058	; 0x1058 <actionfunction>
		for(int i=0;i<10;i++){
    2afe:	1a 82       	std	Y+2, r1	; 0x02
    2b00:	19 82       	std	Y+1, r1	; 0x01
    2b02:	0c c0       	rjmp	.+24     	; 0x2b1c <__vector_18+0x8a>
			cRx[i]='0';
    2b04:	89 81       	ldd	r24, Y+1	; 0x01
    2b06:	9a 81       	ldd	r25, Y+2	; 0x02
    2b08:	fc 01       	movw	r30, r24
    2b0a:	ea 55       	subi	r30, 0x5A	; 90
    2b0c:	fd 4f       	sbci	r31, 0xFD	; 253
    2b0e:	80 e3       	ldi	r24, 0x30	; 48
    2b10:	80 83       	st	Z, r24

	cRx[charcounter]=UDR0;

	if (cRx[charcounter]=='\n' || charcounter>9){
		actionfunction(cRx);
		for(int i=0;i<10;i++){
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	9a 81       	ldd	r25, Y+2	; 0x02
    2b16:	01 96       	adiw	r24, 0x01	; 1
    2b18:	9a 83       	std	Y+2, r25	; 0x02
    2b1a:	89 83       	std	Y+1, r24	; 0x01
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b20:	8a 30       	cpi	r24, 0x0A	; 10
    2b22:	91 05       	cpc	r25, r1
    2b24:	7c f3       	brlt	.-34     	; 0x2b04 <__vector_18+0x72>
			cRx[i]='0';
		}
		cRx[10]='\0';
    2b26:	10 92 b0 02 	sts	0x02B0, r1
		charcounter=0;
    2b2a:	10 92 a5 02 	sts	0x02A5, r1
    2b2e:	10 92 a4 02 	sts	0x02A4, r1
    2b32:	09 c0       	rjmp	.+18     	; 0x2b46 <__vector_18+0xb4>
	}
	else charcounter++;
    2b34:	80 91 a4 02 	lds	r24, 0x02A4
    2b38:	90 91 a5 02 	lds	r25, 0x02A5
    2b3c:	01 96       	adiw	r24, 0x01	; 1
    2b3e:	90 93 a5 02 	sts	0x02A5, r25
    2b42:	80 93 a4 02 	sts	0x02A4, r24

}
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	cf 91       	pop	r28
    2b4c:	df 91       	pop	r29
    2b4e:	ff 91       	pop	r31
    2b50:	ef 91       	pop	r30
    2b52:	bf 91       	pop	r27
    2b54:	af 91       	pop	r26
    2b56:	9f 91       	pop	r25
    2b58:	8f 91       	pop	r24
    2b5a:	7f 91       	pop	r23
    2b5c:	6f 91       	pop	r22
    2b5e:	5f 91       	pop	r21
    2b60:	4f 91       	pop	r20
    2b62:	3f 91       	pop	r19
    2b64:	2f 91       	pop	r18
    2b66:	0f 90       	pop	r0
    2b68:	0f be       	out	0x3f, r0	; 63
    2b6a:	0f 90       	pop	r0
    2b6c:	1f 90       	pop	r1
    2b6e:	18 95       	reti

00002b70 <main>:
#include "PWMSERVO/pwm.h"
#include "PWMSERVO/serial.h"
#include "PWMSERVO/encoder.h"
#include "PWMSERVO/drive.h"

int main(){
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	00 d0       	rcall	.+0      	; 0x2b76 <main+0x6>
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <main+0x8>
    2b78:	0f 92       	push	r0
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
	Init_Uart();
    2b7e:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <Init_Uart>
	//Setting external interrupt 1
	pwmduty1=0;
    2b82:	10 92 a3 02 	sts	0x02A3, r1
	pwmduty2=0;
    2b86:	10 92 a0 02 	sts	0x02A0, r1
	pwmduty3=0;
    2b8a:	10 92 a2 02 	sts	0x02A2, r1
	pwmduty4=0;
    2b8e:	10 92 a1 02 	sts	0x02A1, r1
	angle1=0;
    2b92:	10 92 92 02 	sts	0x0292, r1
    2b96:	10 92 91 02 	sts	0x0291, r1
	angle2=0;
    2b9a:	10 92 94 02 	sts	0x0294, r1
    2b9e:	10 92 93 02 	sts	0x0293, r1
	pwmall_init();
    2ba2:	0e 94 a4 0b 	call	0x1748	; 0x1748 <pwmall_init>
	encoder0init();
    2ba6:	0e 94 bd 0a 	call	0x157a	; 0x157a <encoder0init>
	encoder1init();
    2baa:	0e 94 93 0a 	call	0x1526	; 0x1526 <encoder1init>
	sei();
    2bae:	78 94       	sei
	unsigned int counter1=0;
    2bb0:	1d 82       	std	Y+5, r1	; 0x05
    2bb2:	1c 82       	std	Y+4, r1	; 0x04
	unsigned int counter2=180;
    2bb4:	84 eb       	ldi	r24, 0xB4	; 180
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	9b 83       	std	Y+3, r25	; 0x03
    2bba:	8a 83       	std	Y+2, r24	; 0x02
	char dir=0;
    2bbc:	19 82       	std	Y+1, r1	; 0x01
	while(1){

		if(sweepbool){
    2bbe:	80 91 95 02 	lds	r24, 0x0295
    2bc2:	88 23       	and	r24, r24
    2bc4:	89 f1       	breq	.+98     	; 0x2c28 <main+0xb8>
			if (counter1==180) dir=0;
    2bc6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bca:	84 3b       	cpi	r24, 0xB4	; 180
    2bcc:	91 05       	cpc	r25, r1
    2bce:	11 f4       	brne	.+4      	; 0x2bd4 <main+0x64>
    2bd0:	19 82       	std	Y+1, r1	; 0x01
    2bd2:	06 c0       	rjmp	.+12     	; 0x2be0 <main+0x70>
			else if (counter1==0) dir=1;
    2bd4:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd6:	9d 81       	ldd	r25, Y+5	; 0x05
    2bd8:	00 97       	sbiw	r24, 0x00	; 0
    2bda:	11 f4       	brne	.+4      	; 0x2be0 <main+0x70>
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	89 83       	std	Y+1, r24	; 0x01
			if(dir){
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	88 23       	and	r24, r24
    2be4:	59 f0       	breq	.+22     	; 0x2bfc <main+0x8c>
				counter1++;
    2be6:	8c 81       	ldd	r24, Y+4	; 0x04
    2be8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bea:	01 96       	adiw	r24, 0x01	; 1
    2bec:	9d 83       	std	Y+5, r25	; 0x05
    2bee:	8c 83       	std	Y+4, r24	; 0x04
				counter2--;
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	9b 83       	std	Y+3, r25	; 0x03
    2bf8:	8a 83       	std	Y+2, r24	; 0x02
    2bfa:	0a c0       	rjmp	.+20     	; 0x2c10 <main+0xa0>
			}
			else {
				counter1--;
    2bfc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bfe:	9d 81       	ldd	r25, Y+5	; 0x05
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	9d 83       	std	Y+5, r25	; 0x05
    2c04:	8c 83       	std	Y+4, r24	; 0x04
				counter2++;
    2c06:	8a 81       	ldd	r24, Y+2	; 0x02
    2c08:	9b 81       	ldd	r25, Y+3	; 0x03
    2c0a:	01 96       	adiw	r24, 0x01	; 1
    2c0c:	9b 83       	std	Y+3, r25	; 0x03
    2c0e:	8a 83       	std	Y+2, r24	; 0x02
			}
			angle1=counter1;
    2c10:	8c 81       	ldd	r24, Y+4	; 0x04
    2c12:	9d 81       	ldd	r25, Y+5	; 0x05
    2c14:	90 93 92 02 	sts	0x0292, r25
    2c18:	80 93 91 02 	sts	0x0291, r24
			angle2=counter2;
    2c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c20:	90 93 94 02 	sts	0x0294, r25
    2c24:	80 93 93 02 	sts	0x0293, r24
		}

		servo_set(angle1,180);
    2c28:	80 91 91 02 	lds	r24, 0x0291
    2c2c:	90 91 92 02 	lds	r25, 0x0292
    2c30:	64 eb       	ldi	r22, 0xB4	; 180
    2c32:	70 e0       	ldi	r23, 0x00	; 0
    2c34:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <servo_set>
		servo2_set(angle2,180);
    2c38:	80 91 93 02 	lds	r24, 0x0293
    2c3c:	90 91 94 02 	lds	r25, 0x0294
    2c40:	64 eb       	ldi	r22, 0xB4	; 180
    2c42:	70 e0       	ldi	r23, 0x00	; 0
    2c44:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <servo2_set>
		delay_ms(1);
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <delay_ms>
    2c50:	b6 cf       	rjmp	.-148    	; 0x2bbe <main+0x4e>

00002c52 <__divmodhi4>:
    2c52:	97 fb       	bst	r25, 7
    2c54:	09 2e       	mov	r0, r25
    2c56:	07 26       	eor	r0, r23
    2c58:	0a d0       	rcall	.+20     	; 0x2c6e <__divmodhi4_neg1>
    2c5a:	77 fd       	sbrc	r23, 7
    2c5c:	04 d0       	rcall	.+8      	; 0x2c66 <__divmodhi4_neg2>
    2c5e:	27 d0       	rcall	.+78     	; 0x2cae <__udivmodhi4>
    2c60:	06 d0       	rcall	.+12     	; 0x2c6e <__divmodhi4_neg1>
    2c62:	00 20       	and	r0, r0
    2c64:	1a f4       	brpl	.+6      	; 0x2c6c <__divmodhi4_exit>

00002c66 <__divmodhi4_neg2>:
    2c66:	70 95       	com	r23
    2c68:	61 95       	neg	r22
    2c6a:	7f 4f       	sbci	r23, 0xFF	; 255

00002c6c <__divmodhi4_exit>:
    2c6c:	08 95       	ret

00002c6e <__divmodhi4_neg1>:
    2c6e:	f6 f7       	brtc	.-4      	; 0x2c6c <__divmodhi4_exit>
    2c70:	90 95       	com	r25
    2c72:	81 95       	neg	r24
    2c74:	9f 4f       	sbci	r25, 0xFF	; 255
    2c76:	08 95       	ret

00002c78 <__divmodsi4>:
    2c78:	97 fb       	bst	r25, 7
    2c7a:	09 2e       	mov	r0, r25
    2c7c:	05 26       	eor	r0, r21
    2c7e:	0e d0       	rcall	.+28     	; 0x2c9c <__divmodsi4_neg1>
    2c80:	57 fd       	sbrc	r21, 7
    2c82:	04 d0       	rcall	.+8      	; 0x2c8c <__divmodsi4_neg2>
    2c84:	28 d0       	rcall	.+80     	; 0x2cd6 <__udivmodsi4>
    2c86:	0a d0       	rcall	.+20     	; 0x2c9c <__divmodsi4_neg1>
    2c88:	00 1c       	adc	r0, r0
    2c8a:	38 f4       	brcc	.+14     	; 0x2c9a <__divmodsi4_exit>

00002c8c <__divmodsi4_neg2>:
    2c8c:	50 95       	com	r21
    2c8e:	40 95       	com	r20
    2c90:	30 95       	com	r19
    2c92:	21 95       	neg	r18
    2c94:	3f 4f       	sbci	r19, 0xFF	; 255
    2c96:	4f 4f       	sbci	r20, 0xFF	; 255
    2c98:	5f 4f       	sbci	r21, 0xFF	; 255

00002c9a <__divmodsi4_exit>:
    2c9a:	08 95       	ret

00002c9c <__divmodsi4_neg1>:
    2c9c:	f6 f7       	brtc	.-4      	; 0x2c9a <__divmodsi4_exit>
    2c9e:	90 95       	com	r25
    2ca0:	80 95       	com	r24
    2ca2:	70 95       	com	r23
    2ca4:	61 95       	neg	r22
    2ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca8:	8f 4f       	sbci	r24, 0xFF	; 255
    2caa:	9f 4f       	sbci	r25, 0xFF	; 255
    2cac:	08 95       	ret

00002cae <__udivmodhi4>:
    2cae:	aa 1b       	sub	r26, r26
    2cb0:	bb 1b       	sub	r27, r27
    2cb2:	51 e1       	ldi	r21, 0x11	; 17
    2cb4:	07 c0       	rjmp	.+14     	; 0x2cc4 <__udivmodhi4_ep>

00002cb6 <__udivmodhi4_loop>:
    2cb6:	aa 1f       	adc	r26, r26
    2cb8:	bb 1f       	adc	r27, r27
    2cba:	a6 17       	cp	r26, r22
    2cbc:	b7 07       	cpc	r27, r23
    2cbe:	10 f0       	brcs	.+4      	; 0x2cc4 <__udivmodhi4_ep>
    2cc0:	a6 1b       	sub	r26, r22
    2cc2:	b7 0b       	sbc	r27, r23

00002cc4 <__udivmodhi4_ep>:
    2cc4:	88 1f       	adc	r24, r24
    2cc6:	99 1f       	adc	r25, r25
    2cc8:	5a 95       	dec	r21
    2cca:	a9 f7       	brne	.-22     	; 0x2cb6 <__udivmodhi4_loop>
    2ccc:	80 95       	com	r24
    2cce:	90 95       	com	r25
    2cd0:	bc 01       	movw	r22, r24
    2cd2:	cd 01       	movw	r24, r26
    2cd4:	08 95       	ret

00002cd6 <__udivmodsi4>:
    2cd6:	a1 e2       	ldi	r26, 0x21	; 33
    2cd8:	1a 2e       	mov	r1, r26
    2cda:	aa 1b       	sub	r26, r26
    2cdc:	bb 1b       	sub	r27, r27
    2cde:	fd 01       	movw	r30, r26
    2ce0:	0d c0       	rjmp	.+26     	; 0x2cfc <__udivmodsi4_ep>

00002ce2 <__udivmodsi4_loop>:
    2ce2:	aa 1f       	adc	r26, r26
    2ce4:	bb 1f       	adc	r27, r27
    2ce6:	ee 1f       	adc	r30, r30
    2ce8:	ff 1f       	adc	r31, r31
    2cea:	a2 17       	cp	r26, r18
    2cec:	b3 07       	cpc	r27, r19
    2cee:	e4 07       	cpc	r30, r20
    2cf0:	f5 07       	cpc	r31, r21
    2cf2:	20 f0       	brcs	.+8      	; 0x2cfc <__udivmodsi4_ep>
    2cf4:	a2 1b       	sub	r26, r18
    2cf6:	b3 0b       	sbc	r27, r19
    2cf8:	e4 0b       	sbc	r30, r20
    2cfa:	f5 0b       	sbc	r31, r21

00002cfc <__udivmodsi4_ep>:
    2cfc:	66 1f       	adc	r22, r22
    2cfe:	77 1f       	adc	r23, r23
    2d00:	88 1f       	adc	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	1a 94       	dec	r1
    2d06:	69 f7       	brne	.-38     	; 0x2ce2 <__udivmodsi4_loop>
    2d08:	60 95       	com	r22
    2d0a:	70 95       	com	r23
    2d0c:	80 95       	com	r24
    2d0e:	90 95       	com	r25
    2d10:	9b 01       	movw	r18, r22
    2d12:	ac 01       	movw	r20, r24
    2d14:	bd 01       	movw	r22, r26
    2d16:	cf 01       	movw	r24, r30
    2d18:	08 95       	ret

00002d1a <__prologue_saves__>:
    2d1a:	2f 92       	push	r2
    2d1c:	3f 92       	push	r3
    2d1e:	4f 92       	push	r4
    2d20:	5f 92       	push	r5
    2d22:	6f 92       	push	r6
    2d24:	7f 92       	push	r7
    2d26:	8f 92       	push	r8
    2d28:	9f 92       	push	r9
    2d2a:	af 92       	push	r10
    2d2c:	bf 92       	push	r11
    2d2e:	cf 92       	push	r12
    2d30:	df 92       	push	r13
    2d32:	ef 92       	push	r14
    2d34:	ff 92       	push	r15
    2d36:	0f 93       	push	r16
    2d38:	1f 93       	push	r17
    2d3a:	cf 93       	push	r28
    2d3c:	df 93       	push	r29
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
    2d42:	ca 1b       	sub	r28, r26
    2d44:	db 0b       	sbc	r29, r27
    2d46:	0f b6       	in	r0, 0x3f	; 63
    2d48:	f8 94       	cli
    2d4a:	de bf       	out	0x3e, r29	; 62
    2d4c:	0f be       	out	0x3f, r0	; 63
    2d4e:	cd bf       	out	0x3d, r28	; 61
    2d50:	09 94       	ijmp

00002d52 <__epilogue_restores__>:
    2d52:	2a 88       	ldd	r2, Y+18	; 0x12
    2d54:	39 88       	ldd	r3, Y+17	; 0x11
    2d56:	48 88       	ldd	r4, Y+16	; 0x10
    2d58:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d5a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d5c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d5e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d60:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d62:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d64:	b9 84       	ldd	r11, Y+9	; 0x09
    2d66:	c8 84       	ldd	r12, Y+8	; 0x08
    2d68:	df 80       	ldd	r13, Y+7	; 0x07
    2d6a:	ee 80       	ldd	r14, Y+6	; 0x06
    2d6c:	fd 80       	ldd	r15, Y+5	; 0x05
    2d6e:	0c 81       	ldd	r16, Y+4	; 0x04
    2d70:	1b 81       	ldd	r17, Y+3	; 0x03
    2d72:	aa 81       	ldd	r26, Y+2	; 0x02
    2d74:	b9 81       	ldd	r27, Y+1	; 0x01
    2d76:	ce 0f       	add	r28, r30
    2d78:	d1 1d       	adc	r29, r1
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	de bf       	out	0x3e, r29	; 62
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	cd bf       	out	0x3d, r28	; 61
    2d84:	ed 01       	movw	r28, r26
    2d86:	08 95       	ret

00002d88 <_exit>:
    2d88:	f8 94       	cli

00002d8a <__stop_program>:
    2d8a:	ff cf       	rjmp	.-2      	; 0x2d8a <__stop_program>
